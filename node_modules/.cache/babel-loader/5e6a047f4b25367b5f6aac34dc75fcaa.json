{"ast":null,"code":"import Oviz from \"crux\";\nimport template from \"./template.bvt\";\nimport { NetworkDiagram } from \"./network\";\nimport { registerEditorConfig } from \"utils/editor\";\nimport { editorConfig } from \"./editor\";\nimport { register } from \"page/visualizers\";\nvar MODULE_NAME = 'network-diagram';\nvar geneColors = [\"#73A79E\", \"#C7C88F\", \"#9895AC\", \"#C46A60\", \"#6A8EA7\", \"#C69054\", \"#8FAF59\", \"#C5A2B4\", \"#ACACAC\"];\nOviz.use.theme(\"mh-light\", {\n  \"extends\": \"light\",\n  colors: {\n    primary: \"#5aae61\",\n    path: \"white\"\n  },\n  schemes: {\n    phylumScheme: geneColors,\n    hueScheme: getTestColors(),\n    satScheme: getTestColors1()\n  }\n});\n\nfunction getTestColors() {\n  var colors = [];\n  var Color = Oviz.color.Color;\n  var initColor = Color.hsl(0, 75, 75);\n  colors.push(initColor.string);\n\n  for (var i = 1; i < 20; i++) {\n    initColor = initColor.shiftHue(20);\n    colors.push(initColor.string);\n  }\n\n  return colors;\n}\n\nfunction getTestColors1() {\n  var colors = [];\n  var Color = Oviz.color.Color;\n  var initColor = Color.hsl(0, 50, 50);\n  colors.push(initColor.string);\n\n  for (var i = 1; i < 20; i++) {\n    initColor = initColor.shiftHue(20);\n    colors.push(initColor.string);\n  }\n\n  return colors;\n}\n\nfunction isEmpty(str) {\n  if (!str || str.trim() === \"\" || str === \"NA\") return true;\n  return false;\n}\n\nfunction init() {\n  if (window.gon.module_name !== MODULE_NAME) return;\n\n  var _Oviz$visualize = Oviz.visualize({\n    el: \"#canvas\",\n    template: template,\n    theme: \"mh-light\",\n    components: {\n      NetworkDiagram: NetworkDiagram\n    },\n    data: {\n      config: {\n        showNodeNames: false\n      }\n    },\n    loadData: {\n      networkEdges: {\n        fileKey: \"networkEdges\",\n        type: \"tsv\",\n        loaded: function loaded(d) {\n          var validEdges = [];\n          d.forEach(function (edge) {\n            if (!isEmpty(edge.Target)) validEdges.push({\n              source: edge.Source,\n              target: edge.Target,\n              correlation: edge.Correlation\n            });\n          });\n          return validEdges;\n        }\n      },\n      networkNodes: {\n        fileKey: \"networkNodes\",\n        type: \"tsv\",\n        loaded: function loaded(d) {\n          var phylums = {};\n          d.forEach(function (node) {\n            if (!isEmpty(node.NodePhylum)) {\n              if (isEmpty(node.NodeGenus)) node.NodeGenus = \"\";else {\n                if (!phylums[node.NodePhylum]) phylums[node.NodePhylum] = [node.NodeGenus];else if (!phylums[node.NodePhylum].includes(node.NodeGenus)) phylums[node.NodePhylum].push(node.NodeGenus);\n              }\n            } else {\n              node.NodePhylum = \"\";\n              node.NodeGenus = \"\";\n            }\n          });\n          Object.keys(phylums).forEach(function (k) {\n            return phylums[k] = phylums[k].sort();\n          });\n          phylums[\"Other\"] = [\"Unclassified\"];\n          this.data.phylums = phylums;\n          this.data.nodeColorMap = initializeNodeColors(phylums);\n          return d;\n        }\n      }\n    },\n    setup: function setup() {\n      registerEditorConfig(editorConfig(this));\n    }\n  }),\n      visualizer = _Oviz$visualize.visualizer;\n\n  return [visualizer, {\n    theme: {\n      light: \"mh-light\",\n      dark: \"dark\"\n    }\n  }];\n}\n\nfunction initializeNodeColors(phylums) {\n  var colorMap = {};\n  var j = 0;\n  var Color = Oviz.color.Color;\n  Object.keys(phylums).forEach(function (k) {\n    colorMap[k] = {};\n    var initColor = Color.hsl(j, 75, 70);\n    var hueInterval = 20;\n\n    if (phylums[k].length <= 5) {\n      // let counter = 0;\n      phylums[k].forEach(function (genus, i) {\n        colorMap[k][genus] = initColor.shiftHue(Math.ceil(i / 3) * hueInterval).darken(20 * (i % 3)).string;\n      });\n      j = j + Math.ceil(phylums[k].length / 3) * hueInterval;\n    } else {\n      phylums[k].forEach(function (genus, i) {\n        colorMap[k][genus] = initColor.shiftHue(Math.ceil(i / 3) * hueInterval).darken(20 * (i % 3)).saturate(10 * (i % 2)).string;\n      });\n      j = j + Math.ceil(phylums[k].length / 3) * hueInterval;\n    }\n  });\n  var unknown = {\n    Unclassified: Color.rgb(200, 200, 200).string\n  };\n  colorMap[\"Other\"] = unknown;\n  return colorMap;\n}\n\nregister(MODULE_NAME, init);","map":{"version":3,"sources":["/Users/wangzhenyu/Desktop/fyp_workspace/meta_platform/app/javascript/viz/network-diagram/index.ts"],"names":["Oviz","template","NetworkDiagram","registerEditorConfig","editorConfig","register","MODULE_NAME","geneColors","use","theme","colors","primary","path","schemes","phylumScheme","hueScheme","getTestColors","satScheme","getTestColors1","Color","color","initColor","hsl","push","string","i","shiftHue","isEmpty","str","trim","init","window","gon","module_name","visualize","el","components","data","config","showNodeNames","loadData","networkEdges","fileKey","type","loaded","d","validEdges","forEach","edge","Target","source","Source","target","correlation","Correlation","networkNodes","phylums","node","NodePhylum","NodeGenus","includes","Object","keys","k","sort","nodeColorMap","initializeNodeColors","setup","visualizer","light","dark","colorMap","j","hueInterval","length","genus","Math","ceil","darken","saturate","unknown","Unclassified","rgb"],"mappings":"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","sourcesContent":["import Oviz from \"crux\";\nimport template from \"./template.bvt\";\nimport { NetworkDiagram } from \"./network\";\nimport { registerEditorConfig } from \"utils/editor\";\nimport { editorConfig, editorRef } from \"./editor\";\n\nimport {register} from \"page/visualizers\";\n\nconst MODULE_NAME = 'network-diagram'\n\nconst geneColors = [ \"#73A79E\",\n    \"#C7C88F\", \"#9895AC\", \"#C46A60\", \"#6A8EA7\", \"#C69054\",\n    \"#8FAF59\", \"#C5A2B4\", \"#ACACAC\"];\n\nOviz.use.theme(\"mh-light\", {\n    extends: \"light\",\n    colors: {\n        primary: \"#5aae61\",\n        path: \"white\",\n    },\n    schemes: {\n        phylumScheme: geneColors,\n        hueScheme: getTestColors(),\n        satScheme: getTestColors1(),\n    },\n});\n\nfunction getTestColors(): string[] {\n    const colors = [];\n    const Color = Oviz.color.Color;\n    let initColor = Color.hsl(0, 75, 75);\n    colors.push(initColor.string);\n    for (let i = 1; i < 20; i++) {\n        initColor = initColor.shiftHue(20);\n        colors.push(initColor.string);\n    }\n    return colors;\n}\n\nfunction getTestColors1(): string[] {\n    const colors = [];\n    const Color = Oviz.color.Color;\n    let initColor = Color.hsl(0, 50, 50);\n    colors.push(initColor.string);\n    for (let i = 1; i < 20; i++) {\n        initColor = initColor.shiftHue(20);\n        colors.push(initColor.string);\n    }\n    return colors;\n}\nfunction isEmpty(str: string): boolean {\n    if ( !str || str.trim() === \"\" || str === \"NA\") return true;\n    return false;\n}\nfunction init() {\n    if (window.gon.module_name !== MODULE_NAME) return;\n\n    const { visualizer } = Oviz.visualize({\n        el: \"#canvas\",\n        template,\n        theme: \"mh-light\",\n        components: {NetworkDiagram},\n        data:  {\n            config: {\n                showNodeNames: false,\n            },\n        },\n        loadData: {\n            networkEdges: {\n                fileKey: \"networkEdges\",\n                type: \"tsv\",\n                loaded(d) {\n                    const validEdges = [];\n                    d.forEach( edge => {\n                        if (!isEmpty(edge.Target)) \n                            validEdges.push({\n                                source: edge.Source,\n                                target: edge.Target,\n                                correlation: edge.Correlation\n                            });\n                    });\n                    return validEdges;\n                }\n            },\n            networkNodes: {\n                fileKey: \"networkNodes\",\n                type: \"tsv\",\n                loaded(d) {\n                    const phylums = {};\n                    d.forEach( node => {\n                        if (!isEmpty(node.NodePhylum)) {\n                            if (isEmpty(node.NodeGenus)) node.NodeGenus = \"\";\n                            else {\n                                if (!phylums[node.NodePhylum])\n                                    phylums[node.NodePhylum] = [node.NodeGenus];\n                            else if (!phylums[node.NodePhylum].includes(node.NodeGenus))\n                                    phylums[node.NodePhylum].push(node.NodeGenus);\n                            }\n                        } else {\n                            node.NodePhylum = \"\";\n                            node.NodeGenus = \"\";\n                        }\n                    });\n                    Object.keys(phylums).forEach( k => phylums[k] = phylums[k].sort());\n                    phylums[\"Other\"] = [\"Unclassified\"];\n                    this.data.phylums = phylums;\n                    this.data.nodeColorMap = initializeNodeColors(phylums);\n                    return d;\n                },\n            },\n        },\n        setup() {\n            registerEditorConfig(editorConfig(this));\n        },\n    });\n    return [visualizer, {\n        theme: {\n            light: \"mh-light\",\n            dark: \"dark\",\n        },\n    }];\n}\n\nfunction initializeNodeColors(phylums): any {\n    const colorMap = {};\n    let j = 0;\n    const Color = Oviz.color.Color;\n    Object.keys(phylums).forEach(k => {\n        colorMap[k] = {};\n        const initColor = Color.hsl(j, 75, 70);\n        const hueInterval = 20;\n        if (phylums[k].length <= 5) {\n            // let counter = 0;\n            phylums[k].forEach((genus, i) => {\n                colorMap[k][genus] = initColor.shiftHue(Math.ceil(i / 3) * hueInterval)\n                                            .darken(20 * (i % 3)).string;\n            });\n            j = j + Math.ceil(phylums[k].length / 3) * hueInterval;\n        } else {\n            phylums[k].forEach((genus, i) => {\n                colorMap[k][genus] = initColor.shiftHue(Math.ceil(i / 3) * hueInterval)\n                                            .darken(20 * (i % 3)).saturate(10 * (i % 2 )).string;\n            });\n            j = j + Math.ceil(phylums[k].length / 3) * hueInterval;\n        }\n    });\n    const unknown = {Unclassified: Color.rgb(200,200,200).string};\n    colorMap[\"Other\"] = unknown;\n    return colorMap;\n}\n\nregister(MODULE_NAME, init);\n"]},"metadata":{},"sourceType":"module"}