{"ast":null,"code":"function _slicedToArray(arr, i) { return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray(arr, i) || _nonIterableRest(); }\n\nfunction _nonIterableRest() { throw new TypeError(\"Invalid attempt to destructure non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\"); }\n\nfunction _iterableToArrayLimit(arr, i) { if (typeof Symbol === \"undefined\" || !(Symbol.iterator in Object(arr))) return; var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i[\"return\"] != null) _i[\"return\"](); } finally { if (_d) throw _e; } } return _arr; }\n\nfunction _arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }\n\nfunction _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }\n\nfunction _createForOfIteratorHelper(o, allowArrayLike) { var it; if (typeof Symbol === \"undefined\" || o[Symbol.iterator] == null) { if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === \"number\") { if (it) o = it; var i = 0; var F = function F() {}; return { s: F, n: function n() { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }, e: function e(_e2) { throw _e2; }, f: F }; } throw new TypeError(\"Invalid attempt to iterate non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\"); } var normalCompletion = true, didErr = false, err; return { s: function s() { it = o[Symbol.iterator](); }, n: function n() { var step = it.next(); normalCompletion = step.done; return step; }, e: function e(_e3) { didErr = true; err = _e3; }, f: function f() { try { if (!normalCompletion && it[\"return\"] != null) it[\"return\"](); } finally { if (didErr) throw err; } } }; }\n\nfunction _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === \"string\") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === \"Object\" && o.constructor) n = o.constructor.name; if (n === \"Map\" || n === \"Set\") return Array.from(o); if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }\n\nfunction _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }\n\nfunction removeComment(line) {\n  var index = 0;\n  var inString = false;\n  var leftQuote = null;\n  var hasSlash = false;\n\n  var _iterator = _createForOfIteratorHelper(line),\n      _step;\n\n  try {\n    for (_iterator.s(); !(_step = _iterator.n()).done;) {\n      var _char = _step.value;\n\n      if (inString) {\n        if (_char === leftQuote) {\n          leftQuote = null;\n          inString = false;\n        }\n      } else {\n        if (_char === \"'\" || _char === \"`\" || _char === \"\\\"\") {\n          leftQuote = _char;\n          inString = true;\n        } else if (_char === \"/\") {\n          if (hasSlash) {\n            // double slash\n            break;\n          } else {\n            hasSlash = true;\n            index += 1;\n            continue;\n          }\n        }\n      }\n\n      index += 1;\n      hasSlash = false;\n    }\n  } catch (err) {\n    _iterator.e(err);\n  } finally {\n    _iterator.f();\n  }\n\n  return index >= line.length ? line : line.slice(0, index - 1);\n}\n\nexport var ParserStream = /*#__PURE__*/function () {\n  function ParserStream(str) {\n    _classCallCheck(this, ParserStream);\n\n    this.pos = 0;\n    this.str = str.split(\"\\n\").filter(function (x) {\n      return x.trim();\n    }).map(function (x) {\n      return removeComment(x);\n    }).join(\"\\n\").trim();\n  }\n\n  _createClass(ParserStream, [{\n    key: \"advance\",\n    value: function advance(step) {\n      this.pos += step;\n      this.str = this.str.substring(step);\n    }\n  }, {\n    key: \"eof\",\n    value: function eof() {\n      return this.str.length === 0;\n    }\n  }, {\n    key: \"expect\",\n    value: function expect(token) {\n      var desc = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : token;\n      var testOnly = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;\n      var match = this.str.match(new RegExp(\"^\".concat(token)));\n\n      if (!match && !testOnly) {\n        this._error(\"\".concat(this.pos, \": Expect \").concat(desc));\n      }\n\n      if (!testOnly) {\n        this.advance(match[0].length);\n      }\n\n      return match;\n    }\n  }, {\n    key: \"expectEnd\",\n    value: function expectEnd() {\n      if (this.str.length > 0) {\n        this._error(\"Redundant template string: \".concat(this.str));\n      }\n    }\n  }, {\n    key: \"skipSpaces\",\n    value: function skipSpaces() {\n      var includeNewLines = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : false;\n      var i = 0;\n\n      while (this.str[i] === \" \" || this.str[i] === \"\\t\" || includeNewLines && this.str[i] === \"\\n\") {\n        i++;\n      }\n\n      this.advance(i);\n    }\n  }, {\n    key: \"consumeTill\",\n    value: function consumeTill(token) {\n      var consumeEnd = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : true;\n      var checkError = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : true;\n      var i = this.str.indexOf(token);\n\n      if (i < 0) {\n        if (checkError) {\n          this._error(\"\".concat(this.pos, \": Expect \").concat(token));\n        } else {\n          i = this.str.length;\n        }\n      }\n\n      var result = this.str.substring(0, i);\n      this.advance(i + (consumeEnd ? token.length : 0));\n      return result;\n    }\n  }, {\n    key: \"consume\",\n    value: function consume(predicate, desc) {\n      var i = 0;\n\n      while (i < this.str.length) {\n        var _predicate = predicate(this.str[i]),\n            _predicate2 = _slicedToArray(_predicate, 2),\n            end = _predicate2[0],\n            consume = _predicate2[1];\n\n        if (end) {\n          var result = this.str.substring(0, i);\n          this.advance(i + (consume ? 1 : 0));\n          return result;\n        }\n\n        i++;\n      }\n\n      this._error(\"Error: Expect \".concat(desc)); // TS: to supress warning\n\n\n      return \"\";\n    }\n  }, {\n    key: \"consumeSync\",\n    value: function consumeSync(predicate, desc) {\n      while (!this.eof()) {\n        var _predicate3 = predicate(this.str[0]),\n            _predicate4 = _slicedToArray(_predicate3, 2),\n            end = _predicate4[0],\n            consume = _predicate4[1];\n\n        this.advance(consume ? 1 : 0);\n        if (end) return;\n      }\n    }\n  }, {\n    key: \"peek\",\n    value: function peek() {\n      var n = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 1;\n      return this.str.substr(0, n);\n    }\n  }, {\n    key: \"test\",\n    value: function test(token) {\n      return this.expect(token, \"\", true);\n    }\n  }, {\n    key: \"tryApplyAny\",\n    value: function tryApplyAny(parserList, desc) {\n      var _iterator2 = _createForOfIteratorHelper(parserList),\n          _step2;\n\n      try {\n        for (_iterator2.s(); !(_step2 = _iterator2.n()).done;) {\n          var p = _step2.value;\n\n          var _p = _slicedToArray(p, 2),\n              _token = _p[0],\n              parser = _p[1];\n\n          if (this.expect(_token, \"\", true)) {\n            return parser.call(null, this);\n          }\n        }\n      } catch (err) {\n        _iterator2.e(err);\n      } finally {\n        _iterator2.f();\n      }\n\n      this._error(\"\".concat(this.pos, \": \").concat(desc, \". None of the predicates applies.\")); // TS: to supress warning\n\n\n      return {};\n    }\n  }, {\n    key: \"_logPos\",\n    value: function _logPos() {\n      console.error(this.str.substring(0, 50));\n    }\n  }, {\n    key: \"_error\",\n    value: function _error(msg) {\n      this._logPos();\n\n      throw new Error(msg);\n    }\n  }]);\n\n  return ParserStream;\n}();","map":null,"metadata":{},"sourceType":"module"}