{"ast":null,"code":"function _typeof(obj) { \"@babel/helpers - typeof\"; if (typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; }; } return _typeof(obj); }\n\nfunction _slicedToArray(arr, i) { return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray(arr, i) || _nonIterableRest(); }\n\nfunction _nonIterableRest() { throw new TypeError(\"Invalid attempt to destructure non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\"); }\n\nfunction _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === \"string\") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === \"Object\" && o.constructor) n = o.constructor.name; if (n === \"Map\" || n === \"Set\") return Array.from(o); if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }\n\nfunction _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }\n\nfunction _iterableToArrayLimit(arr, i) { if (typeof Symbol === \"undefined\" || !(Symbol.iterator in Object(arr))) return; var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i[\"return\"] != null) _i[\"return\"](); } finally { if (_d) throw _e; } } return _arr; }\n\nfunction _arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }\n\nfunction _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }\n\nfunction _inherits(subClass, superClass) { if (typeof superClass !== \"function\" && superClass !== null) { throw new TypeError(\"Super expression must either be null or a function\"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }\n\nfunction _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }\n\nfunction _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }\n\nfunction _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === \"object\" || typeof call === \"function\")) { return call; } return _assertThisInitialized(self); }\n\nfunction _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\"); } return self; }\n\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Date.prototype.toString.call(Reflect.construct(Date, [], function () {})); return true; } catch (e) { return false; } }\n\nfunction _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }\n\nimport { getThemeColor } from \"../../color\";\nimport { getFinalPosition } from \"../../layout/layout\";\nimport { canvasFill, canvasRotate, canvasStroke } from \"../../rendering/canvas/canvas-helper\";\nimport { svgInnerHTML, svgPropFillAndStroke, svgPropPassthrough, svgRotation } from \"../../rendering/svg/svg-helper\";\nimport { measuredTextSize } from \"../../utils/text-size\";\nimport { PrimitiveElement } from \"./primitive\";\nexport var Text = /*#__PURE__*/function (_PrimitiveElement) {\n  _inherits(Text, _PrimitiveElement);\n\n  var _super = _createSuper(Text);\n\n  function Text() {\n    _classCallCheck(this, Text);\n\n    return _super.apply(this, arguments);\n  }\n\n  _createClass(Text, [{\n    key: \"defaultProp\",\n    value: function defaultProp() {\n      return {\n        fontSize: 12,\n        fill: getThemeColor(this.$v.theme, \"text\")\n      };\n    }\n  }, {\n    key: \"willAdjustAnchor\",\n    value: function willAdjustAnchor() {\n      if (this.prop.noSizeMeasurement) {\n        this.$cachedHeight = typeof this.prop.fixedHeight === \"number\" ? this.prop.fixedHeight : 0;\n        this.$cachedWidth = typeof this.prop.fixedWidth === \"number\" ? this.prop.fixedWidth : 0;\n        return;\n      }\n\n      var text = typeof this.prop.text === \"string\" ? this.prop.text : (this.prop.text || this.prop.text === 0) && this.prop.text.toString ? this.prop.text.toString() : this.prop.html && this.prop.html.toString ? strip(this.prop.html.toString()) : null;\n\n      if (text === null) {\n        throw new Error(\"Text: you must supply either \\\"text\\\" or \\\"html\\\".\");\n      }\n\n      var box = measuredTextSize(text, this.prop.fontSize, this.prop.fontFamily);\n      this.$cachedHeight = box.height;\n      this.$cachedWidth = box.width;\n    }\n  }, {\n    key: \"svgAttrs\",\n    value: function svgAttrs() {\n      var _getFinalPosition = getFinalPosition(this),\n          _getFinalPosition2 = _slicedToArray(_getFinalPosition, 2),\n          x = _getFinalPosition2[0],\n          y = _getFinalPosition2[1];\n\n      return Object.assign(Object.assign(Object.assign(Object.assign(Object.assign(Object.assign({}, svgRotation(this)), svgPropFillAndStroke(this)), svgInnerHTML(this)), svgPropPassthrough({\n        \"font-size\": \"fontSize\",\n        \"font-family\": \"fontFamily\"\n      })(this)), {\n        x: x,\n        y: y + this.$cachedHeight\n      }), this.getFixedTextLength());\n    }\n  }, {\n    key: \"svgTagName\",\n    value: function svgTagName() {\n      return \"text\";\n    }\n  }, {\n    key: \"svgTextContent\",\n    value: function svgTextContent() {\n      return this.prop.text;\n    }\n  }, {\n    key: \"renderToCanvas\",\n    value: function renderToCanvas(ctx) {\n      canvasRotate(ctx, this);\n\n      var _getFinalPosition3 = getFinalPosition(this),\n          _getFinalPosition4 = _slicedToArray(_getFinalPosition3, 2),\n          x = _getFinalPosition4[0],\n          y = _getFinalPosition4[1];\n\n      ctx.beginPath();\n      canvasFill(ctx, this, true);\n      canvasStroke(ctx, this, true);\n\n      if (this.prop.fontSize) {\n        ctx.font = \"\".concat(this.prop.fontSize, \"px \").concat(this.prop.fontFamily || \"Arial\");\n      }\n\n      ctx.fillText(this.prop.text, x, y + this.$cachedHeight);\n      if (this.prop.stroke) ctx.strokeText(this.prop.text, x, y + this.$cachedHeight);\n    }\n  }, {\n    key: \"getFixedTextLength\",\n    value: function getFixedTextLength() {\n      if (this.prop.drawFixedWidth) {\n        return {\n          textLength: \"\".concat(this.prop.fixedWidth || 0, \"px\")\n        };\n      }\n\n      if (this.prop.maxWidth && this.$cachedWidth > this.prop.maxWidth) {\n        return {\n          textLength: \"\".concat(this.prop.maxWidth, \"px\")\n        };\n      }\n\n      return null;\n    }\n  }, {\n    key: \"maxX\",\n    get: function get() {\n      return this.$geometry._x + this.$cachedWidth;\n    }\n  }, {\n    key: \"maxY\",\n    get: function get() {\n      return this.$geometry._y + this.$cachedHeight;\n    }\n  }, {\n    key: \"layoutWidth\",\n    get: function get() {\n      return this.$cachedWidth;\n    }\n  }, {\n    key: \"layoutHeight\",\n    get: function get() {\n      return this.$cachedHeight;\n    }\n  }], [{\n    key: \"propNameForInitializer\",\n    value: function propNameForInitializer() {\n      return \"text\";\n    }\n  }]);\n\n  return Text;\n}(PrimitiveElement);\n\nfunction strip(html) {\n  return html.replace(/<\\/?.+?>/g, \"\");\n}","map":null,"metadata":{},"sourceType":"module"}