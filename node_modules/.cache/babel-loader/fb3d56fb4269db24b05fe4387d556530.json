{"ast":null,"code":"function _slicedToArray(arr, i) { return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray(arr, i) || _nonIterableRest(); }\n\nfunction _nonIterableRest() { throw new TypeError(\"Invalid attempt to destructure non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\"); }\n\nfunction _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === \"string\") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === \"Object\" && o.constructor) n = o.constructor.name; if (n === \"Map\" || n === \"Set\") return Array.from(o); if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }\n\nfunction _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }\n\nfunction _iterableToArrayLimit(arr, i) { if (typeof Symbol === \"undefined\" || !(Symbol.iterator in Object(arr))) return; var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i[\"return\"] != null) _i[\"return\"](); } finally { if (_d) throw _e; } } return _arr; }\n\nfunction _arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }\n\nfunction _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }\n\nimport { Color } from \"../color\";\nimport { getTheme } from \"../global\";\nexport var Theme = /*#__PURE__*/function () {\n  function Theme(def) {\n    _classCallCheck(this, Theme);\n\n    this.def = def;\n    this.colors = {};\n    this.schemes = {};\n    if (!def.colors) def.colors = {};\n    if (!def.schemes) def.schemes = {};\n    var baseSchemes = {};\n\n    if (def[\"extends\"]) {\n      var baseTheme = getTheme(def[\"extends\"]);\n\n      for (var _i2 = 0, _Object$entries = Object.entries(baseTheme.colors); _i2 < _Object$entries.length; _i2++) {\n        var _ref3 = _Object$entries[_i2];\n\n        var _ref2 = _slicedToArray(_ref3, 2);\n\n        var k = _ref2[0];\n        var color = _ref2[1];\n        this.colors[k] = color.clone();\n      }\n\n      baseSchemes = baseTheme.schemes;\n    }\n\n    for (var _i3 = 0, _Object$entries2 = Object.entries(def.colors); _i3 < _Object$entries2.length; _i3++) {\n      var _ref6 = _Object$entries2[_i3];\n\n      var _ref5 = _slicedToArray(_ref6, 2);\n\n      var _k = _ref5[0];\n      var _color = _ref5[1];\n      this.colors[_k] = Color.literal(_color);\n    }\n\n    Object.assign(this.schemes, baseSchemes);\n\n    if (def.schemes) {\n      this._parseScheme(def.schemes, baseSchemes);\n    }\n  }\n\n  _createClass(Theme, [{\n    key: \"_parseScheme\",\n    value: function _parseScheme(schemes, baseSchemes) {\n      var _this = this;\n\n      var _loop = function _loop() {\n        var _ref7 = _Object$entries3[_i4];\n        _ref8 = _slicedToArray(_ref7, 2);\n        var k = _ref8[0];\n        var def = _ref8[1];\n        if (!def) return \"continue\";\n\n        if (Array.isArray(def)) {\n          _this.schemes[k] = def.map(function (color) {\n            return color[0] === \"$\" ? _this.colors[color.substr(1)] : Color.literal(color);\n          });\n        } else if (def[\"extends\"]) {\n          var base = baseSchemes[def[\"extends\"]];\n          if (!base) throw new Error(\"Cannot find color scheme \\\"\".concat(def[\"extends\"], \"\\\" to extend\"));\n          _this.schemes[k] = base.map(function (c, i) {\n            return def.transform(c, i);\n          });\n        }\n      };\n\n      for (var _i4 = 0, _Object$entries3 = Object.entries(schemes); _i4 < _Object$entries3.length; _i4++) {\n        var _ref8;\n\n        var _ret = _loop();\n\n        if (_ret === \"continue\") continue;\n      }\n    }\n  }]);\n\n  return Theme;\n}();","map":null,"metadata":{},"sourceType":"module"}