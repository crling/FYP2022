{"ast":null,"code":"function _createForOfIteratorHelper(o, allowArrayLike) { var it; if (typeof Symbol === \"undefined\" || o[Symbol.iterator] == null) { if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === \"number\") { if (it) o = it; var i = 0; var F = function F() {}; return { s: F, n: function n() { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }, e: function e(_e) { throw _e; }, f: F }; } throw new TypeError(\"Invalid attempt to iterate non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\"); } var normalCompletion = true, didErr = false, err; return { s: function s() { it = o[Symbol.iterator](); }, n: function n() { var step = it.next(); normalCompletion = step.done; return step; }, e: function e(_e2) { didErr = true; err = _e2; }, f: function f() { try { if (!normalCompletion && it[\"return\"] != null) it[\"return\"](); } finally { if (didErr) throw err; } } }; }\n\nfunction _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === \"string\") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === \"Object\" && o.constructor) n = o.constructor.name; if (n === \"Map\" || n === \"Set\") return Array.from(o); if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }\n\nfunction _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }\n\nfunction _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }\n\nexport function labelGroup(data) {\n  return new LabelGroup(data);\n}\nexport var LabelGroup = /*#__PURE__*/function () {\n  function LabelGroup(data) {\n    _classCallCheck(this, LabelGroup);\n\n    this._maxWidth = 600;\n    this._minWidth = 0;\n    this._minGap = 14;\n    this.data = data;\n  }\n\n  _createClass(LabelGroup, [{\n    key: \"minGap\",\n    value: function minGap(gap) {\n      this._minGap = gap;\n      return this;\n    }\n  }, {\n    key: \"maxSize\",\n    value: function maxSize(size) {\n      this._minWidth = size[0];\n      this._maxWidth = size[1];\n      return this;\n    }\n  }, {\n    key: \"displayX\",\n    value: function displayX(fn) {\n      this._displayX = fn;\n      return this;\n    }\n  }, {\n    key: \"prepare\",\n    value: function prepare() {\n      // initialize distance obj, reset all related fields in data\n      this._distance = [0];\n      var di;\n      var pi; // data[i], previous i\n\n      for (var i = 0; i < this.data.length; i++) {\n        di = this.data[i];\n        pi = this.data[i - 1];\n        di._adjustedX = di._displayX = this._displayX(di);\n        di._offsetX = 0;\n        di._displayed = di._displayX >= this._minWidth && di._displayX <= this._maxWidth;\n\n        if (i === 0) {\n          continue;\n        }\n\n        this._distance[i] = di._displayX - pi._displayX;\n      } // initialize groups\n\n\n      this._groups = [];\n      this._groupOf = Array.from(Array(this.data.length));\n    }\n  }, {\n    key: \"adjust\",\n    value: function adjust(group) {\n      var minPos = this.data[group.min]._displayX;\n      var maxPos = this.data[group.max]._displayX;\n      var mutCount = group.max - group.min + 1;\n      var spanNeeded = (mutCount - 1) * this._minGap;\n      var spanMidPoint = (minPos + maxPos) / 2;\n      var leftEdge = spanMidPoint - spanNeeded / 2;\n      var rightEdge = spanMidPoint + spanNeeded / 2; // check if need to add left element to group\n\n      if (group.min > 0) {\n        // if not the first mut point\n        var prev = group.min - 1;\n        var leftElX = this.data[prev]._displayX;\n\n        if (leftElX >= this._minWidth && leftEdge - leftElX < this._minGap) {\n          // add left element to group\n          if (this._groupOf[prev]) {\n            // if left already belongs to a group, need merge\n            var leftGroup = this._groupOf[prev]; // remove left group\n\n            var leftGroupIndex = this._groups.indexOf(leftGroup);\n\n            console.assert(leftGroupIndex >= 0);\n\n            this._groups.splice(leftGroupIndex, 1); // merge\n\n\n            group.min = leftGroup.min;\n\n            for (var i = leftGroup.min; i <= leftGroup.max; i++) {\n              this._groupOf[i] = group;\n            }\n          } else {\n            // don't need merge\n            group.min = prev;\n            this._groupOf[prev] = group;\n          }\n\n          this.adjust(group);\n        }\n      } // check if need to add right element to group\n\n\n      if (group.max < this.data.length - 1) {\n        var next = group.max + 1;\n        var rightElX = this.data[next]._displayX;\n\n        if (rightElX <= this._maxWidth && rightElX - rightEdge < this._minGap) {\n          // add right\n          if (this._groupOf[next]) {\n            // next has a group, need merge\n            var rightGroup = this._groupOf[next]; // remove right group\n\n            var rightGroupIndex = this._groups.indexOf(rightGroup);\n\n            console.assert(rightGroupIndex >= 0);\n\n            this._groups.splice(rightGroupIndex, 1); // merge\n\n\n            group.max = rightGroup.max;\n\n            for (var _i = rightGroup.min; _i <= rightGroup.max; _i++) {\n              this._groupOf[_i] = group;\n            }\n          } else {\n            group.max = next;\n            this._groupOf[next] = group;\n          }\n\n          this.adjust(group);\n        }\n      }\n    }\n  }, {\n    key: \"run\",\n    value: function run() {\n      this.prepare(); // do grouping\n\n      for (var i = 1; i < this._distance.length; i++) {\n        var curr = this._distance[i];\n\n        if (curr < this._minGap && !this._groupOf[i] && this.data[i]._displayed) {\n          // group two close elements\n          var group = {\n            min: i - 1,\n            max: i\n          };\n\n          this._groups.push(group);\n\n          this._groupOf[i] = this._groupOf[i - 1] = group;\n          this.adjust(group);\n        }\n      } // calculate\n\n\n      var _iterator = _createForOfIteratorHelper(this._groups),\n          _step;\n\n      try {\n        for (_iterator.s(); !(_step = _iterator.n()).done;) {\n          var _i2 = _step.value;\n          var minPos = this.data[_i2.min]._displayX;\n          var maxPos = this.data[_i2.max]._displayX;\n          var count = _i2.max - _i2.min + 1;\n          var spanNeeded = (count - 1) * this._minGap;\n          var spanMidPoint = (minPos + maxPos) / 2;\n          var leftEdge = spanMidPoint - spanNeeded / 2;\n          var j = -1;\n\n          for (var k = _i2.min; k <= _i2.max; k++) {\n            j++;\n            this.data[k]._adjustedX = leftEdge + this._minGap * j;\n            this.data[k]._offsetX = this.data[k]._adjustedX - this.data[k]._displayX;\n          }\n        }\n      } catch (err) {\n        _iterator.e(err);\n      } finally {\n        _iterator.f();\n      }\n\n      return this.data;\n    }\n  }]);\n\n  return LabelGroup;\n}();","map":null,"metadata":{},"sourceType":"module"}