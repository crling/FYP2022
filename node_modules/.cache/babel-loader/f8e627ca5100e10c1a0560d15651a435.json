{"ast":null,"code":"function ownKeys(object, enumerableOnly) {\n  var keys = Object.keys(object);\n\n  if (Object.getOwnPropertySymbols) {\n    var symbols = Object.getOwnPropertySymbols(object);\n    if (enumerableOnly) symbols = symbols.filter(function (sym) {\n      return Object.getOwnPropertyDescriptor(object, sym).enumerable;\n    });\n    keys.push.apply(keys, symbols);\n  }\n\n  return keys;\n}\n\nfunction _objectSpread(target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = arguments[i] != null ? arguments[i] : {};\n\n    if (i % 2) {\n      ownKeys(Object(source), true).forEach(function (key) {\n        _defineProperty(target, key, source[key]);\n      });\n    } else if (Object.getOwnPropertyDescriptors) {\n      Object.defineProperties(target, Object.getOwnPropertyDescriptors(source));\n    } else {\n      ownKeys(Object(source)).forEach(function (key) {\n        Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));\n      });\n    }\n  }\n\n  return target;\n}\n\nfunction _defineProperty(obj, key, value) {\n  if (key in obj) {\n    Object.defineProperty(obj, key, {\n      value: value,\n      enumerable: true,\n      configurable: true,\n      writable: true\n    });\n  } else {\n    obj[key] = value;\n  }\n\n  return obj;\n}\n\nimport Vue from '../../utils/vue';\nimport KeyCodes from '../../utils/key-codes';\nimport BVTransition from '../../utils/bv-transition';\nimport { attemptFocus, contains, getActiveElement, getTabables } from '../../utils/dom';\nimport { getComponentConfig } from '../../utils/config';\nimport { isBrowser } from '../../utils/env';\nimport { toString } from '../../utils/string';\nimport attrsMixin from '../../mixins/attrs';\nimport idMixin from '../../mixins/id';\nimport listenOnRootMixin from '../../mixins/listen-on-root';\nimport normalizeSlotMixin from '../../mixins/normalize-slot';\nimport { EVENT_TOGGLE, EVENT_STATE, EVENT_STATE_REQUEST, EVENT_STATE_SYNC } from '../../directives/toggle/toggle';\nimport { BButtonClose } from '../button/button-close';\nimport { BIconX } from '../../icons/icons'; // --- Constants ---\n\nvar NAME = 'BSidebar';\nvar CLASS_NAME = 'b-sidebar'; // --- Render methods ---\n\nvar renderHeaderTitle = function renderHeaderTitle(h, ctx) {\n  var title = ctx.normalizeSlot('title', ctx.slotScope) || toString(ctx.title) || null; // Render a empty `<span>` when to title was provided\n\n  if (!title) {\n    return h('span');\n  }\n\n  return h('strong', {\n    attrs: {\n      id: ctx.safeId('__title__')\n    }\n  }, [title]);\n};\n\nvar renderHeaderClose = function renderHeaderClose(h, ctx) {\n  if (ctx.noHeaderClose) {\n    return h();\n  }\n\n  var closeLabel = ctx.closeLabel,\n      textVariant = ctx.textVariant,\n      hide = ctx.hide;\n  return h(BButtonClose, {\n    ref: 'close-button',\n    props: {\n      ariaLabel: closeLabel,\n      textVariant: textVariant\n    },\n    on: {\n      click: hide\n    }\n  }, [ctx.normalizeSlot('header-close') || h(BIconX)]);\n};\n\nvar renderHeader = function renderHeader(h, ctx) {\n  if (ctx.noHeader) {\n    return h();\n  }\n\n  var $title = renderHeaderTitle(h, ctx);\n  var $close = renderHeaderClose(h, ctx);\n  return h('header', {\n    key: 'header',\n    staticClass: \"\".concat(CLASS_NAME, \"-header\"),\n    \"class\": ctx.headerClass\n  }, ctx.right ? [$close, $title] : [$title, $close]);\n};\n\nvar renderBody = function renderBody(h, ctx) {\n  return h('div', {\n    key: 'body',\n    staticClass: \"\".concat(CLASS_NAME, \"-body\"),\n    \"class\": ctx.bodyClass\n  }, [ctx.normalizeSlot('default', ctx.slotScope)]);\n};\n\nvar renderFooter = function renderFooter(h, ctx) {\n  var $footer = ctx.normalizeSlot('footer', ctx.slotScope);\n\n  if (!$footer) {\n    return h();\n  }\n\n  return h('footer', {\n    key: 'footer',\n    staticClass: \"\".concat(CLASS_NAME, \"-footer\"),\n    \"class\": ctx.footerClass\n  }, [$footer]);\n};\n\nvar renderContent = function renderContent(h, ctx) {\n  // We render the header even if `lazy` is enabled as it\n  // acts as the accessible label for the sidebar\n  var $header = renderHeader(h, ctx);\n\n  if (ctx.lazy && !ctx.isOpen) {\n    return $header;\n  }\n\n  return [$header, renderBody(h, ctx), renderFooter(h, ctx)];\n};\n\nvar renderBackdrop = function renderBackdrop(h, ctx) {\n  if (!ctx.backdrop) {\n    return h();\n  }\n\n  var backdropVariant = ctx.backdropVariant;\n  return h('div', {\n    directives: [{\n      name: 'show',\n      value: ctx.localShow\n    }],\n    staticClass: 'b-sidebar-backdrop',\n    \"class\": _defineProperty({}, \"bg-\".concat(backdropVariant), !!backdropVariant),\n    on: {\n      click: ctx.onBackdropClick\n    }\n  });\n}; // --- Main component ---\n// @vue/component\n\n\nexport var BSidebar = /*#__PURE__*/Vue.extend({\n  name: NAME,\n  // Mixin order is important!\n  mixins: [attrsMixin, idMixin, listenOnRootMixin, normalizeSlotMixin],\n  inheritAttrs: false,\n  model: {\n    prop: 'visible',\n    event: 'change'\n  },\n  props: {\n    title: {\n      type: String // default: null\n\n    },\n    right: {\n      type: Boolean,\n      \"default\": false\n    },\n    bgVariant: {\n      type: String,\n      \"default\": function _default() {\n        return getComponentConfig(NAME, 'bgVariant');\n      }\n    },\n    textVariant: {\n      type: String,\n      \"default\": function _default() {\n        return getComponentConfig(NAME, 'textVariant');\n      }\n    },\n    shadow: {\n      type: [Boolean, String],\n      \"default\": function _default() {\n        return getComponentConfig(NAME, 'shadow');\n      }\n    },\n    width: {\n      type: String,\n      \"default\": function _default() {\n        return getComponentConfig(NAME, 'width');\n      }\n    },\n    zIndex: {\n      type: [Number, String] // default: null\n\n    },\n    ariaLabel: {\n      type: String // default: null\n\n    },\n    ariaLabelledby: {\n      type: String // default: null\n\n    },\n    closeLabel: {\n      // `aria-label` for close button\n      // Defaults to 'Close'\n      type: String // default: undefined\n\n    },\n    tag: {\n      type: String,\n      \"default\": function _default() {\n        return getComponentConfig(NAME, 'tag');\n      }\n    },\n    sidebarClass: {\n      type: [String, Array, Object] // default: null\n\n    },\n    headerClass: {\n      type: [String, Array, Object] // default: null\n\n    },\n    bodyClass: {\n      type: [String, Array, Object] // default: null\n\n    },\n    footerClass: {\n      type: [String, Array, Object] // default: null\n\n    },\n    backdrop: {\n      // If `true`, shows a basic backdrop\n      type: Boolean,\n      \"default\": false\n    },\n    backdropVariant: {\n      type: String,\n      \"default\": function _default() {\n        return getComponentConfig(NAME, 'backdropVariant');\n      }\n    },\n    noSlide: {\n      type: Boolean,\n      \"default\": false\n    },\n    noHeader: {\n      type: Boolean,\n      \"default\": false\n    },\n    noHeaderClose: {\n      type: Boolean,\n      \"default\": false\n    },\n    noCloseOnEsc: {\n      type: Boolean,\n      \"default\": false\n    },\n    noCloseOnBackdrop: {\n      type: Boolean,\n      \"default\": false\n    },\n    noCloseOnRouteChange: {\n      type: Boolean,\n      \"default\": false\n    },\n    lazy: {\n      type: Boolean,\n      \"default\": false\n    },\n    visible: {\n      type: Boolean,\n      \"default\": false\n    }\n  },\n  data: function data() {\n    return {\n      // Internal `v-model` state\n      localShow: !!this.visible,\n      // For lazy render triggering\n      isOpen: !!this.visible\n    };\n  },\n  computed: {\n    transitionProps: function transitionProps() {\n      return this.noSlide ?\n      /* istanbul ignore next */\n      {\n        css: true\n      } : {\n        css: true,\n        enterClass: '',\n        enterActiveClass: 'slide',\n        enterToClass: 'show',\n        leaveClass: 'show',\n        leaveActiveClass: 'slide',\n        leaveToClass: ''\n      };\n    },\n    slotScope: function slotScope() {\n      return {\n        visible: this.localShow,\n        right: this.right,\n        hide: this.hide\n      };\n    },\n    computedTile: function computedTile() {\n      return this.normalizeSlot('title', this.slotScope) || toString(this.title) || null;\n    },\n    titleId: function titleId() {\n      return this.computedTile ? this.safeId('__title__') : null;\n    },\n    computedAttrs: function computedAttrs() {\n      return _objectSpread(_objectSpread({}, this.bvAttrs), {}, {\n        id: this.safeId(),\n        tabindex: '-1',\n        role: 'dialog',\n        'aria-modal': this.backdrop ? 'true' : 'false',\n        'aria-hidden': this.localShow ? null : 'true',\n        'aria-label': this.ariaLabel || null,\n        'aria-labelledby': this.ariaLabelledby || this.titleId || null\n      });\n    }\n  },\n  watch: {\n    visible: function visible(newVal, oldVal) {\n      if (newVal !== oldVal) {\n        this.localShow = newVal;\n      }\n    },\n    localShow: function localShow(newVal, oldVal) {\n      if (newVal !== oldVal) {\n        this.emitState(newVal);\n        this.$emit('change', newVal);\n      }\n    },\n\n    /* istanbul ignore next */\n    $route: function $route()\n    /* istanbul ignore next: pain to mock */\n    {\n      var newVal = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n      var oldVal = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n\n      if (!this.noCloseOnRouteChange && newVal.fullPath !== oldVal.fullPath) {\n        this.hide();\n      }\n    }\n  },\n  created: function created() {\n    // Define non-reactive properties\n    this.$_returnFocusEl = null;\n  },\n  mounted: function mounted() {\n    var _this = this; // Add `$root` listeners\n\n\n    this.listenOnRoot(EVENT_TOGGLE, this.handleToggle);\n    this.listenOnRoot(EVENT_STATE_REQUEST, this.handleSync); // Send out a gratuitous state event to ensure toggle button is synced\n\n    this.$nextTick(function () {\n      _this.emitState(_this.localShow);\n    });\n  },\n\n  /* istanbul ignore next */\n  activated: function activated()\n  /* istanbul ignore next */\n  {\n    this.emitSync();\n  },\n  beforeDestroy: function beforeDestroy() {\n    this.localShow = false;\n    this.$_returnFocusEl = null;\n  },\n  methods: {\n    hide: function hide() {\n      this.localShow = false;\n    },\n    emitState: function emitState() {\n      var state = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : this.localShow;\n      this.emitOnRoot(EVENT_STATE, this.safeId(), state);\n    },\n    emitSync: function emitSync() {\n      var state = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : this.localShow;\n      this.emitOnRoot(EVENT_STATE_SYNC, this.safeId(), state);\n    },\n    handleToggle: function handleToggle(id) {\n      // Note `safeId()` can be null until after mount\n      if (id && id === this.safeId()) {\n        this.localShow = !this.localShow;\n      }\n    },\n    handleSync: function handleSync(id) {\n      var _this2 = this; // Note `safeId()` can be null until after mount\n\n\n      if (id && id === this.safeId()) {\n        this.$nextTick(function () {\n          _this2.emitSync(_this2.localShow);\n        });\n      }\n    },\n    onKeydown: function onKeydown(evt) {\n      var keyCode = evt.keyCode;\n\n      if (!this.noCloseOnEsc && keyCode === KeyCodes.ESC && this.localShow) {\n        this.hide();\n      }\n    },\n    onBackdropClick: function onBackdropClick() {\n      if (this.localShow && !this.noCloseOnBackdrop) {\n        this.hide();\n      }\n    },\n\n    /* istanbul ignore next */\n    onTopTrapFocus: function onTopTrapFocus()\n    /* istanbul ignore next */\n    {\n      var tabables = getTabables(this.$refs.content);\n      attemptFocus(tabables.reverse()[0]);\n    },\n\n    /* istanbul ignore next */\n    onBottomTrapFocus: function onBottomTrapFocus()\n    /* istanbul ignore next */\n    {\n      var tabables = getTabables(this.$refs.content);\n      attemptFocus(tabables[0]);\n    },\n    onBeforeEnter: function onBeforeEnter() {\n      // Returning focus to `document.body` may cause unwanted scrolls,\n      // so we exclude setting focus on body\n      this.$_returnFocusEl = getActiveElement(isBrowser ? [document.body] : []); // Trigger lazy render\n\n      this.isOpen = true;\n    },\n    onAfterEnter: function onAfterEnter(el) {\n      if (!contains(el, getActiveElement())) {\n        attemptFocus(el);\n      }\n\n      this.$emit('shown');\n    },\n    onAfterLeave: function onAfterLeave() {\n      attemptFocus(this.$_returnFocusEl);\n      this.$_returnFocusEl = null; // Trigger lazy render\n\n      this.isOpen = false;\n      this.$emit('hidden');\n    }\n  },\n  render: function render(h) {\n    var _ref;\n\n    var localShow = this.localShow;\n    var shadow = this.shadow === '' ? true : this.shadow;\n    var $sidebar = h(this.tag, {\n      ref: 'content',\n      directives: [{\n        name: 'show',\n        value: localShow\n      }],\n      staticClass: CLASS_NAME,\n      \"class\": [(_ref = {\n        shadow: shadow === true\n      }, _defineProperty(_ref, \"shadow-\".concat(shadow), shadow && shadow !== true), _defineProperty(_ref, \"\".concat(CLASS_NAME, \"-right\"), this.right), _defineProperty(_ref, \"bg-\".concat(this.bgVariant), !!this.bgVariant), _defineProperty(_ref, \"text-\".concat(this.textVariant), !!this.textVariant), _ref), this.sidebarClass],\n      attrs: this.computedAttrs,\n      style: {\n        width: this.width\n      }\n    }, [renderContent(h, this)]);\n    $sidebar = h('transition', {\n      props: this.transitionProps,\n      on: {\n        beforeEnter: this.onBeforeEnter,\n        afterEnter: this.onAfterEnter,\n        afterLeave: this.onAfterLeave\n      }\n    }, [$sidebar]);\n    var $backdrop = h(BVTransition, {\n      props: {\n        noFade: this.noSlide\n      }\n    }, [renderBackdrop(h, this)]);\n    var $tabTrapTop = h();\n    var $tabTrapBottom = h();\n\n    if (this.backdrop && this.localShow) {\n      $tabTrapTop = h('div', {\n        attrs: {\n          tabindex: '0'\n        },\n        on: {\n          focus: this.onTopTrapFocus\n        }\n      });\n      $tabTrapBottom = h('div', {\n        attrs: {\n          tabindex: '0'\n        },\n        on: {\n          focus: this.onBottomTrapFocus\n        }\n      });\n    }\n\n    return h('div', {\n      staticClass: 'b-sidebar-outer',\n      style: {\n        zIndex: this.zIndex\n      },\n      attrs: {\n        tabindex: '-1'\n      },\n      on: {\n        keydown: this.onKeydown\n      }\n    }, [$tabTrapTop, $sidebar, $tabTrapBottom, $backdrop]);\n  }\n});","map":null,"metadata":{},"sourceType":"module"}