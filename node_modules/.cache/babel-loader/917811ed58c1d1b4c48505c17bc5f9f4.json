{"ast":null,"code":"function _slicedToArray(arr, i) { return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray(arr, i) || _nonIterableRest(); }\n\nfunction _nonIterableRest() { throw new TypeError(\"Invalid attempt to destructure non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\"); }\n\nfunction _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === \"string\") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === \"Object\" && o.constructor) n = o.constructor.name; if (n === \"Map\" || n === \"Set\") return Array.from(o); if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }\n\nfunction _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }\n\nfunction _iterableToArrayLimit(arr, i) { if (typeof Symbol === \"undefined\" || !(Symbol.iterator in Object(arr))) return; var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i[\"return\"] != null) _i[\"return\"](); } finally { if (_d) throw _e; } } return _arr; }\n\nfunction _arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }\n\nfunction _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }\n\nvar _a;\n\nexport var kLazyElement = Symbol(\"LazyElement\");\nvar renderCache = [];\nexport var LazyElementDef = /*#__PURE__*/function () {\n  function LazyElementDef(v, tag, id, uniqID, staticVal, block) {\n    _classCallCheck(this, LazyElementDef);\n\n    this.v = v;\n    this.tag = tag;\n    this.id = id;\n    this.uniqID = uniqID;\n    this.staticVal = staticVal;\n    this.block = block;\n    this[_a] = true;\n  }\n\n  _createClass(LazyElementDef, [{\n    key: \"unfold\",\n    value: function unfold(thisRef) {\n      var tag = this.tag,\n          id = this.id,\n          uniqID = this.uniqID;\n      var cache;\n      var k = \"\".concat(uniqID, \"@@\").concat(tag);\n      var hasStatic = this.staticVal !== null && this.staticVal !== undefined;\n      var isStatic = typeof this.staticVal === \"function\" ? this.staticVal() : this.staticVal;\n\n      if (hasStatic) {\n        cache = renderCache[this.v.uid];\n\n        if (!cache) {\n          cache = renderCache[this.v.uid] = new Map();\n        }\n\n        if (isStatic && !this.v.forceRedraw) {\n          var _data = cache.get(k);\n\n          if (_data) return _data;\n        }\n      }\n\n      var _this$block$call = this.block.call(thisRef),\n          _this$block$call2 = _slicedToArray(_this$block$call, 2),\n          opt = _this$block$call2[0],\n          rawChildren = _this$block$call2[1]; // FIXME: stop using flat()\n\n\n      var children = rawChildren.flat(8).filter(function (x) {\n        return x;\n      });\n      var data = {\n        tag: tag,\n        id: id,\n        opt: opt,\n        children: children\n      };\n\n      if (hasStatic) {\n        cache.set(k, data);\n      }\n\n      return data;\n    }\n  }]);\n\n  return LazyElementDef;\n}();\n_a = kLazyElement;","map":null,"metadata":{},"sourceType":"module"}