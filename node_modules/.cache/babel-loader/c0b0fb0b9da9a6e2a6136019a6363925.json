{"ast":null,"code":"function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction _inherits(subClass, superClass) { if (typeof superClass !== \"function\" && superClass !== null) { throw new TypeError(\"Super expression must either be null or a function\"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }\n\nfunction _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }\n\nfunction _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }\n\nfunction _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === \"object\" || typeof call === \"function\")) { return call; } return _assertThisInitialized(self); }\n\nfunction _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\"); } return self; }\n\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Date.prototype.toString.call(Reflect.construct(Date, [], function () {})); return true; } catch (e) { return false; } }\n\nfunction _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }\n\nfunction _typeof(obj) { \"@babel/helpers - typeof\"; if (typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; }; } return _typeof(obj); }\n\nvar __decorate = this && this.__decorate || function (decorators, target, key, desc) {\n  var c = arguments.length,\n      r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc,\n      d;\n  if ((typeof Reflect === \"undefined\" ? \"undefined\" : _typeof(Reflect)) === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);else for (var i = decorators.length - 1; i >= 0; i--) {\n    if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n  }\n  return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\n\nimport { useTemplate } from \"../../ext/decorator\";\nimport { BaseChart } from \"./base-chart\";\n\nvar Dots =\n/** @class */\nfunction () {\n  var Dots = /*#__PURE__*/function (_BaseChart) {\n    _inherits(Dots, _BaseChart);\n\n    var _super = _createSuper(Dots);\n\n    function Dots() {\n      _classCallCheck(this, Dots);\n\n      return _super.apply(this, arguments);\n    }\n\n    return Dots;\n  }(BaseChart);\n\n  Dots = __decorate([useTemplate(\"\\nComponent {\\n    xScale = getScale(true) || createXScale()\\n    yScale = getScale(false) || createYScale()\\n\\n    @for (d, index) in data.values {\\n        Component {\\n            key = index\\n            @let x = flipped ? getY(d.value) : getX(d.pos)\\n            @let y = flipped ? getX(d.pos) : getY(d.value)\\n            @if prop.namedChildren.links && index < data.values.length - 1 {\\n                @let fromData = { x: x, y: y, data: d }\\n                @let next = data.values[index + 1]\\n                @let nx = flipped ? getY(next.value) : getX(next.pos)\\n                @let ny = flipped ? getX(next.pos) : getY(next.value)\\n                @let toData = { x: nx, y: ny, data: next }\\n                @let linksData = { from: fromData, to: toData }\\n                @yield links with linksData\\n            }\\n            Component {\\n                x = x\\n                y = y\\n                width = 0; height = 0\\n\\n                @yield children with d default {\\n                    Circle.centered {\\n                        r = 2; fill =\\\"#aaa\\\"\\n                        @props prop.opt.dots\\n                    }\\n                }\\n            }\\n        }\\n    }\\n}\\n\")], Dots);\n  return Dots;\n}();\n\nexport { Dots };","map":null,"metadata":{},"sourceType":"module"}