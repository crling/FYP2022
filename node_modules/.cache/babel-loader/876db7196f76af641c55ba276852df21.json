{"ast":null,"code":"import Vue from '../../utils/vue';\nimport { mergeData } from 'vue-functional-data-merge';\nimport { normalizeSlot } from '../../utils/normalize-slot';\nimport { BMediaBody } from './media-body';\nimport { BMediaAside } from './media-aside';\nexport var props = {\n  tag: {\n    type: String,\n    \"default\": 'div'\n  },\n  rightAlign: {\n    type: Boolean,\n    \"default\": false\n  },\n  verticalAlign: {\n    type: String,\n    \"default\": 'top'\n  },\n  noBody: {\n    type: Boolean,\n    \"default\": false\n  }\n}; // @vue/component\n\nexport var BMedia = /*#__PURE__*/Vue.extend({\n  name: 'BMedia',\n  functional: true,\n  props: props,\n  render: function render(h, _ref) {\n    var props = _ref.props,\n        data = _ref.data,\n        slots = _ref.slots,\n        scopedSlots = _ref.scopedSlots,\n        children = _ref.children;\n    var childNodes = props.noBody ? children : [];\n\n    if (!props.noBody) {\n      var $slots = slots();\n      var $scopedSlots = scopedSlots || {};\n      var $aside = normalizeSlot('aside', {}, $scopedSlots, $slots);\n      var $default = normalizeSlot('default', {}, $scopedSlots, $slots);\n\n      if ($aside && !props.rightAlign) {\n        childNodes.push(h(BMediaAside, {\n          staticClass: 'mr-3',\n          props: {\n            verticalAlign: props.verticalAlign\n          }\n        }, $aside));\n      }\n\n      childNodes.push(h(BMediaBody, $default));\n\n      if ($aside && props.rightAlign) {\n        childNodes.push(h(BMediaAside, {\n          staticClass: 'ml-3',\n          props: {\n            verticalAlign: props.verticalAlign\n          }\n        }, $aside));\n      }\n    }\n\n    return h(props.tag, mergeData(data, {\n      staticClass: 'media'\n    }), childNodes);\n  }\n});","map":null,"metadata":{},"sourceType":"module"}