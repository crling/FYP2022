{"ast":null,"code":"function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport Oviz from \"crux\";\nimport template from \"./template.bvt\";\nimport { processTreeData } from \"./data\";\nimport { editorConfig, editorRef } from \"./editor\";\nimport { SignedHeatMap } from \"./signed-heatmap\";\nimport { BinaryTree, Gravity } from \"./binary-tree\";\nimport { savedTheme } from \"oviz-common/mem-theme\";\nimport { register } from \"page/visualizers\";\nimport { registerEditorConfig } from \"utils/editor\"; // reigister default color theme\n\nOviz.use.theme(\"mh-dark\", {\n  \"extends\": \"dark\",\n  colors: {\n    primary: \"#5aae61\",\n    path: \"white\"\n  },\n  schemes: {\n    discreteDataScheme: [\"white\", \"grey\", \"red\"]\n  }\n});\nOviz.use.theme(\"mh-light\", {\n  \"extends\": \"light\",\n  colors: {\n    primary: \"#5aae61\",\n    path: \"black\"\n  },\n  schemes: {\n    discreteDataScheme: [\"white\", \"grey\", \"red\"]\n  }\n});\nvar MODULE_NAME = 'signed-heatmap';\n\nfunction init() {\n  if (!window.gon || window.gon.module_name !== MODULE_NAME) return;\n\n  var _Oviz$visualize = Oviz.visualize({\n    el: \"#canvas\",\n    template: template,\n    theme: savedTheme(\"mh\", \"mh-light\"),\n    components: {\n      SignedHeatMap: SignedHeatMap,\n      BinaryTree: BinaryTree\n    },\n    data: {\n      config: {\n        showPAnno: true,\n        rangeMin: 0,\n        rangeMax: 0,\n        isSym: true,\n        gridH: 15,\n        rowTree: {\n          treeHeight: 200,\n          depthUnit: 0,\n          gravity: Gravity.Right\n        },\n        colTree: {\n          treeHeight: 100,\n          depthUnit: 0,\n          gravity: Gravity.Bottom\n        }\n      },\n      colors: {\n        \"origin\": \"white\",\n        \"positive range\": \"red\",\n        \"negative range\": \"green\",\n        \"group1\": \"#EC7063\",\n        \"group2\": \"#58D68D\"\n      },\n      heatmapDataP: null,\n      groupData: null,\n      rowTreeData: null,\n      colTreeData: null\n    },\n    loadData: {\n      heatmapData: {\n        type: \"tsv\",\n        fileKey: \"heatmapData\",\n        loaded: function loaded(d) {\n          if (!d) return;\n          var rows = [];\n          var data = {};\n          var min = 0,\n              max = 0;\n          d.forEach(function (line) {\n            var rowData = {};\n            var rowAttr = line[\"\"];\n            rows.push(rowAttr);\n            d.columns.forEach(function (col) {\n              if (col === \"\") return;\n              var h = {};\n              h[\"r\"] = line[col];\n              if (parseFloat(line[col]) > max) max = line[col];\n              if (parseFloat(line[col]) < min) min = line[col];\n              rowData[col] = h;\n            });\n            data[rowAttr] = rowData;\n          });\n          return {\n            rows: rows,\n            columns: d.columns.splice(1, d.columns.length),\n            data: data,\n            range: {\n              min: min,\n              max: max\n            }\n          };\n        }\n      },\n      heatmapDataP: {\n        type: \"tsv\",\n        fileKey: \"heatmapDataP\",\n        dependsOn: [\"heatmapData\"],\n        optional: true,\n        loaded: function loaded(d) {\n          var _this = this;\n\n          if (!d) return;\n          this.data.heatmapData.rows.forEach(function (r) {\n            d.forEach(function (line) {\n              if (line[\"\"] === r) {\n                _this.data.heatmapData.columns.forEach(function (c) {\n                  _this.data.heatmapData.data[r][c][\"p\"] = line[c];\n                });\n\n                return;\n              }\n            });\n          });\n          return null;\n        }\n      },\n      groupData: {\n        type: \"tsv\",\n        fileKey: \"groupData\",\n        loaded: function l(d) {\n          if (!d) return;\n          var data = {};\n          var phylums = {};\n          this.data.heatmapData.rows.forEach(function (r) {\n            d.forEach(function (line) {\n              if (line.Species === r) {\n                data[r] = _objectSpread({}, line);\n              }\n            });\n          });\n          d.forEach(function (s) {\n            if (!phylums[s.Phylum]) phylums[s.Phylum] = [s.Genus];else if (!phylums[s.Phylum].includes(s.Genus)) phylums[s.Phylum].push(s.Genus);\n          }); // name Unknown to Other [phylum]\n\n          Object.keys(phylums).forEach(function (k) {\n            phylums[k] = phylums[k].sort();\n\n            if (phylums[k].indexOf(\"Unknown\") > 0) {\n              phylums[k].splice(phylums[k].indexOf(\"Unknown\"), 1);\n              phylums[k].push(\"Other \" + k);\n            }\n          });\n          phylums[\"Other\"] = [\"Unclassified\"];\n          this.data.phylums = phylums;\n          this.data.familyColorMap = initializeFamilyColors(phylums);\n          return data;\n        }\n      },\n      rowTreeData: {\n        type: \"newick\",\n        fileKey: \"rowTreeData\",\n        dependsOn: ['heatmapData'],\n        optional: true,\n        loaded: function loaded(d) {\n          if (!d) return;\n          d.depth = 0;\n\n          var _processTreeData = processTreeData(d),\n              rootNode = _processTreeData.rootNode,\n              nodeList = _processTreeData.nodeList;\n\n          this.data.heatmapData.rows = sortByTreeNodes(nodeList, this.data.heatmapData.rows);\n          return rootNode;\n        }\n      },\n      colTreeData: {\n        type: \"newick\",\n        fileKey: \"colTreeData\",\n        dependsOn: ['heatmapData'],\n        optional: true,\n        loaded: function loaded(d) {\n          if (!d) return;\n          d.depth = 0;\n\n          var _processTreeData2 = processTreeData(d),\n              rootNode = _processTreeData2.rootNode,\n              nodeList = _processTreeData2.nodeList;\n\n          this.data.heatmapData.columns = sortByTreeNodes(nodeList, this.data.heatmapData.columns);\n          return rootNode;\n        }\n      }\n    },\n    setup: function setup() {\n      setUpRange(this);\n      registerEditorConfig(editorConfig(this), editorRef);\n      if (this.data.rowTreeData) setUpRowTree(this);\n      if (this.data.colTreeData) setUpColTree(this);\n      if (this.data.heatmapData.rows.length > 100) this.data.config.gridH = 10;else if (this.data.heatmapData.rows.length > 60) this.data.config.gridH = 12;\n    }\n  }),\n      visualizer = _Oviz$visualize.visualizer;\n\n  return visualizer;\n}\n/*\n* Control group species have negative correlation\n* Gout group species have positive correlation\n*/\n// let nodeSeq = 0;\n// let treeHeight = 0;\n\n\nfunction initializeFamilyColors(phylums) {\n  var colorMap = {};\n  var j = 200;\n  var Color = Oviz.color.Color;\n  Object.keys(phylums).forEach(function (k) {\n    colorMap[k] = {};\n    var initColor = Color.hsl(j, 75, 80);\n    var hueInterval = 20;\n\n    if (phylums[k].length <= 5) {\n      phylums[k].forEach(function (genus, i) {\n        colorMap[k][genus] = initColor.darken(10 * (i % 5)).string;\n      });\n      j = j + Math.ceil(phylums[k].length / 5) * hueInterval;\n    } else {\n      phylums[k].forEach(function (genus, i) {\n        colorMap[k][genus] = initColor.shiftHue(Math.ceil(i / 5) * hueInterval).darken(10 * (i % 5)).string;\n      });\n      j = j + Math.ceil(phylums[k].length / 5) * hueInterval;\n    }\n  });\n  var unknown = {\n    Unclassified: Color.rgb(200, 200, 200).string\n  };\n  colorMap[\"Other\"] = unknown;\n  return colorMap;\n}\n\nfunction setUpRowTree(v) {\n  v.data.config.rowTree.depthUnit = v.data.config.rowTree.treeHeight / v.data.rowTreeData.height;\n}\n\nfunction setUpColTree(v) {\n  v.data.config.colTree.depthUnit = v.data.config.rowTree.treeHeight / v.data.colTreeData.height;\n}\n\nfunction setUpRange(v) {\n  v.data.config.rangeMin = v.data.heatmapData.range.min;\n  v.data.config.rangeMax = v.data.heatmapData.range.max;\n} // export default SignedHeatmap;\n\n\nregister(MODULE_NAME, init);\nexport function registerSignedHeatmap() {\n  register(MODULE_NAME, init);\n}\n\nfunction sortByTreeNodes(treeArr, heatmapArr) {\n  var sortedArr = [];\n  treeArr.forEach(function (node) {\n    heatmapArr.forEach(function (d, i) {\n      var sortedD = d;\n\n      if (node.replace(/[^a-z]/ig, '') === d.replace(/[^a-z]/ig, '')) {\n        sortedArr.push(sortedD);\n        heatmapArr.splice(i, 1);\n      }\n    });\n  });\n  return sortedArr;\n}","map":{"version":3,"sources":["/Users/wangzhenyu/Desktop/fyp_workspace/meta_platform/app/javascript/viz/signed-heatmap/index.ts"],"names":["Oviz","template","processTreeData","editorConfig","editorRef","SignedHeatMap","BinaryTree","Gravity","savedTheme","register","registerEditorConfig","use","theme","colors","primary","path","schemes","discreteDataScheme","MODULE_NAME","init","window","gon","module_name","visualize","el","components","data","config","showPAnno","rangeMin","rangeMax","isSym","gridH","rowTree","treeHeight","depthUnit","gravity","Right","colTree","Bottom","heatmapDataP","groupData","rowTreeData","colTreeData","loadData","heatmapData","type","fileKey","loaded","d","rows","min","max","forEach","line","rowData","rowAttr","push","columns","col","h","parseFloat","splice","length","range","dependsOn","optional","r","c","l","phylums","Species","s","Phylum","Genus","includes","Object","keys","k","sort","indexOf","familyColorMap","initializeFamilyColors","depth","rootNode","nodeList","sortByTreeNodes","setup","setUpRange","setUpRowTree","setUpColTree","visualizer","colorMap","j","Color","color","initColor","hsl","hueInterval","genus","i","darken","string","Math","ceil","shiftHue","unknown","Unclassified","rgb","v","height","registerSignedHeatmap","treeArr","heatmapArr","sortedArr","node","sortedD","replace"],"mappings":";;;;;;AAAA,OAAOA,IAAP,MAAiB,MAAjB;AACA,OAAOC,QAAP,MAAqB,gBAArB;AACA,SAASC,eAAT,QAAgC,QAAhC;AACA,SAASC,YAAT,EAAuBC,SAAvB,QAAwC,UAAxC;AACA,SAASC,aAAT,QAA8B,kBAA9B;AACA,SAASC,UAAT,EAAqBC,OAArB,QAAoC,eAApC;AACA,SAAQC,UAAR,QAAyB,uBAAzB;AACA,SAAQC,QAAR,QAAuB,kBAAvB;AACA,SAASC,oBAAT,QAAqC,cAArC,C,CAEA;;AACAV,IAAI,CAACW,GAAL,CAASC,KAAT,CAAe,SAAf,EAA0B;AACtB,aAAS,MADa;AAEtBC,EAAAA,MAAM,EAAE;AACJC,IAAAA,OAAO,EAAE,SADL;AAEJC,IAAAA,IAAI,EAAE;AAFF,GAFc;AAMtBC,EAAAA,OAAO,EAAE;AACLC,IAAAA,kBAAkB,EAAE,CAAC,OAAD,EAAU,MAAV,EAAkB,KAAlB;AADf;AANa,CAA1B;AAWAjB,IAAI,CAACW,GAAL,CAASC,KAAT,CAAe,UAAf,EAA2B;AACvB,aAAS,OADc;AAEvBC,EAAAA,MAAM,EAAE;AACJC,IAAAA,OAAO,EAAE,SADL;AAEJC,IAAAA,IAAI,EAAE;AAFF,GAFe;AAMvBC,EAAAA,OAAO,EAAE;AACLC,IAAAA,kBAAkB,EAAE,CAAC,OAAD,EAAU,MAAV,EAAkB,KAAlB;AADf;AANc,CAA3B;AAWA,IAAMC,WAAW,GAAG,gBAApB;;AAEA,SAASC,IAAT,GAAgB;AACZ,MAAI,CAACC,MAAM,CAACC,GAAR,IAAeD,MAAM,CAACC,GAAP,CAAWC,WAAX,KAA2BJ,WAA9C,EAA2D;;AAD/C,wBAESlB,IAAI,CAACuB,SAAL,CAAe;AAChCC,IAAAA,EAAE,EAAE,SAD4B;AAEhCvB,IAAAA,QAAQ,EAARA,QAFgC;AAGhCW,IAAAA,KAAK,EAAEJ,UAAU,CAAC,IAAD,EAAO,UAAP,CAHe;AAIhCiB,IAAAA,UAAU,EAAE;AAACpB,MAAAA,aAAa,EAAbA,aAAD;AAAgBC,MAAAA,UAAU,EAAVA;AAAhB,KAJoB;AAKhCoB,IAAAA,IAAI,EAAE;AACFC,MAAAA,MAAM,EAAE;AACJC,QAAAA,SAAS,EAAE,IADP;AAEJC,QAAAA,QAAQ,EAAE,CAFN;AAGJC,QAAAA,QAAQ,EAAE,CAHN;AAIJC,QAAAA,KAAK,EAAE,IAJH;AAKJC,QAAAA,KAAK,EAAE,EALH;AAMJC,QAAAA,OAAO,EAAE;AACLC,UAAAA,UAAU,EAAE,GADP;AAELC,UAAAA,SAAS,EAAE,CAFN;AAGLC,UAAAA,OAAO,EAAE7B,OAAO,CAAC8B;AAHZ,SANL;AAWJC,QAAAA,OAAO,EAAE;AACLJ,UAAAA,UAAU,EAAE,GADP;AAELC,UAAAA,SAAS,EAAE,CAFN;AAGLC,UAAAA,OAAO,EAAE7B,OAAO,CAACgC;AAHZ;AAXL,OADN;AAkBF1B,MAAAA,MAAM,EAAE;AACJ,kBAAU,OADN;AAEJ,0BAAkB,KAFd;AAGJ,0BAAkB,OAHd;AAIJ,kBAAU,SAJN;AAKJ,kBAAU;AALN,OAlBN;AAyBF2B,MAAAA,YAAY,EAAE,IAzBZ;AA0BFC,MAAAA,SAAS,EAAE,IA1BT;AA2BFC,MAAAA,WAAW,EAAE,IA3BX;AA4BFC,MAAAA,WAAW,EAAE;AA5BX,KAL0B;AAmChCC,IAAAA,QAAQ,EAAE;AACNC,MAAAA,WAAW,EAAE;AACTC,QAAAA,IAAI,EAAE,KADG;AAETC,QAAAA,OAAO,EAAE,aAFA;AAGTC,QAAAA,MAHS,kBAGFC,CAHE,EAGC;AACN,cAAI,CAACA,CAAL,EAAQ;AACR,cAAMC,IAAI,GAAG,EAAb;AACA,cAAMxB,IAAI,GAAG,EAAb;AAHM,cAIDyB,GAJC,GAIY,CAJZ;AAAA,cAIIC,GAJJ,GAIe,CAJf;AAKNH,UAAAA,CAAC,CAACI,OAAF,CAAU,UAAAC,IAAI,EAAI;AACd,gBAAMC,OAAO,GAAG,EAAhB;AACA,gBAAMC,OAAO,GAAGF,IAAI,CAAC,EAAD,CAApB;AACAJ,YAAAA,IAAI,CAACO,IAAL,CAAUD,OAAV;AACAP,YAAAA,CAAC,CAACS,OAAF,CAAUL,OAAV,CAAkB,UAAAM,GAAG,EAAI;AACrB,kBAAIA,GAAG,KAAK,EAAZ,EAAgB;AAChB,kBAAMC,CAAC,GAAG,EAAV;AACAA,cAAAA,CAAC,CAAC,GAAD,CAAD,GAASN,IAAI,CAACK,GAAD,CAAb;AACA,kBAAIE,UAAU,CAACP,IAAI,CAACK,GAAD,CAAL,CAAV,GAAwBP,GAA5B,EAAiCA,GAAG,GAAGE,IAAI,CAACK,GAAD,CAAV;AACjC,kBAAIE,UAAU,CAACP,IAAI,CAACK,GAAD,CAAL,CAAV,GAAwBR,GAA5B,EAAiCA,GAAG,GAAGG,IAAI,CAACK,GAAD,CAAV;AACjCJ,cAAAA,OAAO,CAACI,GAAD,CAAP,GAAeC,CAAf;AACH,aAPD;AAQAlC,YAAAA,IAAI,CAAC8B,OAAD,CAAJ,GAAgBD,OAAhB;AACH,WAbD;AAcA,iBAAO;AAACL,YAAAA,IAAI,EAAJA,IAAD;AAAOQ,YAAAA,OAAO,EAAET,CAAC,CAACS,OAAF,CAAUI,MAAV,CAAiB,CAAjB,EAAoBb,CAAC,CAACS,OAAF,CAAUK,MAA9B,CAAhB;AAAuDrC,YAAAA,IAAI,EAAJA,IAAvD;AACHsC,YAAAA,KAAK,EAAE;AAACb,cAAAA,GAAG,EAAHA,GAAD;AAAMC,cAAAA,GAAG,EAAHA;AAAN;AADJ,WAAP;AAEH;AAxBQ,OADP;AA2BNZ,MAAAA,YAAY,EAAE;AACVM,QAAAA,IAAI,EAAE,KADI;AAEVC,QAAAA,OAAO,EAAE,cAFC;AAGVkB,QAAAA,SAAS,EAAE,CAAC,aAAD,CAHD;AAIVC,QAAAA,QAAQ,EAAE,IAJA;AAKVlB,QAAAA,MALU,kBAKHC,CALG,EAKA;AAAA;;AACN,cAAI,CAACA,CAAL,EAAQ;AACR,eAAKvB,IAAL,CAAUmB,WAAV,CAAsBK,IAAtB,CAA2BG,OAA3B,CAAmC,UAAAc,CAAC,EAAI;AACpClB,YAAAA,CAAC,CAACI,OAAF,CAAU,UAAAC,IAAI,EAAI;AACd,kBAAIA,IAAI,CAAC,EAAD,CAAJ,KAAaa,CAAjB,EAAoB;AAChB,gBAAA,KAAI,CAACzC,IAAL,CAAUmB,WAAV,CAAsBa,OAAtB,CAA8BL,OAA9B,CAAsC,UAAAe,CAAC,EAAI;AACvC,kBAAA,KAAI,CAAC1C,IAAL,CAAUmB,WAAV,CAAsBnB,IAAtB,CAA2ByC,CAA3B,EAA8BC,CAA9B,EAAiC,GAAjC,IAAwCd,IAAI,CAACc,CAAD,CAA5C;AACH,iBAFD;;AAGA;AACH;AACJ,aAPD;AAQH,WATD;AAUA,iBAAO,IAAP;AACH;AAlBS,OA3BR;AA+CN3B,MAAAA,SAAS,EAAE;AACPK,QAAAA,IAAI,EAAE,KADC;AAEPC,QAAAA,OAAO,EAAE,WAFF;AAGPC,QAAAA,MAAM,EAAE,SAASqB,CAAT,CAAWpB,CAAX,EAAc;AAClB,cAAI,CAACA,CAAL,EAAQ;AACR,cAAMvB,IAAI,GAAG,EAAb;AACA,cAAM4C,OAAO,GAAG,EAAhB;AACA,eAAK5C,IAAL,CAAUmB,WAAV,CAAsBK,IAAtB,CAA2BG,OAA3B,CAAmC,UAAAc,CAAC,EAAI;AACpClB,YAAAA,CAAC,CAACI,OAAF,CAAU,UAAAC,IAAI,EAAI;AACd,kBAAIA,IAAI,CAACiB,OAAL,KAAiBJ,CAArB,EAAwB;AACpBzC,gBAAAA,IAAI,CAACyC,CAAD,CAAJ,qBAAcb,IAAd;AACH;AACJ,aAJD;AAKH,WAND;AAOAL,UAAAA,CAAC,CAACI,OAAF,CAAW,UAAAmB,CAAC,EAAI;AACZ,gBAAI,CAACF,OAAO,CAACE,CAAC,CAACC,MAAH,CAAZ,EACIH,OAAO,CAACE,CAAC,CAACC,MAAH,CAAP,GAAoB,CAACD,CAAC,CAACE,KAAH,CAApB,CADJ,KAEK,IAAI,CAACJ,OAAO,CAACE,CAAC,CAACC,MAAH,CAAP,CAAkBE,QAAlB,CAA2BH,CAAC,CAACE,KAA7B,CAAL,EACGJ,OAAO,CAACE,CAAC,CAACC,MAAH,CAAP,CAAkBhB,IAAlB,CAAuBe,CAAC,CAACE,KAAzB;AACX,WALD,EAXkB,CAiBlB;;AACAE,UAAAA,MAAM,CAACC,IAAP,CAAYP,OAAZ,EAAqBjB,OAArB,CAA8B,UAAAyB,CAAC,EAAI;AAC/BR,YAAAA,OAAO,CAACQ,CAAD,CAAP,GAAaR,OAAO,CAACQ,CAAD,CAAP,CAAWC,IAAX,EAAb;;AACA,gBAAIT,OAAO,CAACQ,CAAD,CAAP,CAAWE,OAAX,CAAmB,SAAnB,IAAgC,CAApC,EAAuC;AACnCV,cAAAA,OAAO,CAACQ,CAAD,CAAP,CAAWhB,MAAX,CAAkBQ,OAAO,CAACQ,CAAD,CAAP,CAAWE,OAAX,CAAmB,SAAnB,CAAlB,EAAiD,CAAjD;AACAV,cAAAA,OAAO,CAACQ,CAAD,CAAP,CAAWrB,IAAX,CAAgB,WAAWqB,CAA3B;AACH;AACJ,WAND;AAOAR,UAAAA,OAAO,CAAC,OAAD,CAAP,GAAmB,CAAC,cAAD,CAAnB;AACA,eAAK5C,IAAL,CAAU4C,OAAV,GAAoBA,OAApB;AACA,eAAK5C,IAAL,CAAUuD,cAAV,GAA2BC,sBAAsB,CAACZ,OAAD,CAAjD;AACA,iBAAO5C,IAAP;AACH;AAhCM,OA/CL;AAiFNgB,MAAAA,WAAW,EAAE;AACTI,QAAAA,IAAI,EAAE,QADG;AAETC,QAAAA,OAAO,EAAE,aAFA;AAGTkB,QAAAA,SAAS,EAAE,CAAC,aAAD,CAHF;AAITC,QAAAA,QAAQ,EAAE,IAJD;AAKTlB,QAAAA,MALS,kBAKFC,CALE,EAKC;AACN,cAAI,CAACA,CAAL,EAAQ;AACRA,UAAAA,CAAC,CAACkC,KAAF,GAAU,CAAV;;AAFM,iCAGuBjF,eAAe,CAAC+C,CAAD,CAHtC;AAAA,cAGCmC,QAHD,oBAGCA,QAHD;AAAA,cAGWC,QAHX,oBAGWA,QAHX;;AAIN,eAAK3D,IAAL,CAAUmB,WAAV,CAAsBK,IAAtB,GAA6BoC,eAAe,CAACD,QAAD,EAAW,KAAK3D,IAAL,CAAUmB,WAAV,CAAsBK,IAAjC,CAA5C;AACA,iBAAOkC,QAAP;AACH;AAXQ,OAjFP;AA8FNzC,MAAAA,WAAW,EAAE;AACTG,QAAAA,IAAI,EAAE,QADG;AAETC,QAAAA,OAAO,EAAE,aAFA;AAGTkB,QAAAA,SAAS,EAAE,CAAC,aAAD,CAHF;AAITC,QAAAA,QAAQ,EAAE,IAJD;AAKTlB,QAAAA,MALS,kBAKFC,CALE,EAKC;AACN,cAAI,CAACA,CAAL,EAAQ;AACRA,UAAAA,CAAC,CAACkC,KAAF,GAAU,CAAV;;AAFM,kCAGuBjF,eAAe,CAAC+C,CAAD,CAHtC;AAAA,cAGCmC,QAHD,qBAGCA,QAHD;AAAA,cAGWC,QAHX,qBAGWA,QAHX;;AAIN,eAAK3D,IAAL,CAAUmB,WAAV,CAAsBa,OAAtB,GAAgC4B,eAAe,CAACD,QAAD,EAAW,KAAK3D,IAAL,CAAUmB,WAAV,CAAsBa,OAAjC,CAA/C;AACA,iBAAO0B,QAAP;AACH;AAXQ;AA9FP,KAnCsB;AA+IhCG,IAAAA,KA/IgC,mBA+IxB;AACJC,MAAAA,UAAU,CAAC,IAAD,CAAV;AACA9E,MAAAA,oBAAoB,CAACP,YAAY,CAAC,IAAD,CAAb,EAAqBC,SAArB,CAApB;AACA,UAAI,KAAKsB,IAAL,CAAUgB,WAAd,EAA2B+C,YAAY,CAAC,IAAD,CAAZ;AAC3B,UAAI,KAAK/D,IAAL,CAAUiB,WAAd,EAA2B+C,YAAY,CAAC,IAAD,CAAZ;AAC3B,UAAI,KAAKhE,IAAL,CAAUmB,WAAV,CAAsBK,IAAtB,CAA2Ba,MAA3B,GAAoC,GAAxC,EAA6C,KAAKrC,IAAL,CAAUC,MAAV,CAAiBK,KAAjB,GAAyB,EAAzB,CAA7C,KACK,IAAI,KAAKN,IAAL,CAAUmB,WAAV,CAAsBK,IAAtB,CAA2Ba,MAA3B,GAAoC,EAAxC,EAA4C,KAAKrC,IAAL,CAAUC,MAAV,CAAiBK,KAAjB,GAAyB,EAAzB;AACpD;AAtJ+B,GAAf,CAFT;AAAA,MAEL2D,UAFK,mBAELA,UAFK;;AA0JZ,SAAOA,UAAP;AACH;AAED;AACA;AACA;AACA;AACA;AACA;;;AAEA,SAAST,sBAAT,CAAgCZ,OAAhC,EAA8C;AAC1C,MAAMsB,QAAQ,GAAG,EAAjB;AACA,MAAIC,CAAC,GAAG,GAAR;AACA,MAAMC,KAAK,GAAG9F,IAAI,CAAC+F,KAAL,CAAWD,KAAzB;AACAlB,EAAAA,MAAM,CAACC,IAAP,CAAYP,OAAZ,EAAqBjB,OAArB,CAA6B,UAAAyB,CAAC,EAAI;AAC9Bc,IAAAA,QAAQ,CAACd,CAAD,CAAR,GAAc,EAAd;AACA,QAAMkB,SAAS,GAAGF,KAAK,CAACG,GAAN,CAAUJ,CAAV,EAAa,EAAb,EAAiB,EAAjB,CAAlB;AACA,QAAMK,WAAW,GAAG,EAApB;;AACA,QAAI5B,OAAO,CAACQ,CAAD,CAAP,CAAWf,MAAX,IAAqB,CAAzB,EAA4B;AACxBO,MAAAA,OAAO,CAACQ,CAAD,CAAP,CAAWzB,OAAX,CAAmB,UAAC8C,KAAD,EAAQC,CAAR,EAAc;AAC7BR,QAAAA,QAAQ,CAACd,CAAD,CAAR,CAAYqB,KAAZ,IAAqBH,SAAS,CAACK,MAAV,CAAiB,MAAMD,CAAC,GAAG,CAAV,CAAjB,EAA+BE,MAApD;AACH,OAFD;AAGAT,MAAAA,CAAC,GAAGA,CAAC,GAAGU,IAAI,CAACC,IAAL,CAAUlC,OAAO,CAACQ,CAAD,CAAP,CAAWf,MAAX,GAAoB,CAA9B,IAAmCmC,WAA3C;AACH,KALD,MAKO;AACH5B,MAAAA,OAAO,CAACQ,CAAD,CAAP,CAAWzB,OAAX,CAAmB,UAAC8C,KAAD,EAAQC,CAAR,EAAc;AAC7BR,QAAAA,QAAQ,CAACd,CAAD,CAAR,CAAYqB,KAAZ,IAAqBH,SAAS,CAACS,QAAV,CAAmBF,IAAI,CAACC,IAAL,CAAUJ,CAAC,GAAG,CAAd,IAAmBF,WAAtC,EACQG,MADR,CACe,MAAMD,CAAC,GAAG,CAAV,CADf,EAC6BE,MADlD;AAEH,OAHD;AAIAT,MAAAA,CAAC,GAAGA,CAAC,GAAGU,IAAI,CAACC,IAAL,CAAUlC,OAAO,CAACQ,CAAD,CAAP,CAAWf,MAAX,GAAoB,CAA9B,IAAmCmC,WAA3C;AACH;AACJ,GAhBD;AAiBA,MAAMQ,OAAO,GAAG;AAACC,IAAAA,YAAY,EAAEb,KAAK,CAACc,GAAN,CAAU,GAAV,EAAe,GAAf,EAAoB,GAApB,EAAyBN;AAAxC,GAAhB;AACAV,EAAAA,QAAQ,CAAC,OAAD,CAAR,GAAoBc,OAApB;AACA,SAAOd,QAAP;AACH;;AAED,SAASH,YAAT,CAAsBoB,CAAtB,EAAyB;AACrBA,EAAAA,CAAC,CAACnF,IAAF,CAAOC,MAAP,CAAcM,OAAd,CAAsBE,SAAtB,GAAkC0E,CAAC,CAACnF,IAAF,CAAOC,MAAP,CAAcM,OAAd,CAAsBC,UAAtB,GAAmC2E,CAAC,CAACnF,IAAF,CAAOgB,WAAP,CAAmBoE,MAAxF;AACH;;AAED,SAASpB,YAAT,CAAsBmB,CAAtB,EAAyB;AACrBA,EAAAA,CAAC,CAACnF,IAAF,CAAOC,MAAP,CAAcW,OAAd,CAAsBH,SAAtB,GAAkC0E,CAAC,CAACnF,IAAF,CAAOC,MAAP,CAAcM,OAAd,CAAsBC,UAAtB,GAAmC2E,CAAC,CAACnF,IAAF,CAAOiB,WAAP,CAAmBmE,MAAxF;AACH;;AAED,SAAStB,UAAT,CAAoBqB,CAApB,EAAuB;AACnBA,EAAAA,CAAC,CAACnF,IAAF,CAAOC,MAAP,CAAcE,QAAd,GAAyBgF,CAAC,CAACnF,IAAF,CAAOmB,WAAP,CAAmBmB,KAAnB,CAAyBb,GAAlD;AACA0D,EAAAA,CAAC,CAACnF,IAAF,CAAOC,MAAP,CAAcG,QAAd,GAAyB+E,CAAC,CAACnF,IAAF,CAAOmB,WAAP,CAAmBmB,KAAnB,CAAyBZ,GAAlD;AACH,C,CAED;;;AAEA3C,QAAQ,CAACS,WAAD,EAAcC,IAAd,CAAR;AAEA,OAAO,SAAS4F,qBAAT,GAAgC;AACnCtG,EAAAA,QAAQ,CAACS,WAAD,EAAcC,IAAd,CAAR;AACH;;AAED,SAASmE,eAAT,CAAyB0B,OAAzB,EAAkCC,UAAlC,EAAwD;AACpD,MAAMC,SAAS,GAAG,EAAlB;AACAF,EAAAA,OAAO,CAAC3D,OAAR,CAAgB,UAAA8D,IAAI,EAAI;AACpBF,IAAAA,UAAU,CAAC5D,OAAX,CAAmB,UAACJ,CAAD,EAAImD,CAAJ,EAAU;AACzB,UAAMgB,OAAO,GAAGnE,CAAhB;;AACA,UAAIkE,IAAI,CAACE,OAAL,CAAa,UAAb,EAAwB,EAAxB,MAAgCpE,CAAC,CAACoE,OAAF,CAAU,UAAV,EAAqB,EAArB,CAApC,EAA6D;AACzDH,QAAAA,SAAS,CAACzD,IAAV,CAAe2D,OAAf;AACAH,QAAAA,UAAU,CAACnD,MAAX,CAAkBsC,CAAlB,EAAqB,CAArB;AACH;AACJ,KAND;AAOH,GARD;AASA,SAAOc,SAAP;AACH","sourcesContent":["import Oviz from \"crux\";\nimport template from \"./template.bvt\"\nimport { processTreeData } from \"./data\";\nimport { editorConfig, editorRef } from \"./editor\";\nimport { SignedHeatMap } from \"./signed-heatmap\";\nimport { BinaryTree, Gravity } from \"./binary-tree\";\nimport {savedTheme} from \"oviz-common/mem-theme\"\nimport {register} from \"page/visualizers\";\nimport { registerEditorConfig } from \"utils/editor\";\n\n// reigister default color theme\nOviz.use.theme(\"mh-dark\", {\n    extends: \"dark\",\n    colors: {\n        primary: \"#5aae61\",\n        path: \"white\",\n    },\n    schemes: {\n        discreteDataScheme: [\"white\", \"grey\", \"red\"],\n    },\n});\n\nOviz.use.theme(\"mh-light\", {\n    extends: \"light\",\n    colors: {\n        primary: \"#5aae61\",\n        path: \"black\",\n    },\n    schemes: {\n        discreteDataScheme: [\"white\", \"grey\", \"red\"],\n    },\n});\n\nconst MODULE_NAME = 'signed-heatmap'\n\nfunction init() {\n    if (!window.gon || window.gon.module_name !== MODULE_NAME) return;\n    const {visualizer} = Oviz.visualize({\n        el: \"#canvas\",\n        template,\n        theme: savedTheme(\"mh\", \"mh-light\"),\n        components: {SignedHeatMap, BinaryTree},\n        data: {\n            config: {\n                showPAnno: true,\n                rangeMin: 0,\n                rangeMax: 0,\n                isSym: true,\n                gridH: 15,\n                rowTree: {\n                    treeHeight: 200,\n                    depthUnit: 0,\n                    gravity: Gravity.Right,\n                },\n                colTree: {\n                    treeHeight: 100,\n                    depthUnit: 0,\n                    gravity: Gravity.Bottom,\n                },\n            },\n            colors: {\n                \"origin\": \"white\",\n                \"positive range\": \"red\",\n                \"negative range\": \"green\",\n                \"group1\": \"#EC7063\",\n                \"group2\": \"#58D68D\",\n            },\n            heatmapDataP: null,\n            groupData: null,\n            rowTreeData: null,\n            colTreeData: null,\n        },\n        loadData: {\n            heatmapData: {\n                type: \"tsv\",\n                fileKey: \"heatmapData\",\n                loaded(d) {\n                    if (!d) return;\n                    const rows = [];\n                    const data = {};\n                    let [min, max] = [0, 0];\n                    d.forEach(line => {\n                        const rowData = {};\n                        const rowAttr = line[\"\"];\n                        rows.push(rowAttr);\n                        d.columns.forEach(col => {\n                            if (col === \"\") return;\n                            const h = {};\n                            h[\"r\"] = line[col];\n                            if (parseFloat(line[col]) > max) max = line[col];\n                            if (parseFloat(line[col]) < min) min = line[col];\n                            rowData[col] = h;\n                        });\n                        data[rowAttr] = rowData;\n                    });\n                    return {rows, columns: d.columns.splice(1, d.columns.length), data,\n                        range: {min, max}};\n                },\n            },\n            heatmapDataP: {\n                type: \"tsv\",\n                fileKey: \"heatmapDataP\",\n                dependsOn: [\"heatmapData\"],\n                optional: true,\n                loaded(d) {\n                    if (!d) return;\n                    this.data.heatmapData.rows.forEach(r => {\n                        d.forEach(line => {\n                            if (line[\"\"] === r) {\n                                this.data.heatmapData.columns.forEach(c => {\n                                    this.data.heatmapData.data[r][c][\"p\"] = line[c];\n                                });\n                                return;\n                            }\n                        });\n                    });\n                    return null;\n                },\n            },\n            groupData: {\n                type: \"tsv\",\n                fileKey: \"groupData\",\n                loaded: function l(d) {\n                    if (!d) return;\n                    const data = {};\n                    const phylums = {};\n                    this.data.heatmapData.rows.forEach(r => {\n                        d.forEach(line => {\n                            if (line.Species === r) {\n                                data[r] = {...line};\n                            }\n                        });\n                    });\n                    d.forEach( s => {\n                        if (!phylums[s.Phylum])\n                            phylums[s.Phylum] = [s.Genus];\n                        else if (!phylums[s.Phylum].includes(s.Genus))\n                                phylums[s.Phylum].push(s.Genus);\n                    });\n                    // name Unknown to Other [phylum]\n                    Object.keys(phylums).forEach( k => {\n                        phylums[k] = phylums[k].sort();\n                        if (phylums[k].indexOf(\"Unknown\") > 0) {\n                            phylums[k].splice(phylums[k].indexOf(\"Unknown\"), 1);\n                            phylums[k].push(\"Other \" + k);\n                        }\n                    });\n                    phylums[\"Other\"] = [\"Unclassified\"];\n                    this.data.phylums = phylums;\n                    this.data.familyColorMap = initializeFamilyColors(phylums);\n                    return data;\n                },\n            },\n            rowTreeData: {\n                type: \"newick\",\n                fileKey: \"rowTreeData\",\n                dependsOn: ['heatmapData'],\n                optional: true,\n                loaded(d) {\n                    if (!d) return;\n                    d.depth = 0;\n                    const {rootNode, nodeList} = processTreeData(d);\n                    this.data.heatmapData.rows = sortByTreeNodes(nodeList, this.data.heatmapData.rows);\n                    return rootNode;\n                },\n            },\n            colTreeData: {\n                type: \"newick\",\n                fileKey: \"colTreeData\",\n                dependsOn: ['heatmapData'],\n                optional: true,\n                loaded(d) {\n                    if (!d) return;\n                    d.depth = 0;\n                    const {rootNode, nodeList} = processTreeData(d);\n                    this.data.heatmapData.columns = sortByTreeNodes(nodeList, this.data.heatmapData.columns);\n                    return rootNode;\n                },\n            },\n        },\n        setup() {\n            setUpRange(this);\n            registerEditorConfig(editorConfig(this), editorRef);\n            if (this.data.rowTreeData) setUpRowTree(this);\n            if (this.data.colTreeData) setUpColTree(this);\n            if (this.data.heatmapData.rows.length > 100) this.data.config.gridH = 10;\n            else if (this.data.heatmapData.rows.length > 60) this.data.config.gridH = 12;\n        }\n    });\n    return visualizer;\n}\n\n/*\n* Control group species have negative correlation\n* Gout group species have positive correlation\n*/\n// let nodeSeq = 0;\n// let treeHeight = 0;\n\nfunction initializeFamilyColors(phylums): any {\n    const colorMap = {};\n    let j = 200;\n    const Color = Oviz.color.Color;\n    Object.keys(phylums).forEach(k => {\n        colorMap[k] = {};\n        const initColor = Color.hsl(j, 75, 80);\n        const hueInterval = 20;\n        if (phylums[k].length <= 5) {\n            phylums[k].forEach((genus, i) => {\n                colorMap[k][genus] = initColor.darken(10 * (i % 5)).string;\n            });\n            j = j + Math.ceil(phylums[k].length / 5) * hueInterval;\n        } else {\n            phylums[k].forEach((genus, i) => {\n                colorMap[k][genus] = initColor.shiftHue(Math.ceil(i / 5) * hueInterval)\n                                            .darken(10 * (i % 5)).string;\n            });\n            j = j + Math.ceil(phylums[k].length / 5) * hueInterval;\n        }\n    });\n    const unknown = {Unclassified: Color.rgb(200, 200, 200).string};\n    colorMap[\"Other\"] = unknown;\n    return colorMap;\n}\n\nfunction setUpRowTree(v) {\n    v.data.config.rowTree.depthUnit = v.data.config.rowTree.treeHeight / v.data.rowTreeData.height;\n}\n\nfunction setUpColTree(v) {\n    v.data.config.colTree.depthUnit = v.data.config.rowTree.treeHeight / v.data.colTreeData.height;\n}\n\nfunction setUpRange(v) {\n    v.data.config.rangeMin = v.data.heatmapData.range.min;\n    v.data.config.rangeMax = v.data.heatmapData.range.max;\n}\n\n// export default SignedHeatmap;\n\nregister(MODULE_NAME, init);\n\nexport function registerSignedHeatmap(){\n    register(MODULE_NAME, init);\n}\n\nfunction sortByTreeNodes(treeArr, heatmapArr ):string[] {\n    const sortedArr = [];\n    treeArr.forEach(node => {\n        heatmapArr.forEach((d, i) => {\n            const sortedD = d;\n            if (node.replace(/[^a-z]/ig,'') === d.replace(/[^a-z]/ig,'')){\n                sortedArr.push(sortedD);\n                heatmapArr.splice(i, 1);\n            }\n        })\n    })\n    return sortedArr;\n}"]},"metadata":{},"sourceType":"module"}