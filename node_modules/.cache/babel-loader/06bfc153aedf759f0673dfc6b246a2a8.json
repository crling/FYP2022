{"ast":null,"code":"function _typeof(obj) { \"@babel/helpers - typeof\"; if (typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; }; } return _typeof(obj); }\n\nfunction _toConsumableArray(arr) { return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _unsupportedIterableToArray(arr) || _nonIterableSpread(); }\n\nfunction _nonIterableSpread() { throw new TypeError(\"Invalid attempt to spread non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\"); }\n\nfunction _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === \"string\") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === \"Object\" && o.constructor) n = o.constructor.name; if (n === \"Map\" || n === \"Set\") return Array.from(o); if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }\n\nfunction _iterableToArray(iter) { if (typeof Symbol !== \"undefined\" && Symbol.iterator in Object(iter)) return Array.from(iter); }\n\nfunction _arrayWithoutHoles(arr) { if (Array.isArray(arr)) return _arrayLikeToArray(arr); }\n\nfunction _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }\n\nfunction _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }\n\nfunction _inherits(subClass, superClass) { if (typeof superClass !== \"function\" && superClass !== null) { throw new TypeError(\"Super expression must either be null or a function\"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }\n\nfunction _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }\n\nfunction _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }\n\nfunction _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === \"object\" || typeof call === \"function\")) { return call; } return _assertThisInitialized(self); }\n\nfunction _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\"); } return self; }\n\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Date.prototype.toString.call(Reflect.construct(Date, [], function () {})); return true; } catch (e) { return false; } }\n\nfunction _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }\n\nimport { tooltip } from \"../utils\";\nimport mouse from \"../utils/mouse\";\nimport { Behavior } from \"./behavior\";\n\nvar Drag = /*#__PURE__*/function (_Behavior) {\n  _inherits(Drag, _Behavior);\n\n  var _super = _createSuper(Drag);\n\n  function Drag() {\n    var _this;\n\n    _classCallCheck(this, Drag);\n\n    _this = _super.apply(this, arguments);\n    _this.factor = 1;\n    _this.deltaX = 0;\n    _this.deltaY = 0;\n    _this.isMoving = false;\n    _this.mousePos = [0, 0];\n    _this.events = [\"mousedown\", \"mouseup\"];\n    return _this;\n  }\n\n  _createClass(Drag, [{\n    key: \"init\",\n    value: function init(op) {\n      var _this2 = this;\n\n      this.direction = op.direction || \"xy\";\n      this.el.setProp({\n        cursor: \"grab\"\n      });\n\n      if (this.direction === \"polar\" && !op.origin) {\n        throw Error(\"Drag: origin expected\");\n      }\n\n      if (this.direction === \"native\" && !op.updateDelta) throw Error(\"Drag: native updateDelta expected\"); // if (!!op.isSvg) this.isSvg = op.isSvg;\n      // else {\n      //     const canvas = document.getElementById(op.canvasId || \"canvas\") as HTMLElement;\n      //     if (canvas.children[0] instanceof HTMLCanvasElement)\n      //         this.isSvg = false;\n      //     else this.isSvg = true;\n      // }\n\n      this.deltaX = this.deltaY = 0;\n      this.origin = op.origin;\n      this.handler = op.onDrag;\n      this.startHandler = op.onDragStart;\n      this.endHandler = op.onDragEnd;\n      this.validRangeX = op.validRangeX;\n      this.validRangeY = op.validRangeY;\n      this.debug = op.debug || false;\n\n      this._bodyMoveListener = function (e) {\n        return _this2.mousemove(e);\n      };\n\n      this._bodyUpListener = function (e) {\n        return _this2.mouseup(e);\n      };\n\n      if (op.canvasId) this.canvasDiv = document.getElementById(op.canvasId);\n    }\n  }, {\n    key: \"updateProps\",\n    value: function updateProps(op) {// not implemented\n    }\n  }, {\n    key: \"mousedown\",\n    value: function mousedown(ev) {\n      var _this3 = this;\n\n      if (this.debug) {\n        console.log(\"drag start\");\n        console.log(\"origin: \".concat(this.origin));\n      }\n\n      this.isMoving = true;\n      ev.stopPropagation();\n      ev.preventDefault(); // if (this.isSvg && this.el.$parent) {\n\n      if (this.el.$parent) {\n        this.mousePos = mouse(this.el.$parent, ev);\n      } else {\n        this.mousePos = [ev.offsetX, ev.offsetY];\n      }\n\n      if (this.canvasDiv) this.canvasDiv.addEventListener(\"mousemove\", this._bodyMoveListener);else document.body.addEventListener(\"mousemove\", this._bodyMoveListener);\n      this.el.$v.transaction(function () {\n        var _a;\n\n        (_a = _this3.startHandler) === null || _a === void 0 ? void 0 : _a.call(_this3.el, ev, _this3.el, _this3.mousePos);\n      });\n      tooltip.disable();\n    }\n  }, {\n    key: \"getPolarPos\",\n    value: function getPolarPos(mousePos) {\n      // @ts-ignore\n      mousePos[0] = mousePos[0] - this.origin[0]; // @ts-ignore\n\n      mousePos[1] = mousePos[1] - this.origin[1];\n      return mousePos;\n    }\n  }, {\n    key: \"mousemove\",\n    value: function mousemove(ev) {\n      var _this4 = this;\n\n      if (!this.isMoving) return;\n      var m; // if (this.isSvg && this.el.$parent) {\n\n      if (this.el.$parent) {\n        m = mouse(this.el.$parent, ev);\n        if (!!this.validRangeX) if (m[0] > this.validRangeX[1] || m[0] < this.validRangeX[0]) {\n          this.mouseup(ev);\n          return;\n        }\n        if (!!this.validRangeY) if (m[1] > this.validRangeY[1] || m[1] < this.validRangeY[0]) {\n          this.mouseup(ev);\n          return;\n        }\n      } else {\n        m = [ev.offsetX, ev.offsetY];\n      }\n\n      document.body.addEventListener(\"mouseup\", this._bodyUpListener);\n\n      switch (this.direction) {\n        case \"x\":\n          this.deltaX = m[0] - this.mousePos[0];\n          break;\n\n        case \"y\":\n          this.deltaY = m[1] - this.mousePos[1];\n          break;\n\n        case \"xy\":\n          this.deltaX = m[0] - this.mousePos[0];\n          this.deltaY = m[1] - this.mousePos[1];\n          break;\n\n        case \"native\":\n          // @ts-ignore\n          var result = this.updateDelta(m, this.mousePos);\n          this.deltaX = result[0];\n          this.deltaY = result[1];\n          break;\n      }\n\n      this.mousePos = m;\n      this.el.$v.transaction(function () {\n        if (_this4.direction === \"polar\") {\n          _this4.handler.call(_this4.el, ev, _this4.el, [_this4.deltaX, _this4.deltaY], [_this4.getAngle.apply(_this4, _toConsumableArray(_this4.getPolarPos(_this4.mousePos))), 0]);\n        } else {\n          _this4.handler.call(_this4.el, ev, _this4.el, [_this4.deltaX, _this4.deltaY], _this4.mousePos);\n        }\n      });\n    }\n  }, {\n    key: \"getAngle\",\n    value: function getAngle(a, b) {\n      var c = Math.sqrt(Math.pow(a, 2) + Math.pow(b, 2));\n      return Math.asin(b / c);\n    }\n  }, {\n    key: \"mouseup\",\n    value: function mouseup(ev) {\n      var _this5 = this;\n\n      if (this.isMoving) {\n        this.isMoving = false;\n        tooltip.enable();\n        this.el.$v.transaction(function () {\n          var _a;\n\n          (_a = _this5.endHandler) === null || _a === void 0 ? void 0 : _a.call(_this5.el, ev, _this5.el, _this5.mousePos);\n        });\n        if (this.debug) console.log(\"drag end\");\n      } else if (this.debug) {\n        console.log(\"drag already ended\");\n      }\n    }\n  }]);\n\n  return Drag;\n}(Behavior);\n\nexport { Drag as default };","map":null,"metadata":{},"sourceType":"module"}