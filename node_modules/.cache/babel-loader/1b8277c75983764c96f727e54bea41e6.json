{"ast":null,"code":"function ownKeys(object, enumerableOnly) {\n  var keys = Object.keys(object);\n\n  if (Object.getOwnPropertySymbols) {\n    var symbols = Object.getOwnPropertySymbols(object);\n    if (enumerableOnly) symbols = symbols.filter(function (sym) {\n      return Object.getOwnPropertyDescriptor(object, sym).enumerable;\n    });\n    keys.push.apply(keys, symbols);\n  }\n\n  return keys;\n}\n\nfunction _objectSpread(target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = arguments[i] != null ? arguments[i] : {};\n\n    if (i % 2) {\n      ownKeys(Object(source), true).forEach(function (key) {\n        _defineProperty(target, key, source[key]);\n      });\n    } else if (Object.getOwnPropertyDescriptors) {\n      Object.defineProperties(target, Object.getOwnPropertyDescriptors(source));\n    } else {\n      ownKeys(Object(source)).forEach(function (key) {\n        Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));\n      });\n    }\n  }\n\n  return target;\n}\n\nfunction _defineProperty(obj, key, value) {\n  if (key in obj) {\n    Object.defineProperty(obj, key, {\n      value: value,\n      enumerable: true,\n      configurable: true,\n      writable: true\n    });\n  } else {\n    obj[key] = value;\n  }\n\n  return obj;\n}\n\nimport { mergeData } from 'vue-functional-data-merge';\nimport Vue from '../../utils/vue';\nimport { arrayIncludes } from '../../utils/array';\nimport { getComponentConfig } from '../../utils/config';\nimport { isTag } from '../../utils/dom';\nimport { omit } from '../../utils/object';\nimport { pluckProps } from '../../utils/props';\nimport { isLink } from '../../utils/router';\nimport { BLink, props as BLinkProps } from '../link/link'; // --- Constants ---\n\nvar NAME = 'BListGroupItem';\nvar actionTags = ['a', 'router-link', 'button', 'b-link']; // --- Props ---\n\nvar linkProps = omit(BLinkProps, ['event', 'routerTag']);\ndelete linkProps.href[\"default\"];\ndelete linkProps.to[\"default\"];\nexport var props = _objectSpread({\n  tag: {\n    type: String,\n    \"default\": 'div'\n  },\n  action: {\n    type: Boolean,\n    \"default\": null\n  },\n  button: {\n    type: Boolean,\n    \"default\": null\n  },\n  variant: {\n    type: String,\n    \"default\": function _default() {\n      return getComponentConfig(NAME, 'variant');\n    }\n  }\n}, linkProps); // --- Main component ---\n// @vue/component\n\nexport var BListGroupItem = /*#__PURE__*/Vue.extend({\n  name: NAME,\n  functional: true,\n  props: props,\n  render: function render(h, _ref) {\n    var _class;\n\n    var props = _ref.props,\n        data = _ref.data,\n        children = _ref.children;\n    var button = props.button,\n        variant = props.variant,\n        active = props.active,\n        disabled = props.disabled;\n    var link = isLink(props);\n    var tag = button ? 'button' : !link ? props.tag : BLink;\n    var action = !!(props.action || link || button || arrayIncludes(actionTags, props.tag));\n    var attrs = {};\n    var itemProps = {};\n\n    if (isTag(tag, 'button')) {\n      if (!data.attrs || !data.attrs.type) {\n        // Add a type for button is one not provided in passed attributes\n        attrs.type = 'button';\n      }\n\n      if (props.disabled) {\n        // Set disabled attribute if button and disabled\n        attrs.disabled = true;\n      }\n    } else {\n      itemProps = pluckProps(linkProps, props);\n    }\n\n    return h(tag, mergeData(data, {\n      attrs: attrs,\n      props: itemProps,\n      staticClass: 'list-group-item',\n      \"class\": (_class = {}, _defineProperty(_class, \"list-group-item-\".concat(variant), variant), _defineProperty(_class, 'list-group-item-action', action), _defineProperty(_class, \"active\", active), _defineProperty(_class, \"disabled\", disabled), _class)\n    }), children);\n  }\n});","map":null,"metadata":{},"sourceType":"module"}