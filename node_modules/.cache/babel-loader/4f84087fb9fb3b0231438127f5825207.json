{"ast":null,"code":"import Oviz from \"crux\";\nimport template from \"./template.bvt\";\nimport { groupedChartColors } from \"oviz-common/palette\";\nimport { ComplexBoxplot, processBoxData } from \"oviz-components/complex-boxplot\";\nimport { EditText } from \"oviz-components/edit-text\";\nimport { register } from \"page/visualizers\";\nimport { getGroups } from \"utils/array\";\nimport { rankDict, sortByRank } from \"utils/bio-info\";\nimport { registerEditorConfig } from \"utils/editor\";\nimport { GridPlot } from \"../../oviz-components/grid-plot\";\nimport { editorConfig, editorRef } from \"./editor\"; // please change the displayed value range in the template by the prop: valueRange.\n\nvar MODULE_NAME = \"boxplot-single\";\n\nfunction init() {\n  if (!window.gon || window.gon.module_name !== MODULE_NAME) return;\n\n  var _Oviz$visualize = Oviz.visualize({\n    el: \"#canvas\",\n    template: template,\n    data: {\n      config: {\n        yLabel: \"Alpha Diversity\",\n        rankIndex: 0,\n        plotSize: [300, 300],\n        showOutliers: true,\n        drawP: true,\n        drawViolin: false,\n        drawScatter: true,\n        hollowBox: true,\n        xAxisRotated: true,\n        labelFontSize: 12,\n        labelOffsetVer: 30,\n        tickFontSize: 12,\n        getColor: function getColor(pos) {\n          return groupedChartColors[0];\n        }\n      },\n      colors: {\n        box: groupedChartColors[0],\n        scatter: \"pink\",\n        violin: \"LightSteelBlue\"\n      }\n    },\n    components: {\n      GridPlot: GridPlot,\n      ComplexBoxplot: ComplexBoxplot,\n      EditText: EditText\n    },\n    loadData: {\n      boxSingleMain: {\n        fileKey: \"boxSingleMain\",\n        type: \"tsv\",\n        dependsOn: [\"boxSingleGroup\"],\n        dsvHasHeader: true,\n        loaded: function loaded(data) {\n          var _this = this;\n\n          var samples = data.columns.slice(1);\n          var rankKey = data.columns[0];\n          this.data.ranks = [];\n          this.data.mainDict = {};\n          data.forEach(function (d) {\n            var rankLabel = rankDict[d[rankKey]];\n\n            _this.data.ranks.push(rankLabel);\n\n            var allValues = [];\n\n            var values = _this.data.categories.map(function (x) {\n              return [];\n            });\n\n            samples.forEach(function (s) {\n              var v = parseFloat(d[s]);\n              if (!isNaN(v)) allValues.push(v);\n\n              var catIndex = _this.data.categories.indexOf(_this.data.groupDict[s]);\n\n              values[catIndex].push(v);\n            });\n            var boxData = processBoxData(values, _this.data.categories);\n            _this.data.mainDict[rankLabel] = boxData;\n          });\n          this.data.ranks = this.data.ranks.sort(function (a, b) {\n            return sortByRank(a, b);\n          });\n          this.data.rank = this.data.ranks[3] || this.data.ranks[this.data.ranks.length - 1];\n          this.data.data = this.data.mainDict[this.data.rank];\n          this.data.ranks = this.data.ranks.map(function (x) {\n            return {\n              value: x,\n              text: x\n            };\n          });\n          return null;\n        }\n      },\n      boxSingleGroup: {\n        fileKey: \"boxSingleGroup\",\n        type: \"tsv\",\n        dsvHasHeader: true,\n        loaded: function loaded(data) {\n          var _this2 = this;\n\n          this.data.groupDict = {};\n          this.data.categories = getGroups(data, data.columns[1]);\n          data.forEach(function (d) {\n            _this2.data.groupDict[d[data.columns[0]]] = d[data.columns[1]];\n          });\n          return null;\n        }\n      },\n      boxSingleP: {\n        fileKey: \"boxSingleP\",\n        type: \"tsv\",\n        dsvHasHeader: true,\n        dependsOn: [\"boxSingleMain\"],\n        loaded: function loaded(data) {\n          var _this3 = this;\n\n          this.data.pDict = {};\n          data.forEach(function (d) {\n            var rankLabel = rankDict[d[data.columns[0]]];\n            var p = parseFloat(d[data.columns[1]]);\n\n            if (!isNaN(p)) {\n              _this3.data.pDict[rankLabel] = [{\n                source: _this3.data.categories[0],\n                target: _this3.data.categories[1],\n                pValue: p,\n                sourcePos: 0,\n                targetPos: 1\n              }];\n            }\n          });\n          this.data.pValue = this.data.pDict[this.data.rank];\n        }\n      }\n    },\n    setup: function setup() {\n      console.log(this[\"_data\"]);\n      registerEditorConfig(editorConfig(this), editorRef);\n    }\n  }),\n      visualizer = _Oviz$visualize.visualizer;\n\n  return visualizer;\n}\n\nregister(MODULE_NAME, init);\nexport function registerBoxplotSingle() {\n  register(MODULE_NAME, init);\n}","map":{"version":3,"sources":["/Users/wangzhenyu/Desktop/fyp_workspace/meta_platform/app/javascript/viz/boxplot-single/index.ts"],"names":["Oviz","template","groupedChartColors","ComplexBoxplot","processBoxData","EditText","register","getGroups","rankDict","sortByRank","registerEditorConfig","GridPlot","editorConfig","editorRef","MODULE_NAME","init","window","gon","module_name","visualize","el","data","config","yLabel","rankIndex","plotSize","showOutliers","drawP","drawViolin","drawScatter","hollowBox","xAxisRotated","labelFontSize","labelOffsetVer","tickFontSize","getColor","pos","colors","box","scatter","violin","components","loadData","boxSingleMain","fileKey","type","dependsOn","dsvHasHeader","loaded","samples","columns","slice","rankKey","ranks","mainDict","forEach","d","rankLabel","push","allValues","values","categories","map","x","s","v","parseFloat","isNaN","catIndex","indexOf","groupDict","boxData","sort","a","b","rank","length","value","text","boxSingleGroup","boxSingleP","pDict","p","source","target","pValue","sourcePos","targetPos","setup","console","log","visualizer","registerBoxplotSingle"],"mappings":"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","sourcesContent":["import Oviz from \"crux\";\nimport template from \"./template.bvt\";\n\nimport { groupedChartColors } from \"oviz-common/palette\";\nimport { ComplexBoxplot, processBoxData } from \"oviz-components/complex-boxplot\";\nimport { EditText } from \"oviz-components/edit-text\";\nimport { register } from \"page/visualizers\";\nimport { getGroups } from \"utils/array\";\nimport { rankDict, sortByRank } from \"utils/bio-info\";\nimport { registerEditorConfig } from \"utils/editor\";\nimport { GridPlot } from \"../../oviz-components/grid-plot\";\nimport { editorConfig, editorRef } from \"./editor\";\n\n// please change the displayed value range in the template by the prop: valueRange.\nconst MODULE_NAME = \"boxplot-single\";\n\nfunction init() {\n    if (!window.gon || window.gon.module_name !== MODULE_NAME) return;\n\n    const {visualizer} = Oviz.visualize({\n        el: \"#canvas\",\n        template,\n        data: {\n            config: {\n                yLabel: \"Alpha Diversity\",\n                rankIndex: 0,\n                plotSize: [300, 300],\n                showOutliers: true,\n                drawP: true,\n                drawViolin: false,\n                drawScatter: true,\n                hollowBox: true,\n                xAxisRotated: true,\n                labelFontSize: 12,\n                labelOffsetVer: 30,\n                tickFontSize: 12,\n                getColor(pos) {\n                    return groupedChartColors[0];\n                },\n            },\n            colors: { box: groupedChartColors[0], scatter: \"pink\",\n                violin: \"LightSteelBlue\"},\n        },\n        components: { GridPlot, ComplexBoxplot, EditText},\n        loadData: {\n            boxSingleMain: {\n                fileKey: \"boxSingleMain\",\n                type: \"tsv\",\n                dependsOn: [\"boxSingleGroup\"],\n                dsvHasHeader: true,\n                loaded(data) {\n                    const samples = data.columns.slice(1);\n                    const rankKey = data.columns[0];\n                    this.data.ranks = [];\n                    this.data.mainDict = {};\n                    data.forEach(d => {\n                        const rankLabel = rankDict[d[rankKey]];\n                        this.data.ranks.push(rankLabel);\n                        const allValues = [];\n                        const values = this.data.categories.map(x => []);\n                        samples.forEach(s => {\n                            const v = parseFloat(d[s]);\n                            if (!isNaN(v)) allValues.push(v);\n                            const catIndex = this.data.categories.indexOf(this.data.groupDict[s]);\n                            values[catIndex].push(v);\n                        });\n                        const boxData = processBoxData(values, this.data.categories);\n                        this.data.mainDict[rankLabel] = boxData;\n                    });\n                    this.data.ranks = this.data.ranks.sort((a, b) => sortByRank(a, b));\n                    this.data.rank = this.data.ranks[3] || this.data.ranks[this.data.ranks.length - 1];\n                    this.data.data = this.data.mainDict[this.data.rank];\n                    this.data.ranks = this.data.ranks.map((x) =>  ({value: x, text: x}));\n                    return null;\n                },\n            },\n            boxSingleGroup: {\n                fileKey: \"boxSingleGroup\",\n                type: \"tsv\",\n                dsvHasHeader: true,\n                loaded(data) {\n                    this.data.groupDict = {};\n                    this.data.categories = getGroups(data, data.columns[1]);\n                    data.forEach(d => {\n                        this.data.groupDict[d[data.columns[0]]] = d[data.columns[1]];\n                    });\n                    return null;\n                },\n            },\n            boxSingleP: {\n                fileKey: \"boxSingleP\",\n                type: \"tsv\",\n                dsvHasHeader: true,\n                dependsOn: [\"boxSingleMain\"],\n                loaded(data) {\n                    this.data.pDict = {};\n                    data.forEach(d => {\n                        const rankLabel = rankDict[d[data.columns[0]]];\n                        const p = parseFloat(d[data.columns[1]]);\n                        if (!isNaN(p)) {\n                            this.data.pDict[rankLabel] = [{source: this.data.categories[0],\n                                target: this.data.categories[1],\n                                pValue: p,\n                                sourcePos: 0, targetPos: 1,\n                            }];\n                        }\n                    });\n                    this.data.pValue = this.data.pDict[this.data.rank];\n                },\n            },\n        },\n        setup() {\n            console.log(this[\"_data\"]);\n            registerEditorConfig(editorConfig(this), editorRef);\n        },\n    });\n\n    return visualizer;\n}\n\nregister(MODULE_NAME, init);\n\nexport function registerBoxplotSingle() {\n    register(MODULE_NAME, init);\n}\n"]},"metadata":{},"sourceType":"module"}