{"ast":null,"code":"import Vue from '../../utils/vue';\nimport { htmlOrText } from '../../utils/html';\nimport { pluckProps } from '../../utils/props';\nimport dropdownMixin from '../../mixins/dropdown';\nimport idMixin from '../../mixins/id';\nimport normalizeSlotMixin from '../../mixins/normalize-slot';\nimport { props as BDropdownProps } from '../dropdown/dropdown';\nimport { BLink } from '../link/link'; // --- Props ---\n\nexport var props = pluckProps(['text', 'html', 'menuClass', 'toggleClass', 'noCaret', 'role', 'lazy'], BDropdownProps); // --- Main component ---\n// @vue/component\n\nexport var BNavItemDropdown = /*#__PURE__*/Vue.extend({\n  name: 'BNavItemDropdown',\n  mixins: [idMixin, dropdownMixin, normalizeSlotMixin],\n  props: props,\n  computed: {\n    toggleId: function toggleId() {\n      return this.safeId('_BV_toggle_');\n    },\n    isNav: function isNav() {\n      // Signal to dropdown mixin that we are in a navbar\n      return true;\n    },\n    dropdownClasses: function dropdownClasses() {\n      return [this.directionClass, {\n        show: this.visible\n      }];\n    },\n    menuClasses: function menuClasses() {\n      return [this.menuClass, {\n        'dropdown-menu-right': this.right,\n        show: this.visible\n      }];\n    },\n    toggleClasses: function toggleClasses() {\n      return [this.toggleClass, {\n        'dropdown-toggle-no-caret': this.noCaret\n      }];\n    }\n  },\n  render: function render(h) {\n    var toggleId = this.toggleId,\n        visible = this.visible;\n    var $toggle = h(BLink, {\n      staticClass: 'nav-link dropdown-toggle',\n      \"class\": this.toggleClasses,\n      props: {\n        href: \"#\".concat(this.id || ''),\n        disabled: this.disabled\n      },\n      attrs: {\n        id: toggleId,\n        role: 'button',\n        'aria-haspopup': 'true',\n        'aria-expanded': visible ? 'true' : 'false'\n      },\n      on: {\n        mousedown: this.onMousedown,\n        click: this.toggle,\n        keydown: this.toggle // Handle ENTER, SPACE and DOWN\n\n      },\n      ref: 'toggle'\n    }, [// TODO: The `text` slot is deprecated in favor of the `button-content` slot\n    this.normalizeSlot(['button-content', 'text']) || h('span', {\n      domProps: htmlOrText(this.html, this.text)\n    })]);\n    var $menu = h('ul', {\n      staticClass: 'dropdown-menu',\n      \"class\": this.menuClasses,\n      attrs: {\n        tabindex: '-1',\n        'aria-labelledby': toggleId\n      },\n      on: {\n        keydown: this.onKeydown // Handle UP, DOWN and ESC\n\n      },\n      ref: 'menu'\n    }, !this.lazy || visible ? this.normalizeSlot('default', {\n      hide: this.hide\n    }) : [h()]);\n    return h('li', {\n      staticClass: 'nav-item b-nav-dropdown dropdown',\n      \"class\": this.dropdownClasses,\n      attrs: {\n        id: this.safeId()\n      }\n    }, [$toggle, $menu]);\n  }\n});","map":null,"metadata":{},"sourceType":"module"}