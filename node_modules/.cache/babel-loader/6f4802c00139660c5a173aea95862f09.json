{"ast":null,"code":"import Oviz from \"crux\";\nimport { register } from \"page/visualizers\";\nimport { registerEditorConfig } from \"utils/editor\";\nimport { editorConfig } from \"./editor\";\nimport template from \"./template.bvt\";\nimport { findBoundsForValues } from \"utils/maths\";\nimport { groupedChartColors } from \"oviz-common/palette\";\nimport { rankDict } from \"utils/bio-info\";\nvar ylabel = \"Relative abundance\";\nvar rankLabelIndex = 0;\nvar classifiedIndex = 0;\nvar valueRange = [-8, 2];\nvar title = \"grouped box plot\"; // please change the displayed value range in the template by the prop: valueRange.\n\nvar MODULE_NAME = \"grouped-boxplot\";\n\nfunction init() {\n  if (!window.gon || window.gon.module_name !== MODULE_NAME) return;\n\n  var _Oviz$visualize = Oviz.visualize({\n    el: \"#canvas\",\n    template: template,\n    data: {\n      ylabel: ylabel,\n      title: title,\n      config: {\n        plotWidth: 1000,\n        showOutliers: true,\n        xLabelRotation: 45,\n        rankIndex: 0\n      },\n      colors: groupedChartColors\n    },\n    loadData: {\n      boxplotDataGrouped: {\n        fileKey: \"boxplotDataGrouped\",\n        type: \"tsv\",\n        dsvHasHeader: true,\n        multiple: true,\n        loaded: function loaded(d) {\n          var _this = this;\n\n          // process rank info\n          var rankKeys = Object.keys(rankDict);\n          this.data.ranks = d.map(function (x) {\n            return x.columns[0];\n          }).sort(function (a, b) {\n            return rankKeys.indexOf(a) - rankKeys.indexOf(b);\n          }).map(function (x, i) {\n            return {\n              value: i,\n              text: rankDict[x]\n            };\n          });\n          this.data.boxDict = {};\n          var chosenRank = this.data.ranks[0].text;\n          d.forEach(function (data) {\n            var rankLabel = rankDict[data.columns[0]];\n            var categories = data.columns.slice(1);\n            var classifiedKey = data.columns[classifiedIndex];\n            var classifications = data.map(function (d) {\n              return d[classifiedKey];\n            }).filter(function (item, index, self) {\n              return self.indexOf(item) === index;\n            });\n            var boxData = [{\n              values: [],\n              outliers: [],\n              means: [],\n              categories: categories\n            }, {\n              values: [],\n              outliers: [],\n              means: [],\n              categories: categories\n            }];\n            var allValues = [];\n            categories.forEach(function (arr, i) {\n              var initialData = [[], []];\n              data.forEach(function (d) {\n                allValues.push(parseFloat(d[arr]));\n\n                if (d[classifiedKey] === classifications[0]) {\n                  initialData[0].push(parseFloat(d[arr]));\n                } else {\n                  initialData[1].push(parseFloat(d[arr]));\n                }\n              });\n              classifications.forEach(function (_, j) {\n                var result = [];\n                var stat1 = new Oviz.algo.Statistics(initialData[j]);\n                var interQuartileRange = stat1.Q3() - stat1.Q1();\n                initialData[j].forEach(function (d) {\n                  if (d < stat1.Q3() - 1.5 * interQuartileRange || d > stat1.Q3() + 1.5 * interQuartileRange) {\n                    boxData[j].outliers.push([i, d]);\n                  } else {\n                    result.push(d);\n                  }\n                });\n                var stat2 = new Oviz.algo.Statistics(result);\n                boxData[j].values.push([stat2.min(), stat2.Q1(), stat2.median(), stat2.Q3(), stat2.max()]);\n                boxData[j].means.push(stat2.mean());\n              });\n            });\n            var valueRange = findBoundsForValues(allValues, 2, false, 0.5);\n            _this.data.boxDict[rankLabel] = {\n              boxData: boxData,\n              valueRange: valueRange,\n              categories: categories,\n              classifications: classifications\n            };\n            if (chosenRank === rankLabel) _this.data.boxData = {\n              boxData: boxData,\n              valueRange: valueRange,\n              categories: categories,\n              classifications: classifications\n            };\n          });\n          return null;\n        }\n      }\n    },\n    setup: function setup() {\n      this.data.plotWidth = 1000;\n      registerEditorConfig(editorConfig(this));\n    }\n  }),\n      visualizer = _Oviz$visualize.visualizer;\n\n  return visualizer;\n}\n\nregister(MODULE_NAME, init);","map":{"version":3,"sources":["/Users/wangzhenyu/Desktop/fyp_workspace/meta_platform/app/javascript/viz/grouped-boxplot/index.ts"],"names":["Oviz","register","registerEditorConfig","editorConfig","template","findBoundsForValues","groupedChartColors","rankDict","ylabel","rankLabelIndex","classifiedIndex","valueRange","title","MODULE_NAME","init","window","gon","module_name","visualize","el","data","config","plotWidth","showOutliers","xLabelRotation","rankIndex","colors","loadData","boxplotDataGrouped","fileKey","type","dsvHasHeader","multiple","loaded","d","rankKeys","Object","keys","ranks","map","x","columns","sort","a","b","indexOf","i","value","text","boxDict","chosenRank","forEach","rankLabel","categories","slice","classifiedKey","classifications","filter","item","index","self","boxData","values","outliers","means","allValues","arr","initialData","push","parseFloat","_","j","result","stat1","algo","Statistics","interQuartileRange","Q3","Q1","stat2","min","median","max","mean","setup","visualizer"],"mappings":"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","sourcesContent":["import Oviz from \"crux\";\nimport {register} from \"page/visualizers\";\nimport { registerEditorConfig } from \"utils/editor\";\nimport { editorConfig } from \"./editor\";\nimport template from \"./template.bvt\";\n\nimport { findBoundsForValues } from \"utils/maths\";\n\nimport { groupedChartColors} from \"oviz-common/palette\";\nimport {rankDict} from \"utils/bio-info\";\n\nconst ylabel = \"Relative abundance\";\nconst rankLabelIndex = 0;\nconst classifiedIndex = 0;\nconst valueRange = [-8, 2];\nconst title = \"grouped box plot\";\n\n// please change the displayed value range in the template by the prop: valueRange.\nconst MODULE_NAME = \"grouped-boxplot\";\n\nfunction init() {\n    if (!window.gon || window.gon.module_name !== MODULE_NAME) return;\n\n    const {visualizer} = Oviz.visualize({\n        el: \"#canvas\",\n        template,\n        data: {ylabel, title,\n            config: {\n                plotWidth: 1000,\n                showOutliers: true,\n                xLabelRotation: 45,\n                rankIndex: 0,\n            },\n            colors: groupedChartColors,\n        },\n        loadData: {\n            boxplotDataGrouped: {\n                fileKey: \"boxplotDataGrouped\",\n                type: \"tsv\",\n                dsvHasHeader: true,\n                multiple: true,\n                loaded(d) {\n                    // process rank info\n                    const rankKeys = Object.keys(rankDict);\n                    this.data.ranks = d.map(x => x.columns[0])\n                                    .sort((a, b) => rankKeys.indexOf(a) - rankKeys.indexOf(b))\n                                    .map((x, i) =>  ({value: i, text: rankDict[x]}));\n                    this.data.boxDict = {};\n                    const chosenRank = this.data.ranks[0].text;\n\n                    d.forEach(data => {\n                        const rankLabel = rankDict[data.columns[0]];\n                        const categories = data.columns.slice(1);\n                        const classifiedKey = data.columns[classifiedIndex];\n                        const classifications = data.map(d => (d[classifiedKey])).filter((item, index, self) => {\n                            return self.indexOf(item) === index; });\n                        const boxData = [{values: [], outliers: [], means: [], categories}, {values: [], outliers: [], means: [], categories}];\n                        const allValues = [];\n                        categories.forEach((arr, i) => {\n                            const initialData = [[], []];\n                            data.forEach(d => {\n                                allValues.push(parseFloat(d[arr]));\n                                if (d[classifiedKey] === classifications[0]) {\n                                    initialData[0].push(parseFloat(d[arr]));\n                                } else {\n                                    initialData[1].push(parseFloat(d[arr]));\n                                }\n                            });\n                            classifications.forEach((_, j) => {\n                                const result = [];\n                                const stat1 = new Oviz.algo.Statistics(initialData[j]);\n                                const interQuartileRange = stat1.Q3() - stat1.Q1();\n                                initialData[j].forEach(d => {\n                                    if ((d < stat1.Q3() - 1.5 * interQuartileRange) || (d > stat1.Q3() + 1.5 * interQuartileRange))  {\n                                        boxData[j].outliers.push([i, d]);\n                                    } else {\n                                        result.push(d);\n                                    }\n                                });\n                                const stat2 = new Oviz.algo.Statistics(result);\n                                boxData[j].values.push([stat2.min(), stat2.Q1(), stat2.median(), stat2.Q3(), stat2.max()]);\n                                boxData[j].means.push(stat2.mean());\n                            });\n                        });\n                        const valueRange = findBoundsForValues(allValues, 2, false, 0.5);\n                        this.data.boxDict[rankLabel] = {boxData, valueRange, categories, classifications};\n                        if (chosenRank === rankLabel) this.data.boxData = {boxData, valueRange, categories, classifications};\n                    });\n\n                    return null;\n                },\n            },\n        },\n        setup() {\n            this.data.plotWidth = 1000;\n            registerEditorConfig(editorConfig(this));\n        },\n    });\n    \n    return visualizer;\n}\n\nregister(MODULE_NAME, init);"]},"metadata":{},"sourceType":"module"}