{"ast":null,"code":"function _typeof(obj) { \"@babel/helpers - typeof\"; if (typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; }; } return _typeof(obj); }\n\nfunction _templateObject() {\n  var data = _taggedTemplateLiteral([\"\\n    Component {\\n        Component {\\n            @let n = 0\\n            @let p = _paddings\\n            x = p[3]\\n            y = p[0]\\n            width = @geo(100, -p[1]-p[3])\\n            height = @geo(100, -p[0]-p[2])\\n\\n            @for (row, i) in prop.data {\\n                @let y = _ySize * i\\n                @for (data, j) in row {\\n                    @expr n += 1\\n                    Rect {\\n                        key = n\\n                        x = _xSize * j\\n                        y = y\\n                        width = _xSize\\n                        height = _ySize\\n                        fill = _colorScheme.get(_vScale(data))\\n                        @props prop.rectOptions\\n                    }\\n                }\\n            }\\n        }\\n    }\\n    \"]);\n\n  _templateObject = function _templateObject() {\n    return data;\n  };\n\n  return data;\n}\n\nfunction _taggedTemplateLiteral(strings, raw) { if (!raw) { raw = strings.slice(0); } return Object.freeze(Object.defineProperties(strings, { raw: { value: Object.freeze(raw) } })); }\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }\n\nfunction _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }\n\nfunction _get(target, property, receiver) { if (typeof Reflect !== \"undefined\" && Reflect.get) { _get = Reflect.get; } else { _get = function _get(target, property, receiver) { var base = _superPropBase(target, property); if (!base) return; var desc = Object.getOwnPropertyDescriptor(base, property); if (desc.get) { return desc.get.call(receiver); } return desc.value; }; } return _get(target, property, receiver || target); }\n\nfunction _superPropBase(object, property) { while (!Object.prototype.hasOwnProperty.call(object, property)) { object = _getPrototypeOf(object); if (object === null) break; } return object; }\n\nfunction _inherits(subClass, superClass) { if (typeof superClass !== \"function\" && superClass !== null) { throw new TypeError(\"Super expression must either be null or a function\"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }\n\nfunction _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }\n\nfunction _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }\n\nfunction _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === \"object\" || typeof call === \"function\")) { return call; } return _assertThisInitialized(self); }\n\nfunction _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\"); } return self; }\n\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Date.prototype.toString.call(Reflect.construct(Date, [], function () {})); return true; } catch (e) { return false; } }\n\nfunction _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }\n\nimport * as d3 from \"d3-scale\";\nimport { schemeGradient } from \"../../color\";\nimport { template } from \"../../template/tag\";\nimport { minmax } from \"../../utils/math\";\nimport { Component } from \"../component\";\nimport { getPaddings } from \"./utils/option-padding\";\nexport var HeatMap = /*#__PURE__*/function (_Component) {\n  _inherits(HeatMap, _Component);\n\n  var _super = _createSuper(HeatMap);\n\n  function HeatMap() {\n    var _this;\n\n    _classCallCheck(this, HeatMap);\n\n    _this = _super.apply(this, arguments);\n    _this.render = template(_templateObject());\n    return _this;\n  }\n\n  _createClass(HeatMap, [{\n    key: \"willRender\",\n    value: function willRender() {\n      var p = this._paddings = getPaddings(this);\n      this._xSize = (this.$geometry.width - p[1] - p[3]) / this.prop.data[0].length;\n      this._ySize = (this.$geometry.height - p[0] - p[2]) / this.prop.data.length;\n      var dataRange = this.prop.dataRange || minmax(this.prop.data.flat());\n      this._vScale = d3.scaleLinear().domain(dataRange).range([0, 1]);\n      this._colorScheme = schemeGradient(this.prop.startColor, this.prop.endColor);\n    }\n  }, {\n    key: \"defaultProp\",\n    value: function defaultProp() {\n      return Object.assign(Object.assign({}, _get(_getPrototypeOf(HeatMap.prototype), \"defaultProp\", this).call(this)), {\n        startColor: \"#fff\",\n        endColor: \"#fa0\"\n      });\n    }\n  }]);\n\n  return HeatMap;\n}(Component);","map":null,"metadata":{},"sourceType":"module"}