{"ast":null,"code":"function _templateObject() {\n  var data = _taggedTemplateLiteral([\"\\n                <stop offset=\\\"\", \"%\\\" style=\\\"\\n                    stop-color:\", \";\\n                    stop-opacity:\", \"\\\" />\\n                \"]);\n\n  _templateObject = function _templateObject() {\n    return data;\n  };\n\n  return data;\n}\n\nfunction _taggedTemplateLiteral(strings, raw) { if (!raw) { raw = strings.slice(0); } return Object.freeze(Object.defineProperties(strings, { raw: { value: Object.freeze(raw) } })); }\n\nimport { h, init } from \"../vdom\";\nimport moduleAttrs from \"../vdom/modules/attributes\";\nimport moduleEventLIsteners from \"../vdom/modules/eventlisteners\";\nimport moduleProps from \"../vdom/modules/props\";\nimport moduleStyle from \"../vdom/modules/style\";\nimport { oneLineTrim } from \"common-tags\";\nimport { Component } from \"../../element/component\";\nimport { isRenderable } from \"../../element/is\";\nimport IS_NODE from \"../../utils/is-node\";\nimport ns from \"../ns\";\nimport { gatherEventListeners } from \"../utils\";\nvar patch = init([moduleAttrs, moduleProps, moduleEventLIsteners, moduleStyle]);\nvar HOOKS_MAP = {\n  // didMount: \"insert\",\n  didPatch: \"postpatch\"\n};\n\nfunction updateParentVNode(elm) {\n  var actualParent = elm.parent;\n  if (!actualParent) return;\n  var logicalSelf = elm;\n\n  while (isRenderable(actualParent) && !actualParent.isRoot) {\n    logicalSelf = actualParent;\n    actualParent = logicalSelf.parent;\n  }\n\n  if (actualParent.isRoot) {\n    actualParent.vnode = elm.vnode;\n  } else {\n    var i = actualParent.children.indexOf(logicalSelf);\n    if (actualParent.vnode && actualParent.vnode.children) actualParent.vnode.children[i] = elm.vnode;\n    updateParentVNode(actualParent);\n  }\n}\n\nfunction insertHook(elm) {\n  if (elm.__insertHook) return elm.__insertHook;\n\n  var hook = elm.__insertHook = function (vnode) {\n    if (!elm.isRoot) elm.vnode = vnode;\n    elm.$callHook(\"didMount\");\n  };\n\n  return hook;\n}\n\nfunction updateHook(elm) {\n  if (elm.__updateHook) return elm.__updateHook;\n\n  var hook = elm.__updateHook = function (_, vnode) {\n    if (!elm.isRoot) elm.vnode = vnode;\n  };\n\n  return hook;\n}\n\nfunction render(element, context) {\n  var vnode = _genView(element);\n\n  _patch(element, vnode, context);\n\n  updateSVGDef(context);\n}\n\nfunction _genView(element) {\n  // if (element instanceof Component && element.isStatic && element.vnode) {\n  if (element.parent && element.parent.isStatic && !element.parent._isRenderRoot && element.vnode) {\n    return element.vnode;\n  }\n\n  if (isRenderable(element)) {\n    return _genView(element.children[0]);\n  }\n\n  var attrs = element.svgAttrs();\n  var tag = element.svgTagName();\n  var text = element.svgTextContent();\n  var children;\n\n  if (element instanceof Component) {\n    children = element.children.filter(function (c) {\n      return c._isActive;\n    }).map(_genView);\n  }\n\n  var key = element.prop.key || element.id;\n  var opt = {\n    attrs: attrs,\n    key: key,\n    ns: ns,\n    hook: {\n      insert: insertHook(element),\n      update: updateHook(element)\n    },\n    _elm: element\n  }; // innerHTML\n\n  if (attrs.innerHTML) {\n    opt.props = {\n      innerHTML: attrs.innerHTML\n    };\n  } // events\n\n\n  var listeners = gatherEventListeners(element);\n\n  if (listeners) {\n    opt.on = listeners;\n  } // styles\n\n\n  var keys;\n  keys = Object.keys(element.$styles);\n\n  if (keys.length > 0) {\n    opt.style = element.$styles;\n  } // cursor and visibility\n\n\n  var v;\n  v = element.prop.cursor;\n\n  if (typeof v !== \"undefined\") {\n    if (!opt.style) opt.style = {};\n    opt.style[\"cursor\"] = v;\n  }\n\n  v = element.prop.visible;\n\n  if (typeof v !== \"undefined\") {\n    if (!opt.style) opt.style = {};\n    opt.style[\"visibility\"] = v ? \"visible\" : \"hidden\";\n  } // hooks\n\n\n  Object.keys(HOOKS_MAP).forEach(function (k) {\n    if (k in element) {\n      opt.hook[HOOKS_MAP[k]] = element[k].bind(element);\n    }\n  });\n  return h(tag, opt, children || text);\n}\n\nfunction _patch(element, vnode, context) {\n  if (element.isRoot) {\n    element.vnode = patch(element.vnode ? element.vnode : _createRootElm(element, context), vnode);\n  } else {\n    var el = element;\n\n    while (isRenderable(el)) {\n      el = el.children[0];\n    }\n\n    if (el.vnode) {\n      el.vnode = patch(el.vnode, vnode);\n      updateParentVNode(el);\n    }\n  }\n}\n\nfunction _createRootElm(element, context) {\n  var rootElm = document.createElementNS(ns, \"g\");\n  var defElm = document.createElementNS(ns, \"defs\");\n  defElm.innerHTML = Object.values(context.svgDef).join(\"\");\n  var svg = context.svg = document.createElementNS(ns, \"svg\");\n  svg.setAttribute(\"xmlns\", ns);\n  setSize(element.$v, context);\n  svg.setAttribute(\"style\", \"font-family: Arial\");\n  svg.appendChild(rootElm);\n  svg.appendChild(defElm);\n  element.$v.container.appendChild(svg);\n  return rootElm;\n}\n\nfunction updateSVGDef(context) {\n  var defElm = context.svg.getElementsByTagName(\"defs\")[0];\n  var html = Object.values(context.svgDef).join(\"\");\n  if (html === defElm.innerHTML) return;\n  defElm.innerHTML = html;\n}\n\nfunction setSize(v, context) {\n  if (!context.svg) return;\n  context.svg.setAttribute(\"width\", v.size.width);\n  context.svg.setAttribute(\"height\", v.size.height);\n}\n\nfunction appendDef(context, id, tag) {\n  var attrs = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : {};\n  var content = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : \"\";\n  var attrStr = Object.keys(attrs).map(function (k) {\n    return \"\".concat(k, \"=\").concat(attrs[k]);\n  }).join(\" \");\n  context.svgDef[id] = \"<\".concat(tag, \" id=\\\"\").concat(id, \"\\\" \").concat(attrStr, \">\").concat(content, \"</\").concat(tag, \">\");\n}\n\nexport function defineGradient(id, def, v, context) {\n  appendDef(context, id, \"linearGradient\", {\n    x1: \"\".concat(def.x1, \"%\"),\n    x2: \"\".concat(def.x2, \"%\"),\n    y1: \"\".concat(def.y1, \"%\"),\n    y2: \"\".concat(def.y2, \"%\")\n  }, def.stops.map(function (s) {\n    return oneLineTrim(_templateObject(), s.offset, s.color, s.opacity === undefined ? 1 : s.opacity);\n  }).join());\n}\nexport function getGradient(name) {\n  return \"url(#\".concat(name, \")\");\n}\nvar renderer = {\n  init: function init(v, context) {\n    if (IS_NODE) {\n      throw Error(\"The \\\"svg\\\" renderer only works in browser environments.\");\n    }\n\n    context.svgDef = {};\n\n    context.appendDef = function (id, tag) {\n      var attrs = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n      var content = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : \"\";\n      return appendDef(context, id, tag, attrs, content);\n    };\n  },\n  setSize: setSize,\n  render: render,\n  defineGradient: defineGradient,\n  getGradient: getGradient\n};\nexport default renderer;","map":null,"metadata":{},"sourceType":"module"}