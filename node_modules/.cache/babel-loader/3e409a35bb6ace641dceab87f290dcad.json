{"ast":null,"code":"function _typeof(obj) { \"@babel/helpers - typeof\"; if (typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; }; } return _typeof(obj); }\n\nfunction _templateObject() {\n  var data = _taggedTemplateLiteral([\"\\n        Component {\\n            xScale = getScale(true) || createXScale()\\n            yScale = getScale(false) || createYScale()\\n\\n            Path {\\n                d = getPath()\\n                fill = prop.fill || \\\"#aaa\\\"\\n                stroke = prop.stroke\\n                @props prop.pathOptions\\n            }\\n        }\\n    \"]);\n\n  _templateObject = function _templateObject() {\n    return data;\n  };\n\n  return data;\n}\n\nfunction _taggedTemplateLiteral(strings, raw) { if (!raw) { raw = strings.slice(0); } return Object.freeze(Object.defineProperties(strings, { raw: { value: Object.freeze(raw) } })); }\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }\n\nfunction _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }\n\nfunction _get(target, property, receiver) { if (typeof Reflect !== \"undefined\" && Reflect.get) { _get = Reflect.get; } else { _get = function _get(target, property, receiver) { var base = _superPropBase(target, property); if (!base) return; var desc = Object.getOwnPropertyDescriptor(base, property); if (desc.get) { return desc.get.call(receiver); } return desc.value; }; } return _get(target, property, receiver || target); }\n\nfunction _superPropBase(object, property) { while (!Object.prototype.hasOwnProperty.call(object, property)) { object = _getPrototypeOf(object); if (object === null) break; } return object; }\n\nfunction _inherits(subClass, superClass) { if (typeof superClass !== \"function\" && superClass !== null) { throw new TypeError(\"Super expression must either be null or a function\"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }\n\nfunction _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }\n\nfunction _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }\n\nfunction _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === \"object\" || typeof call === \"function\")) { return call; } return _assertThisInitialized(self); }\n\nfunction _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\"); } return self; }\n\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Date.prototype.toString.call(Reflect.construct(Date, [], function () {})); return true; } catch (e) { return false; } }\n\nfunction _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }\n\nimport { template } from \"../../template/tag\";\nimport { BaseChart } from \"./base-chart\";\nexport var StepLine = /*#__PURE__*/function (_BaseChart) {\n  _inherits(StepLine, _BaseChart);\n\n  var _super = _createSuper(StepLine);\n\n  function StepLine() {\n    var _this;\n\n    _classCallCheck(this, StepLine);\n\n    _this = _super.apply(this, arguments);\n    _this.render = template(_templateObject()); // @ts-ignore\n\n    _this._cachedPath = \"\";\n    return _this;\n  } // @ts-ignore\n\n\n  _createClass(StepLine, [{\n    key: \"getPath\",\n    value: function getPath() {\n      var _this2 = this;\n\n      var path = \"\";\n      var closedStart = typeof this.prop.closedStart !== \"undefined\" ? this.prop.closedStart : true;\n      var closedEnd = typeof this.prop.closedEnd !== \"undefined\" ? this.prop.closedEnd : true;\n      var width = (this.getX(this.data.values[1].pos) - this.getX(this.data.values[0].pos)) / 2;\n      var xStart = this.getX(this.data.values[0].pos) - width;\n      var y0 = this.getY(0);\n\n      if (closedStart) {\n        path += \"M\".concat(this.flipped ? y0 : xStart, \", \").concat(this.flipped ? xStart : y0);\n      }\n\n      this.data.values.forEach(function (d, i) {\n        var xFrom = _this2.getX(d.pos) - width;\n        var xTo = _this2.getX(d.pos) + width;\n\n        var y = _this2.getY(d.value);\n\n        path += !closedStart && i === 0 ? \"M\" : \"L\";\n        path += \"\".concat(_this2.flipped ? y : xFrom, \", \").concat(_this2.flipped ? xFrom : y, \" L\").concat(_this2.flipped ? y : xTo, \", \").concat(_this2.flipped ? xTo : y);\n      });\n\n      if (closedEnd) {\n        var xEnd = this.getX(this.data.values[this.data.values.length - 1].pos) + width;\n        path += \"L\".concat(this.flipped ? y0 : xEnd, \", \").concat(this.flipped ? xEnd : y0);\n      }\n\n      this._cachedPath = path;\n      return path;\n    }\n  }, {\n    key: \"willRender\",\n    value: function willRender() {\n      _get(_getPrototypeOf(StepLine.prototype), \"willRender\", this).call(this);\n    }\n  }]);\n\n  return StepLine;\n}(BaseChart);","map":null,"metadata":{},"sourceType":"module"}