{"ast":null,"code":"function _defineProperty(obj, key, value) {\n  if (key in obj) {\n    Object.defineProperty(obj, key, {\n      value: value,\n      enumerable: true,\n      configurable: true,\n      writable: true\n    });\n  } else {\n    obj[key] = value;\n  }\n\n  return obj;\n}\n\nimport Vue from '../../utils/vue';\nimport { arrayIncludes, concat } from '../../utils/array';\nimport { getComponentConfig } from '../../utils/config';\nimport { attemptBlur, attemptFocus } from '../../utils/dom';\nimport { isNull } from '../../utils/inspect';\nimport { isLocaleRTL } from '../../utils/locale';\nimport { mathMax, mathMin } from '../../utils/math';\nimport { toInteger, toFloat } from '../../utils/number';\nimport { toString } from '../../utils/string';\nimport identity from '../../utils/identity';\nimport KeyCodes from '../../utils/key-codes';\nimport idMixin from '../../mixins/id';\nimport normalizeSlotMixin from '../../mixins/normalize-slot';\nimport { BIcon } from '../../icons/icon';\nimport { BIconStar, BIconStarHalf, BIconStarFill, BIconX } from '../../icons/icons'; // --- Constants ---\n\nvar NAME = 'BFormRating';\nvar MIN_STARS = 3;\nvar DEFAULT_STARS = 5;\nvar LEFT = KeyCodes.LEFT,\n    RIGHT = KeyCodes.RIGHT,\n    UP = KeyCodes.UP,\n    DOWN = KeyCodes.DOWN; // --- Private helper component ---\n// @vue/component\n\nvar BVFormRatingStar = Vue.extend({\n  name: 'BVFormRatingStar',\n  mixins: [normalizeSlotMixin],\n  props: {\n    rating: {\n      type: Number,\n      \"default\": 0\n    },\n    star: {\n      type: Number,\n      \"default\": 0\n    },\n    focused: {\n      // If parent is focused\n      type: Boolean,\n      \"default\": false\n    },\n    variant: {\n      type: String // default: null\n\n    },\n    disabled: {\n      type: Boolean,\n      \"default\": false\n    },\n    readonly: {\n      type: Boolean,\n      \"default\": false\n    },\n    hasClear: {\n      type: Boolean,\n      \"default\": false\n    }\n  },\n  methods: {\n    onClick: function onClick(evt) {\n      if (!this.disabled && !this.readonly) {\n        evt.preventDefault();\n        this.$emit('selected', this.star);\n      }\n    }\n  },\n  render: function render(h) {\n    var rating = this.rating,\n        star = this.star,\n        focused = this.focused,\n        hasClear = this.hasClear,\n        variant = this.variant,\n        disabled = this.disabled,\n        readonly = this.readonly;\n    var minStar = hasClear ? 0 : 1;\n    var type = rating >= star ? 'full' : rating >= star - 0.5 ? 'half' : 'empty';\n    var slotScope = {\n      variant: variant,\n      disabled: disabled,\n      readonly: readonly\n    };\n    return h('span', {\n      staticClass: 'b-rating-star',\n      \"class\": {\n        // When not hovered, we use this class to focus the current (or first) star\n        focused: focused && rating === star || !toInteger(rating) && star === minStar,\n        // We add type classes to we can handle RTL styling\n        'b-rating-star-empty': type === 'empty',\n        'b-rating-star-half': type === 'half',\n        'b-rating-star-full': type === 'full'\n      },\n      attrs: {\n        tabindex: !disabled && !readonly ? '-1' : null\n      },\n      on: {\n        click: this.onClick\n      }\n    }, [h('span', {\n      staticClass: 'b-rating-icon'\n    }, [this.normalizeSlot(type, slotScope)])]);\n  }\n}); // --- Utility methods ---\n\nvar computeStars = function computeStars(stars) {\n  return mathMax(MIN_STARS, toInteger(stars, DEFAULT_STARS));\n};\n\nvar clampValue = function clampValue(value, min, max) {\n  return mathMax(mathMin(value, max), min);\n}; // --- BFormRating ---\n// @vue/component\n\n\nexport var BFormRating = /*#__PURE__*/Vue.extend({\n  name: NAME,\n  components: {\n    BIconStar: BIconStar,\n    BIconStarHalf: BIconStarHalf,\n    BIconStarFill: BIconStarFill,\n    BIconX: BIconX\n  },\n  mixins: [idMixin],\n  model: {\n    prop: 'value',\n    event: 'change'\n  },\n  props: {\n    value: {\n      type: [Number, String],\n      \"default\": null\n    },\n    stars: {\n      type: [Number, String],\n      \"default\": DEFAULT_STARS,\n      validator: function validator(val) {\n        return toInteger(val) >= MIN_STARS;\n      }\n    },\n    variant: {\n      type: String,\n      \"default\": function _default() {\n        return getComponentConfig(NAME, 'variant');\n      }\n    },\n    color: {\n      // CSS color string (overrides variant)\n      type: String,\n      \"default\": function _default() {\n        return getComponentConfig(NAME, 'color');\n      }\n    },\n    showValue: {\n      type: Boolean,\n      \"default\": false\n    },\n    showValueMax: {\n      type: Boolean,\n      \"default\": false\n    },\n    disabled: {\n      type: Boolean,\n      \"default\": false\n    },\n    readonly: {\n      type: Boolean,\n      \"default\": false\n    },\n    size: {\n      type: String // default: null\n\n    },\n    name: {\n      type: String // default: null\n\n    },\n    form: {\n      type: String // default: null\n\n    },\n    noBorder: {\n      type: Boolean,\n      \"default\": false\n    },\n    inline: {\n      type: Boolean,\n      \"default\": false\n    },\n    precision: {\n      type: [Number, String],\n      \"default\": null\n    },\n    iconEmpty: {\n      type: String,\n      \"default\": 'star'\n    },\n    iconHalf: {\n      type: String,\n      \"default\": 'star-half'\n    },\n    iconFull: {\n      type: String,\n      \"default\": 'star-fill'\n    },\n    iconClear: {\n      type: String,\n      \"default\": 'x'\n    },\n    locale: {\n      // Locale for the formatted value (if shown)\n      // Defaults to the browser locale. Falls back to `en`\n      type: [String, Array] // default: undefined\n\n    },\n    showClear: {\n      type: Boolean,\n      \"default\": false\n    }\n  },\n  data: function data() {\n    var value = toFloat(this.value, null);\n    var stars = computeStars(this.stars);\n    return {\n      localValue: isNull(value) ? null : clampValue(value, 0, stars),\n      hasFocus: false\n    };\n  },\n  computed: {\n    computedStars: function computedStars() {\n      return computeStars(this.stars);\n    },\n    computedRating: function computedRating() {\n      var value = toFloat(this.localValue, 0);\n      var precision = toInteger(this.precision, 3); // We clamp the value between `0` and stars\n\n      return clampValue(toFloat(value.toFixed(precision)), 0, this.computedStars);\n    },\n    computedLocale: function computedLocale() {\n      var locales = concat(this.locale).filter(identity);\n      var nf = new Intl.NumberFormat(locales);\n      return nf.resolvedOptions().locale;\n    },\n    isInteractive: function isInteractive() {\n      return !this.disabled && !this.readonly;\n    },\n    isRTL: function isRTL() {\n      return isLocaleRTL(this.computedLocale);\n    },\n    formattedRating: function formattedRating() {\n      var precision = toInteger(this.precision);\n      var showValueMax = this.showValueMax;\n      var locale = this.computedLocale;\n      var formatOptions = {\n        notation: 'standard',\n        minimumFractionDigits: isNaN(precision) ? 0 : precision,\n        maximumFractionDigits: isNaN(precision) ? 3 : precision\n      };\n      var stars = this.computedStars.toLocaleString(locale);\n      var value = this.localValue;\n      value = isNull(value) ? showValueMax ? '-' : '' : value.toLocaleString(locale, formatOptions);\n      return showValueMax ? \"\".concat(value, \"/\").concat(stars) : value;\n    }\n  },\n  watch: {\n    value: function value(newVal, oldVal) {\n      if (newVal !== oldVal) {\n        var value = toFloat(newVal, null);\n        this.localValue = isNull(value) ? null : clampValue(value, 0, this.computedStars);\n      }\n    },\n    localValue: function localValue(newVal, oldVal) {\n      if (newVal !== oldVal && newVal !== (this.value || 0)) {\n        this.$emit('change', newVal || null);\n      }\n    },\n    disabled: function disabled(newVal) {\n      if (newVal) {\n        this.hasFocus = false;\n        this.blur();\n      }\n    }\n  },\n  methods: {\n    // --- Public methods ---\n    focus: function focus() {\n      if (!this.disabled) {\n        attemptFocus(this.$el);\n      }\n    },\n    blur: function blur() {\n      if (!this.disabled) {\n        attemptBlur(this.$el);\n      }\n    },\n    // --- Private methods ---\n    onKeydown: function onKeydown(evt) {\n      var keyCode = evt.keyCode;\n\n      if (this.isInteractive && arrayIncludes([LEFT, DOWN, RIGHT, UP], keyCode)) {\n        evt.preventDefault();\n        var value = toInteger(this.localValue, 0);\n        var min = this.showClear ? 0 : 1;\n        var stars = this.computedStars; // In RTL mode, LEFT/RIGHT are swapped\n\n        var amountRtl = this.isRTL ? -1 : 1;\n\n        if (keyCode === LEFT) {\n          this.localValue = clampValue(value - amountRtl, min, stars) || null;\n        } else if (keyCode === RIGHT) {\n          this.localValue = clampValue(value + amountRtl, min, stars);\n        } else if (keyCode === DOWN) {\n          this.localValue = clampValue(value - 1, min, stars) || null;\n        } else if (keyCode === UP) {\n          this.localValue = clampValue(value + 1, min, stars);\n        }\n      }\n    },\n    onSelected: function onSelected(value) {\n      if (this.isInteractive) {\n        this.localValue = value;\n      }\n    },\n    onFocus: function onFocus(evt) {\n      this.hasFocus = !this.isInteractive ? false : evt.type === 'focus';\n    },\n    // --- Render methods ---\n    renderIcon: function renderIcon(icon) {\n      return this.$createElement(BIcon, {\n        props: {\n          icon: icon,\n          variant: this.disabled || this.color ? null : this.variant || null\n        }\n      });\n    },\n    iconEmptyFn: function iconEmptyFn() {\n      return this.renderIcon(this.iconEmpty);\n    },\n    iconHalfFn: function iconHalfFn() {\n      return this.renderIcon(this.iconHalf);\n    },\n    iconFullFn: function iconFullFn() {\n      return this.renderIcon(this.iconFull);\n    },\n    iconClearFn: function iconClearFn() {\n      return this.$createElement(BIcon, {\n        props: {\n          icon: this.iconClear\n        }\n      });\n    }\n  },\n  render: function render(h) {\n    var _this = this,\n        _class;\n\n    var disabled = this.disabled,\n        readonly = this.readonly,\n        size = this.size,\n        name = this.name,\n        form = this.form,\n        inline = this.inline,\n        variant = this.variant,\n        color = this.color,\n        noBorder = this.noBorder,\n        hasFocus = this.hasFocus,\n        computedRating = this.computedRating,\n        computedStars = this.computedStars,\n        formattedRating = this.formattedRating,\n        showClear = this.showClear,\n        isRTL = this.isRTL,\n        isInteractive = this.isInteractive,\n        $scopedSlots = this.$scopedSlots;\n    var $content = [];\n\n    if (showClear && !disabled && !readonly) {\n      var $icon = h('span', {\n        staticClass: 'b-rating-icon'\n      }, [($scopedSlots['icon-clear'] || this.iconClearFn)()]);\n      $content.push(h('span', {\n        staticClass: 'b-rating-star b-rating-star-clear flex-grow-1',\n        \"class\": {\n          focused: hasFocus && computedRating === 0\n        },\n        attrs: {\n          tabindex: isInteractive ? '-1' : null\n        },\n        on: {\n          click: function click() {\n            return _this.onSelected(null);\n          }\n        },\n        key: 'clear'\n      }, [$icon]));\n    }\n\n    for (var index = 0; index < computedStars; index++) {\n      var value = index + 1;\n      $content.push(h(BVFormRatingStar, {\n        staticClass: 'flex-grow-1',\n        style: color && !disabled ? {\n          color: color\n        } : {},\n        props: {\n          rating: computedRating,\n          star: value,\n          variant: disabled ? null : variant || null,\n          disabled: disabled,\n          readonly: readonly,\n          focused: hasFocus,\n          hasClear: showClear\n        },\n        on: {\n          selected: this.onSelected\n        },\n        scopedSlots: {\n          empty: $scopedSlots['icon-empty'] || this.iconEmptyFn,\n          half: $scopedSlots['icon-half'] || this.iconHalfFn,\n          full: $scopedSlots['icon-full'] || this.iconFullFn\n        },\n        key: index\n      }));\n    }\n\n    if (name) {\n      $content.push(h('input', {\n        attrs: {\n          type: 'hidden',\n          value: isNull(this.localValue) ? '' : computedRating,\n          name: name,\n          form: form || null\n        },\n        key: 'hidden'\n      }));\n    }\n\n    if (this.showValue) {\n      $content.push(h('b', {\n        staticClass: 'b-rating-value flex-grow-1',\n        attrs: {\n          'aria-hidden': 'true'\n        },\n        key: 'value'\n      }, toString(formattedRating)));\n    }\n\n    return h('output', {\n      staticClass: 'b-rating form-control align-items-center',\n      \"class\": (_class = {}, _defineProperty(_class, \"form-control-\".concat(size), !!size), _defineProperty(_class, 'd-inline-flex', inline), _defineProperty(_class, 'd-flex', !inline), _defineProperty(_class, 'border-0', noBorder), _defineProperty(_class, \"disabled\", disabled), _defineProperty(_class, \"readonly\", !disabled && readonly), _class),\n      attrs: {\n        id: this.safeId(),\n        dir: isRTL ? 'rtl' : 'ltr',\n        tabindex: disabled ? null : '0',\n        disabled: disabled,\n        role: 'slider',\n        'aria-disabled': disabled ? 'true' : null,\n        'aria-readonly': !disabled && readonly ? 'true' : null,\n        'aria-live': 'off',\n        'aria-valuemin': showClear ? '0' : '1',\n        'aria-valuemax': toString(computedStars),\n        'aria-valuenow': computedRating ? toString(computedRating) : null\n      },\n      on: {\n        keydown: this.onKeydown,\n        focus: this.onFocus,\n        blur: this.onFocus\n      }\n    }, $content);\n  }\n});","map":null,"metadata":{},"sourceType":"module"}