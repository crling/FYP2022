{"ast":null,"code":"function _slicedToArray(arr, i) { return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray(arr, i) || _nonIterableRest(); }\n\nfunction _nonIterableRest() { throw new TypeError(\"Invalid attempt to destructure non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\"); }\n\nfunction _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === \"string\") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === \"Object\" && o.constructor) n = o.constructor.name; if (n === \"Map\" || n === \"Set\") return Array.from(o); if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }\n\nfunction _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }\n\nfunction _iterableToArrayLimit(arr, i) { if (typeof Symbol === \"undefined\" || !(Symbol.iterator in Object(arr))) return; var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i[\"return\"] != null) _i[\"return\"](); } finally { if (_d) throw _e; } } return _arr; }\n\nfunction _arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }\n\nimport { genDefaultPalette, withDefaultPalette } from \"oviz-common/palette\";\nimport { copyObject } from \"utils/object\";\n\nfunction run(v) {\n  v.data._changed = true;\n  v.run();\n}\n\nexport var editorRef = {};\n\nfunction genPaltteeMapForArray(values) {\n  var map = {};\n  values.forEach(function (v, i) {\n    return map[\"data\".concat(v)] = i;\n  });\n  return map;\n}\n\nfunction convertColorsMapToArray(colorMap) {\n  var colors = [];\n  Object.keys(colorMap).forEach(function (k) {\n    return colors.push(colorMap[k]);\n  });\n  return colors;\n}\n\nexport function editorConfig(v) {\n  var _genDefaultPalette = genDefaultPalette(v.data.colors, v.data.values),\n      _genDefaultPalette2 = _slicedToArray(_genDefaultPalette, 1),\n      defaultPalette = _genDefaultPalette2[0];\n\n  return {\n    sections: [{\n      id: \"settings\",\n      title: \"Settings\",\n      layout: \"single-page\",\n      view: {\n        type: \"list\",\n        items: [{\n          type: \"vue\",\n          title: \"\",\n          component: \"color-picker\",\n          data: {\n            title: \"Customize colors\",\n            scheme: copyObject(v.data.colors),\n            //names: genPaltteeMapForArray(v.data.values),\n            palettes: withDefaultPalette(defaultPalette),\n            paletteMap: genPaltteeMapForArray(v.data.values),\n            id: \"pwcolor\",\n            callback: function callback(colors) {\n              v.data.colors = convertColorsMapToArray(colors);\n              v.forceRedraw = true;\n              run(v);\n            }\n          }\n        }, {\n          title: \"Column Label Rotation Angle\",\n          type: \"input\",\n          format: \"int\",\n          value: {\n            current: 90,\n            callback: function callback(newValue) {\n              var val = parseInt(newValue);\n              if (val < 0) val = 0;\n              if (val > 90) val = 90;\n              v.data.config.colLabelRotation = val;\n              run(v);\n            }\n          }\n        }]\n      }\n    }]\n  };\n}\nexport function defaultEditorConfig(v) {\n  return {\n    sections: [{\n      id: \"settings\",\n      title: \"Settings\",\n      layout: \"single-page\",\n      view: {\n        type: \"list\",\n        items: [{\n          title: \"Default\",\n          type: \"input\",\n          format: \"int\",\n          value: {\n            current: 0,\n            callback: function callback(newValue) {\n              var val = parseInt(newValue);\n              if (val < 0) val = 0;\n              if (val > 90) val = 90;\n              v.data.config.colLabelRotation = val;\n              run(v);\n            }\n          }\n        }]\n      }\n    }]\n  };\n}","map":{"version":3,"sources":["/Users/wangzhenyu/Desktop/fyp_workspace/meta_platform/app/javascript/viz/discrete-heatmap/editor.ts"],"names":["genDefaultPalette","withDefaultPalette","copyObject","run","v","data","_changed","editorRef","genPaltteeMapForArray","values","map","forEach","i","convertColorsMapToArray","colorMap","colors","Object","keys","k","push","editorConfig","defaultPalette","sections","id","title","layout","view","type","items","component","scheme","palettes","paletteMap","callback","forceRedraw","format","value","current","newValue","val","parseInt","config","colLabelRotation","defaultEditorConfig"],"mappings":"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","sourcesContent":["import {defaultLayoutConf as conf} from \"utils/editor\"\nimport { genDefaultPalette, withDefaultPalette } from \"oviz-common/palette\";\nimport { EditorDef } from \"utils/editor\";\nimport { copyObject } from \"utils/object\";\n\nfunction run(v) {\n    v.data._changed = true;\n    v.run();\n}\nexport const editorRef = {} as any;\n\nfunction genPaltteeMapForArray(values) {\n    const map = {};\n    values.forEach((v, i)=> map[`data${v}`] = i);\n    return map;\n}\nfunction convertColorsMapToArray(colorMap) {\n    const colors = [];\n    Object.keys(colorMap).forEach(k=> colors.push(colorMap[k]));\n    return colors;\n}\nexport function editorConfig(v):EditorDef {\n    const [defaultPalette] = genDefaultPalette(v.data.colors, v.data.values);\n    return {\n        sections: [\n            {\n                id: \"settings\",\n                title: \"Settings\",\n                layout: \"single-page\",\n                view: {\n                    type: \"list\",\n                    items: [\n                        {\n                            type: \"vue\",\n                            title: \"\",\n                            component: \"color-picker\",\n                            data: {\n                                title: \"Customize colors\",\n                                scheme: copyObject(v.data.colors),\n                                //names: genPaltteeMapForArray(v.data.values),\n                                palettes: withDefaultPalette(defaultPalette),\n                                paletteMap: genPaltteeMapForArray(v.data.values),\n                                id: \"pwcolor\",\n                                callback(colors) {\n                                    v.data.colors = convertColorsMapToArray(colors);\n                                    v.forceRedraw = true;\n                                    run(v);\n                                },\n                            },\n                        },\n                        {\n                            title: \"Column Label Rotation Angle\",\n                            type: \"input\",\n                            format: \"int\",\n                            value: {\n                                current: 90,\n                                callback(newValue) {\n                                    let val = parseInt(newValue as any);\n                                    if (val < 0) val = 0;\n                                    if (val > 90) val = 90;\n                                    v.data.config.colLabelRotation = val;\n                                    run(v);\n                                }\n                              }\n                        },\n                    ],\n                },\n            },\n        ],\n    };\n}\n\nexport function defaultEditorConfig(v):EditorDef {\n    return {\n        sections: [\n            {\n                id: \"settings\",\n                title: \"Settings\",\n                layout: \"single-page\",\n                view: {\n                    type: \"list\",\n                    items: [\n                        {\n                            title: \"Default\",\n                            type: \"input\",\n                            format: \"int\",\n                            value: {\n                                current: 0,\n                                callback(newValue) {\n                                    let val = parseInt(newValue as any);\n                                    if (val < 0) val = 0;\n                                    if (val > 90) val = 90;\n                                    v.data.config.colLabelRotation = val;\n                                    run(v);\n                                }\n                              }\n                        },\n                    ],\n                },\n            },\n        ],\n    };\n}"]},"metadata":{},"sourceType":"module"}