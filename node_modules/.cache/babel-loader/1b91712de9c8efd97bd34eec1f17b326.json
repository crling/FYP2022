{"ast":null,"code":"function _createForOfIteratorHelper(o, allowArrayLike) { var it; if (typeof Symbol === \"undefined\" || o[Symbol.iterator] == null) { if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === \"number\") { if (it) o = it; var i = 0; var F = function F() {}; return { s: F, n: function n() { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }, e: function e(_e) { throw _e; }, f: F }; } throw new TypeError(\"Invalid attempt to iterate non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\"); } var normalCompletion = true, didErr = false, err; return { s: function s() { it = o[Symbol.iterator](); }, n: function n() { var step = it.next(); normalCompletion = step.done; return step; }, e: function e(_e2) { didErr = true; err = _e2; }, f: function f() { try { if (!normalCompletion && it[\"return\"] != null) it[\"return\"](); } finally { if (didErr) throw err; } } }; }\n\nfunction _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === \"string\") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === \"Object\" && o.constructor) n = o.constructor.name; if (n === \"Map\" || n === \"Set\") return Array.from(o); if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }\n\nfunction _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }\n\nfunction _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }\n\nexport function statistics(data) {\n  return new Statistics(data);\n}\nexport var Statistics = /*#__PURE__*/function () {\n  function Statistics(data) {\n    _classCallCheck(this, Statistics);\n\n    this._data = data.sort(function (x, y) {\n      return x - y;\n    });\n    this._length = this._data.length;\n\n    if (this._length === 1) {\n      this._firstQuartile = this._data[0];\n      this._thirdQuartile = this._data[0];\n      this._mean = this._data[0];\n      this._median = this._data[0];\n    } else if (this._length === 2) {\n      this._firstQuartile = this._data[0];\n      this._thirdQuartile = this._data[1];\n      this._mean = (this._data[0] + this._data[1]) / 2;\n      this._median = (this._data[0] + this._data[1]) / 2;\n    } else if (this._length === 3) {\n      this._firstQuartile = this._data[0];\n      this._thirdQuartile = this._data[2];\n      this._mean = (this._data[0] + this._data[1] + this._data[2]) / 3;\n      this._median = this._data[1];\n    } else {\n      var tmpFirstQuartile = this._length * 25 / 100;\n      this._firstQuartile = Number.isInteger(tmpFirstQuartile) ? (this._data[tmpFirstQuartile - 1] + this._data[tmpFirstQuartile]) / 2 : this._data[Math.ceil(tmpFirstQuartile)];\n      this._median = this._length % 2 === 0 ? (this._data[this._length / 2 - 1] + this._data[this._length / 2]) / 2 : this._data[Math.floor(this._length / 2)];\n      var tmpThirdQuartile = this._length * 75 / 100;\n      this._thirdQuartile = Number.isInteger(tmpThirdQuartile) ? (this._data[tmpThirdQuartile - 1] + this._data[tmpThirdQuartile]) / 2 : this._data[Math.ceil(tmpThirdQuartile) - 1];\n    }\n\n    if (this._data.length > 0) {\n      var sum = 0;\n      var min = this._data[0];\n      var max = this._data[0];\n\n      var _iterator = _createForOfIteratorHelper(this._data),\n          _step;\n\n      try {\n        for (_iterator.s(); !(_step = _iterator.n()).done;) {\n          var d = _step.value;\n          sum += d;\n          min = d < min ? d : min;\n          max = d > max ? d : max;\n        }\n      } catch (err) {\n        _iterator.e(err);\n      } finally {\n        _iterator.f();\n      }\n\n      this._min = min;\n      this._max = max;\n      this._sum = sum;\n      this._mean = sum / this._length;\n    } else {\n      throw new Error(\"Data is empty\");\n    }\n  }\n\n  _createClass(Statistics, [{\n    key: \"getData\",\n    value: function getData() {\n      return this._data;\n    }\n  }, {\n    key: \"length\",\n    value: function length() {\n      return this._length;\n    }\n  }, {\n    key: \"sum\",\n    value: function sum() {\n      return this._sum;\n    }\n  }, {\n    key: \"min\",\n    value: function min() {\n      return this._min;\n    }\n  }, {\n    key: \"max\",\n    value: function max() {\n      return this._max;\n    }\n  }, {\n    key: \"mean\",\n    value: function mean() {\n      return this._mean;\n    }\n  }, {\n    key: \"median\",\n    value: function median() {\n      return this._median;\n    }\n  }, {\n    key: \"Q1\",\n    value: function Q1() {\n      return this._firstQuartile;\n    }\n  }, {\n    key: \"Q3\",\n    value: function Q3() {\n      return this._thirdQuartile;\n    }\n  }, {\n    key: \"variance\",\n    value: function variance() {\n      var mean = this.mean();\n\n      var squaredSum = this._data.reduce(function (squaredSum, current) {\n        return squaredSum + Math.pow(current - mean, 2);\n      }, 0);\n\n      return squaredSum / this._length;\n    }\n  }, {\n    key: \"std\",\n    value: function std() {\n      var mean = this.mean();\n      return Math.sqrt(this._data.reduce(function (squaredSum, current) {\n        return squaredSum + Math.pow(current - mean, 2);\n      }, 0) / this._length);\n    }\n  }]);\n\n  return Statistics;\n}();\nexport function tDistribution(df) {\n  var confidence = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0.8;\n  var tTable = {\n    // tslint:disable-next-line:max-line-length\n    0.8: {\n      1: 3.078,\n      2: 1.886,\n      3: 1.638,\n      4: 1.533,\n      5: 1.476,\n      6: 1.44,\n      7: 1.415,\n      8: 1.397,\n      9: 1.383,\n      10: 1.372,\n      11: 1.363,\n      12: 1.356,\n      13: 1.35,\n      14: 1.345,\n      15: 1.341,\n      16: 1.337,\n      17: 1.333,\n      18: 1.33,\n      19: 1.328,\n      20: 1.325,\n      21: 1.323,\n      22: 1.321,\n      23: 1.319,\n      24: 1.318,\n      25: 1.316,\n      26: 1.315,\n      27: 1.314,\n      28: 1.313,\n      29: 1.311,\n      30: 1.31,\n      31: 1.309,\n      32: 1.309,\n      33: 1.308,\n      34: 1.307,\n      35: 1.306,\n      36: 1.306,\n      37: 1.305,\n      38: 1.304,\n      39: 1.304,\n      40: 1.303,\n      42: 1.302,\n      44: 1.301,\n      46: 1.3,\n      48: 1.299,\n      50: 1.299,\n      60: 1.296,\n      70: 1.294,\n      80: 1.292,\n      90: 1.291,\n      100: 1.29,\n      120: 1.289,\n      150: 1.287,\n      200: 1.286,\n      300: 1.284,\n      500: 1.283,\n      \"inf\": 1.282\n    },\n    // tslint:disable-next-line:max-line-length\n    0.9: {\n      1: 6.314,\n      2: 2.92,\n      3: 2.353,\n      4: 2.132,\n      5: 2.015,\n      6: 1.943,\n      7: 1.895,\n      8: 1.86,\n      9: 1.833,\n      10: 1.812,\n      11: 1.796,\n      12: 1.782,\n      13: 1.771,\n      14: 1.761,\n      15: 1.753,\n      16: 1.746,\n      17: 1.74,\n      18: 1.734,\n      19: 1.729,\n      20: 1.725,\n      21: 1.721,\n      22: 1.717,\n      23: 1.714,\n      24: 1.711,\n      25: 1.708,\n      26: 1.706,\n      27: 1.703,\n      28: 1.701,\n      29: 1.699,\n      30: 1.697,\n      31: 1.695,\n      32: 1.694,\n      33: 1.692,\n      34: 1.691,\n      35: 1.69,\n      36: 1.688,\n      37: 1.687,\n      38: 1.686,\n      39: 1.685,\n      40: 1.684,\n      42: 1.682,\n      44: 1.68,\n      46: 1.679,\n      48: 1.677,\n      50: 1.676,\n      60: 1.671,\n      70: 1.667,\n      80: 1.664,\n      90: 1.662,\n      100: 1.66,\n      120: 1.658,\n      150: 1.655,\n      200: 1.652,\n      300: 1.65,\n      500: 1.648,\n      \"inf\": 1.645\n    },\n    // tslint:disable-next-line:max-line-length\n    0.95: {\n      1: 12.706,\n      2: 4.303,\n      3: 3.182,\n      4: 2.776,\n      5: 2.571,\n      6: 2.447,\n      7: 2.365,\n      8: 2.306,\n      9: 2.262,\n      10: 2.228,\n      11: 2.201,\n      12: 2.179,\n      13: 2.16,\n      14: 2.145,\n      15: 2.131,\n      16: 2.12,\n      17: 2.11,\n      18: 2.101,\n      19: 2.093,\n      20: 2.086,\n      21: 2.08,\n      22: 2.074,\n      23: 2.069,\n      24: 2.064,\n      25: 2.06,\n      26: 2.056,\n      27: 2.052,\n      28: 2.048,\n      29: 2.045,\n      30: 2.042,\n      31: 2.04,\n      32: 2.037,\n      33: 2.035,\n      34: 2.032,\n      35: 2.03,\n      36: 2.028,\n      37: 2.026,\n      38: 2.024,\n      39: 2.023,\n      40: 2.021,\n      42: 2.018,\n      44: 2.015,\n      46: 2.013,\n      48: 2.011,\n      50: 2.009,\n      60: 2.0,\n      70: 1.994,\n      80: 1.99,\n      90: 1.987,\n      100: 1.984,\n      120: 1.98,\n      150: 1.976,\n      200: 1.972,\n      300: 1.968,\n      500: 1.965,\n      \"inf\": 1.96\n    },\n    // tslint:disable-next-line:max-line-length\n    0.98: {\n      1: 31.82,\n      2: 6.965,\n      3: 4.541,\n      4: 3.747,\n      5: 3.365,\n      6: 3.143,\n      7: 2.998,\n      8: 2.897,\n      9: 2.821,\n      10: 2.764,\n      11: 2.718,\n      12: 2.681,\n      13: 2.65,\n      14: 2.625,\n      15: 2.602,\n      16: 2.584,\n      17: 2.567,\n      18: 2.552,\n      19: 2.539,\n      20: 2.528,\n      21: 2.518,\n      22: 2.508,\n      23: 2.5,\n      24: 2.492,\n      25: 2.485,\n      26: 2.479,\n      27: 2.473,\n      28: 2.467,\n      29: 2.462,\n      30: 2.457,\n      31: 2.453,\n      32: 2.449,\n      33: 2.445,\n      34: 2.441,\n      35: 2.438,\n      36: 2.434,\n      37: 2.431,\n      38: 2.429,\n      39: 2.426,\n      40: 2.423,\n      42: 2.418,\n      44: 2.414,\n      46: 2.41,\n      48: 2.407,\n      50: 2.403,\n      60: 2.39,\n      70: 2.381,\n      80: 2.374,\n      90: 2.369,\n      100: 2.364,\n      120: 2.358,\n      150: 2.351,\n      200: 2.345,\n      300: 2.339,\n      500: 2.334,\n      \"inf\": 2.326\n    },\n    // tslint:disable-next-line:max-line-length\n    0.99: {\n      1: 63.657,\n      2: 9.925,\n      3: 5.841,\n      4: 4.604,\n      5: 4.032,\n      6: 3.707,\n      7: 3.499,\n      8: 3.355,\n      9: 3.25,\n      10: 3.169,\n      11: 3.106,\n      12: 3.055,\n      13: 3.012,\n      14: 2.977,\n      15: 2.947,\n      16: 2.921,\n      17: 2.898,\n      18: 2.878,\n      19: 2.861,\n      20: 2.845,\n      21: 2.831,\n      22: 2.819,\n      23: 2.807,\n      24: 2.797,\n      25: 2.787,\n      26: 2.779,\n      27: 2.771,\n      28: 2.763,\n      29: 2.756,\n      30: 2.75,\n      31: 2.744,\n      32: 2.738,\n      33: 2.733,\n      34: 2.728,\n      35: 2.724,\n      36: 2.719,\n      37: 2.715,\n      38: 2.712,\n      39: 2.708,\n      40: 2.704,\n      42: 2.698,\n      44: 2.692,\n      46: 2.687,\n      48: 2.682,\n      50: 2.678,\n      60: 2.66,\n      70: 2.648,\n      80: 2.639,\n      90: 2.632,\n      100: 2.626,\n      120: 2.617,\n      150: 2.609,\n      200: 2.601,\n      300: 2.592,\n      500: 2.586,\n      \"inf\": 2.576\n    },\n    // tslint:disable-next-line:max-line-length\n    0.995: {\n      1: 127.321,\n      2: 14.089,\n      3: 7.453,\n      4: 5.598,\n      5: 4.773,\n      6: 4.317,\n      7: 4.029,\n      8: 3.833,\n      9: 3.69,\n      10: 3.581,\n      11: 3.497,\n      12: 3.428,\n      13: 3.372,\n      14: 3.326,\n      15: 3.286,\n      16: 3.252,\n      17: 3.222,\n      18: 3.197,\n      19: 3.174,\n      20: 3.153,\n      21: 3.135,\n      22: 3.119,\n      23: 3.104,\n      24: 3.09,\n      25: 3.078,\n      26: 3.067,\n      27: 3.057,\n      28: 3.047,\n      29: 3.038,\n      30: 3.03,\n      31: 3.022,\n      32: 3.015,\n      33: 3.008,\n      34: 3.002,\n      35: 2.996,\n      36: 2.991,\n      37: 2.985,\n      38: 2.98,\n      39: 2.976,\n      40: 2.971,\n      42: 2.963,\n      44: 2.956,\n      46: 2.949,\n      48: 2.943,\n      50: 2.937,\n      60: 2.915,\n      70: 2.899,\n      80: 2.887,\n      90: 2.878,\n      100: 2.871,\n      120: 2.86,\n      150: 2.849,\n      200: 2.839,\n      300: 2.828,\n      500: 2.82,\n      \"inf\": 2.807\n    },\n    // tslint:disable-next-line:max-line-length\n    0.998: {\n      1: 318.309,\n      2: 22.327,\n      3: 10.215,\n      4: 7.173,\n      5: 5.893,\n      6: 5.208,\n      7: 4.785,\n      8: 4.501,\n      9: 4.297,\n      10: 4.144,\n      11: 4.025,\n      12: 3.93,\n      13: 3.852,\n      14: 3.787,\n      15: 3.733,\n      16: 3.686,\n      17: 3.646,\n      18: 3.61,\n      19: 3.579,\n      20: 3.552,\n      21: 3.527,\n      22: 3.505,\n      23: 3.485,\n      24: 3.467,\n      25: 3.45,\n      26: 3.435,\n      27: 3.421,\n      28: 3.408,\n      29: 3.396,\n      30: 3.385,\n      31: 3.375,\n      32: 3.365,\n      33: 3.356,\n      34: 3.348,\n      35: 3.34,\n      36: 3.333,\n      37: 3.326,\n      38: 3.319,\n      39: 3.313,\n      40: 3.307,\n      42: 3.296,\n      44: 3.286,\n      46: 3.277,\n      48: 3.269,\n      50: 3.261,\n      60: 3.232,\n      70: 3.211,\n      80: 3.195,\n      90: 3.183,\n      100: 3.174,\n      120: 3.16,\n      150: 3.145,\n      200: 3.131,\n      300: 3.118,\n      500: 3.107,\n      \"inf\": 3.09\n    },\n    // tslint:disable-next-line:max-line-length\n    0.999: {\n      1: 636.619,\n      2: 31.599,\n      3: 12.924,\n      4: 8.61,\n      5: 6.869,\n      6: 5.959,\n      7: 5.408,\n      8: 5.041,\n      9: 4.781,\n      10: 4.587,\n      11: 4.437,\n      12: 4.318,\n      13: 4.221,\n      14: 4.14,\n      15: 4.073,\n      16: 4.015,\n      17: 3.965,\n      18: 3.922,\n      19: 3.883,\n      20: 3.85,\n      21: 3.819,\n      22: 3.792,\n      23: 3.768,\n      24: 3.745,\n      25: 3.725,\n      26: 3.707,\n      27: 3.69,\n      28: 3.674,\n      29: 3.659,\n      30: 3.646,\n      31: 3.633,\n      32: 3.622,\n      33: 3.611,\n      34: 3.601,\n      35: 3.591,\n      36: 3.582,\n      37: 3.574,\n      38: 3.566,\n      39: 3.558,\n      40: 3.551,\n      42: 3.538,\n      44: 3.526,\n      46: 3.515,\n      48: 3.505,\n      50: 3.496,\n      60: 3.46,\n      70: 3.435,\n      80: 3.416,\n      90: 3.402,\n      100: 3.391,\n      120: 3.373,\n      150: 3.357,\n      200: 3.34,\n      300: 3.323,\n      500: 3.31,\n      \"inf\": 3.291\n    }\n  };\n  var kConfidence = confidence.toString(); // console.log(\"kConfidence\", kConfidence);\n\n  var kDF = df.toString(); // console.log(\"kDF\", kDF);\n\n  var tValue;\n\n  if (kConfidence in tTable) {\n    if (kDF in tTable[kConfidence]) {\n      tValue = tTable[kConfidence][kDF];\n    } else {\n      var keys = Object.keys(tTable[kConfidence]);\n\n      if (df >= parseInt(keys[keys.length - 2])) {\n        tValue = tTable[kConfidence][keys.length - 1];\n      } else {\n        for (var i = 0; i < keys.length - 2; i++) {\n          // console.log(\"parseInt(keys[i])\", parseInt(keys[i]), \"df\", df, \"parseInt(keys[i + 1])\", parseInt(keys[i + 1]));\n          if (df >= parseInt(keys[i]) && df < parseInt(keys[i + 1])) {\n            tValue = tTable[kConfidence][keys[i]];\n            break;\n          }\n        }\n      }\n    }\n  }\n\n  return tValue;\n}\nexport function simpleLinearRegression() {\n  var data = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [];\n  // function: y = alpha + beta * x\n  var n = data.length;\n  var alpha = 0;\n  var beta = 0;\n  var xs = [];\n  var ys = [];\n\n  if (n > 0) {\n    data.sort(function (x, y) {\n      return x[0] - y[0];\n    });\n\n    var _iterator2 = _createForOfIteratorHelper(data),\n        _step2;\n\n    try {\n      for (_iterator2.s(); !(_step2 = _iterator2.n()).done;) {\n        var d = _step2.value;\n        xs.push(d[0]);\n        ys.push(d[1]);\n      }\n    } catch (err) {\n      _iterator2.e(err);\n    } finally {\n      _iterator2.f();\n    }\n\n    var xMean = statistics(xs).mean();\n    var yMean = statistics(ys).mean();\n    var xyCov = 0;\n    var xVar = 0;\n\n    for (var i = 0; i < n; i++) {\n      xyCov += (xs[i] - xMean) * (ys[i] - yMean);\n      xVar += Math.pow(xs[i] - xMean, 2);\n    }\n\n    beta = xyCov / xVar;\n    alpha = yMean - beta * xMean;\n  }\n\n  var x1 = Math.floor(data[0][0]);\n  var y1 = beta * x1 + alpha;\n  var x2 = Math.ceil(data[n - 1][0]);\n  var y2 = beta * x2 + alpha;\n  var predict = [];\n\n  for (var _i = 0; _i < n; _i++) {\n    predict.push([xs[_i], beta * xs[_i] + alpha]);\n  }\n\n  return {\n    start: {\n      x: x1,\n      y: y1\n    },\n    end: {\n      x: x2,\n      y: y2\n    },\n    slope: beta,\n    intercept: alpha,\n    data: predict\n  };\n}\nexport function logisticRegression() {\n  var data = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [];\n  return [];\n}\nexport function confidenceBand() {\n  var data = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [];\n  var method = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : \"simple_linear\";\n  var level = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 0.8;\n  var n = data.length;\n  var xList = data.map(function (d) {\n    return d[0];\n  });\n  var yList = data.map(function (d) {\n    return d[0];\n  });\n  var xStat = statistics(xList);\n  var eList;\n\n  if (method === \"simple_linear\") {\n    eList = simpleLinearRegression(data);\n  } else {\n    eList = simpleLinearRegression(data);\n  }\n\n  var yStdResidual = Math.sqrt(yList.reduce(function (yStdResidual, yI, cI) {\n    // console.log(\"yI\", yI, \"cI\", cI, \"eList.data[cI][1]\", eList.data[cI][1]);\n    return yStdResidual + Math.pow(yI - eList.data[cI][1], 2);\n  }) / (n - 2)); // console.log(\"yStdResidual\", yStdResidual);\n\n  var xSumSquaredError = xList.reduce(function (xSumSquaredError, xI) {\n    return xSumSquaredError + Math.pow(xI - xStat.mean(), 2);\n  }); // console.log(\"xSumSquaredError\", xSumSquaredError);\n\n  var eStdResidualList = xList.map(function (x, i) {\n    return yStdResidual * Math.sqrt(1 / n + Math.pow(x - xStat.mean(), 2)) / xSumSquaredError;\n  }); // console.log(\"eStdResidualList\", eStdResidualList);\n\n  var t = tDistribution(n - 2, level); // console.log(\"t\", t);\n\n  var cb = xList.map(function (x, i) {\n    // console.log(\"x\", x, \"i\", i);\n    var cbDataTmp = [x, eList.data[i][1] - t * eStdResidualList[i], eList.data[i][1] + t * eStdResidualList[i]]; // console.log(\"[x, y1, y2]\", cbDataTmp);\n\n    return cbDataTmp;\n  });\n  return cb;\n}\nexport function combine(a) {\n  var min = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 1;\n\n  var fn = function fn(n, src, got, all) {\n    if (n === 0) {\n      if (got.length > 0) {\n        all[all.length] = got;\n      }\n\n      return;\n    }\n\n    for (var j = 0; j < src.length; j++) {\n      fn(n - 1, src.slice(j + 1), got.concat([src[j]]), all);\n    }\n\n    return;\n  };\n\n  var all = [];\n\n  for (var i = min; i < a.length; i++) {\n    fn(i, a, [], all);\n  }\n\n  all.push(a);\n  return all;\n}","map":null,"metadata":{},"sourceType":"module"}