{"ast":null,"code":"function _defineProperty(obj, key, value) {\n  if (key in obj) {\n    Object.defineProperty(obj, key, {\n      value: value,\n      enumerable: true,\n      configurable: true,\n      writable: true\n    });\n  } else {\n    obj[key] = value;\n  }\n\n  return obj;\n} //\n// Private component used by `b-form-datepicker` and `b-form-timepicker`\n//\n\n\nimport Vue from './vue';\nimport { attemptBlur, attemptFocus } from './dom';\nimport { toString } from './string';\nimport dropdownMixin, { commonProps } from '../mixins/dropdown';\nimport idMixin from '../mixins/id';\nimport normalizeSlotMixin from '../mixins/normalize-slot';\nimport { VBHover } from '../directives/hover/hover';\nimport { BIconChevronDown } from '../icons/icons'; // Re-export common dropdown props used for convenience\n\nexport var dropdownProps = commonProps; // @vue/component\n\nexport var BVFormBtnLabelControl = /*#__PURE__*/Vue.extend({\n  name: 'BVFormBtnLabelControl',\n  directives: {\n    BHover: VBHover\n  },\n  mixins: [idMixin, normalizeSlotMixin, dropdownMixin],\n  props: {\n    value: {\n      // This is the value placed on the hidden input\n      type: String,\n      \"default\": ''\n    },\n    formattedValue: {\n      // This is the value shown in the label\n      // Defaults back to `value`\n      type: String // default: null\n\n    },\n    placeholder: {\n      // This is the value placed on the hidden input when no value selected\n      type: String // default: null\n\n    },\n    labelSelected: {\n      // Value placed in sr-only span inside label when value is present\n      type: String // default: null\n\n    },\n    state: {\n      // Tri-state prop: `true`, `false`, or `null`\n      type: Boolean,\n      // We must explicitly default to `null` here otherwise\n      // Vue coerces `undefined` into Boolean `false`\n      \"default\": null\n    },\n    size: {\n      type: String // default: null\n\n    },\n    name: {\n      type: String // default: null\n\n    },\n    form: {\n      type: String // default: null\n\n    },\n    disabled: {\n      type: Boolean,\n      \"default\": false\n    },\n    readonly: {\n      type: Boolean,\n      \"default\": false\n    },\n    required: {\n      type: Boolean,\n      \"default\": false\n    },\n    lang: {\n      type: String // default: null\n\n    },\n    rtl: {\n      // Tri-state prop: `true`, `false` or `null`\n      type: Boolean,\n      // We must explicitly default to `null` here otherwise\n      // Vue coerces `undefined` into Boolean `false`\n      \"default\": null\n    },\n    buttonOnly: {\n      // When true, renders a btn-group wrapper and visually hides the label\n      type: Boolean,\n      \"default\": false\n    },\n    buttonVariant: {\n      // Applicable in button mode only\n      type: String,\n      \"default\": 'secondary'\n    },\n    menuClass: {\n      // Extra classes to apply to the `dropdown-menu` div\n      type: [String, Array, Object] // default: null\n\n    }\n  },\n  data: function data() {\n    return {\n      isHovered: false,\n      hasFocus: false\n    };\n  },\n  computed: {\n    idButton: function idButton() {\n      return this.safeId();\n    },\n    idLabel: function idLabel() {\n      return this.safeId('_value_');\n    },\n    idMenu: function idMenu() {\n      return this.safeId('_dialog_');\n    },\n    idWrapper: function idWrapper() {\n      return this.safeId('_outer_');\n    },\n    computedDir: function computedDir() {\n      return this.rtl === true ? 'rtl' : this.rtl === false ? 'ltr' : null;\n    }\n  },\n  methods: {\n    focus: function focus() {\n      if (!this.disabled) {\n        attemptFocus(this.$refs.toggle);\n      }\n    },\n    blur: function blur() {\n      if (!this.disabled) {\n        attemptBlur(this.$refs.toggle);\n      }\n    },\n    setFocus: function setFocus(evt) {\n      this.hasFocus = evt.type === 'focus';\n    },\n    handleHover: function handleHover(hovered) {\n      this.isHovered = hovered;\n    },\n\n    /* istanbul ignore next */\n    stopEvent: function stopEvent(evt)\n    /* istanbul ignore next */\n    {\n      evt.stopPropagation();\n    }\n  },\n  render: function render(h) {\n    var _class, _class2, _ref;\n\n    var idButton = this.idButton;\n    var idLabel = this.idLabel;\n    var idMenu = this.idMenu;\n    var idWrapper = this.idWrapper;\n    var disabled = this.disabled;\n    var readonly = this.readonly;\n    var required = this.required;\n    var isHovered = this.isHovered;\n    var hasFocus = this.hasFocus;\n    var state = this.state;\n    var visible = this.visible;\n    var size = this.size;\n    var value = toString(this.value) || '';\n    var labelSelected = this.labelSelected;\n    var buttonOnly = !!this.buttonOnly;\n    var buttonVariant = this.buttonVariant;\n    var btnScope = {\n      isHovered: isHovered,\n      hasFocus: hasFocus,\n      state: state,\n      opened: visible\n    };\n    var $button = h('button', {\n      ref: 'toggle',\n      staticClass: 'btn',\n      \"class\": (_class = {}, _defineProperty(_class, \"btn-\".concat(buttonVariant), buttonOnly), _defineProperty(_class, \"btn-\".concat(size), !!size), _defineProperty(_class, 'h-auto', !buttonOnly), _defineProperty(_class, 'dropdown-toggle', buttonOnly), _defineProperty(_class, 'dropdown-toggle-no-caret', buttonOnly), _class),\n      attrs: {\n        id: idButton,\n        type: 'button',\n        disabled: disabled,\n        'aria-haspopup': 'dialog',\n        'aria-expanded': visible ? 'true' : 'false',\n        'aria-invalid': state === false || required && !value ? 'true' : null,\n        'aria-required': required ? 'true' : null\n      },\n      directives: [{\n        name: 'b-hover',\n        value: this.handleHover\n      }],\n      on: {\n        mousedown: this.onMousedown,\n        click: this.toggle,\n        keydown: this.toggle,\n        // Handle ENTER, SPACE and DOWN\n        '!focus': this.setFocus,\n        '!blur': this.setFocus\n      }\n    }, [this.hasNormalizedSlot('button-content') ? this.normalizeSlot('button-content', btnScope) :\n    /* istanbul ignore next */\n    h(BIconChevronDown, {\n      props: {\n        scale: 1.25\n      }\n    })]); // Hidden input\n\n    var $hidden = h();\n\n    if (this.name && !disabled) {\n      $hidden = h('input', {\n        attrs: {\n          type: 'hidden',\n          name: this.name || null,\n          form: this.form || null,\n          value: value\n        }\n      });\n    } // Dropdown content\n\n\n    var $menu = h('div', {\n      ref: 'menu',\n      staticClass: 'dropdown-menu',\n      \"class\": [this.menuClass, {\n        show: visible,\n        'dropdown-menu-right': this.right\n      }],\n      attrs: {\n        id: idMenu,\n        role: 'dialog',\n        tabindex: '-1',\n        'aria-modal': 'false',\n        'aria-labelledby': idLabel\n      },\n      on: {\n        keydown: this.onKeydown // Handle ESC\n\n      }\n    }, [this.normalizeSlot('default', {\n      opened: visible\n    })]); // Value label\n\n    var $label = h('label', {\n      staticClass: 'form-control text-break text-wrap bg-transparent h-auto',\n      \"class\": (_class2 = {\n        // Hidden in button only mode\n        'sr-only': buttonOnly,\n        // Mute the text if showing the placeholder\n        'text-muted': !value\n      }, _defineProperty(_class2, \"form-control-\".concat(size), !!size), _defineProperty(_class2, 'is-invalid', state === false), _defineProperty(_class2, 'is-valid', state === true), _class2),\n      attrs: {\n        id: idLabel,\n        \"for\": idButton,\n        'aria-invalid': state === false || required && !value ? 'true' : null,\n        'aria-required': required ? 'true' : null\n      },\n      directives: [{\n        name: 'b-hover',\n        value: this.handleHover\n      }],\n      on: {\n        // Disable bubbling of the click event to\n        // prevent menu from closing and re-opening\n        '!click': this.stopEvent\n      }\n    }, [value ? this.formattedValue || value : this.placeholder || '', // Add the selected label for screen readers when a value is provided\n    value && labelSelected ? h('bdi', {\n      staticClass: 'sr-only'\n    }, labelSelected) : '']); // Return the custom form control wrapper\n\n    return h('div', {\n      staticClass: 'b-form-btn-label-control dropdown',\n      \"class\": [this.directionClass, (_ref = {\n        'btn-group': buttonOnly,\n        'form-control': !buttonOnly\n      }, _defineProperty(_ref, \"form-control-\".concat(size), !!size && !buttonOnly), _defineProperty(_ref, 'd-flex', !buttonOnly), _defineProperty(_ref, 'h-auto', !buttonOnly), _defineProperty(_ref, 'align-items-stretch', !buttonOnly), _defineProperty(_ref, \"focus\", hasFocus && !buttonOnly), _defineProperty(_ref, \"show\", visible), _defineProperty(_ref, 'is-valid', state === true), _defineProperty(_ref, 'is-invalid', state === false), _ref)],\n      attrs: {\n        id: idWrapper,\n        role: buttonOnly ? null : 'group',\n        lang: this.lang || null,\n        dir: this.computedDir,\n        'aria-disabled': disabled,\n        'aria-readonly': readonly && !disabled,\n        'aria-labelledby': idLabel,\n        'aria-invalid': state === false || required && !value ? 'true' : null,\n        'aria-required': required ? 'true' : null\n      }\n    }, [$button, $hidden, $menu, $label]);\n  }\n});","map":null,"metadata":{},"sourceType":"module"}