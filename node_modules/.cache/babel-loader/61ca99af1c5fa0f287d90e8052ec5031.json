{"ast":null,"code":"function _typeof(obj) { \"@babel/helpers - typeof\"; if (typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; }; } return _typeof(obj); }\n\nfunction _templateObject() {\n  var data = _taggedTemplateLiteral([\"\\n    Component {\\n        @for (d1, pos) in data.values {\\n            @let x = getX(d1.pos)\\n            @let values = getValues(d1)\\n            Component {\\n                key = pos\\n                @for (d2, index) in values {\\n                    @let y = getY(d2.value)\\n                    Component {\\n                        key = \\\"s\\\" + pos + \\\"p\\\" + index\\n                        @props dotOpts(x, y, d2.offset)\\n                        @yield children with { pos, index } default {\\n                            Circle.centered {\\n                                r = prop.r\\n                                fill = prop.fill\\n                                stroke = prop.stroke\\n                                @props prop.dotOptions\\n                            }\\n                        }\\n                    }\\n                }\\n            }\\n        }\\n    }\\n    \"]);\n\n  _templateObject = function _templateObject() {\n    return data;\n  };\n\n  return data;\n}\n\nfunction _taggedTemplateLiteral(strings, raw) { if (!raw) { raw = strings.slice(0); } return Object.freeze(Object.defineProperties(strings, { raw: { value: Object.freeze(raw) } })); }\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }\n\nfunction _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }\n\nfunction _get(target, property, receiver) { if (typeof Reflect !== \"undefined\" && Reflect.get) { _get = Reflect.get; } else { _get = function _get(target, property, receiver) { var base = _superPropBase(target, property); if (!base) return; var desc = Object.getOwnPropertyDescriptor(base, property); if (desc.get) { return desc.get.call(receiver); } return desc.value; }; } return _get(target, property, receiver || target); }\n\nfunction _superPropBase(object, property) { while (!Object.prototype.hasOwnProperty.call(object, property)) { object = _getPrototypeOf(object); if (object === null) break; } return object; }\n\nfunction _inherits(subClass, superClass) { if (typeof superClass !== \"function\" && superClass !== null) { throw new TypeError(\"Super expression must either be null or a function\"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }\n\nfunction _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }\n\nfunction _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }\n\nfunction _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === \"object\" || typeof call === \"function\")) { return call; } return _assertThisInitialized(self); }\n\nfunction _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\"); } return self; }\n\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Date.prototype.toString.call(Reflect.construct(Date, [], function () {})); return true; } catch (e) { return false; } }\n\nfunction _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }\n\nimport { template } from \"../../template/tag\";\nimport { BaseChart } from \"./base-chart\";\nexport var Scatters1D = /*#__PURE__*/function (_BaseChart) {\n  _inherits(Scatters1D, _BaseChart);\n\n  var _super = _createSuper(Scatters1D);\n\n  function Scatters1D() {\n    var _this;\n\n    _classCallCheck(this, Scatters1D);\n\n    _this = _super.apply(this, arguments);\n    _this.render = template(_templateObject());\n    _this._layer = {};\n    _this._layers = [new Set()];\n    return _this;\n  }\n\n  _createClass(Scatters1D, [{\n    key: \"willRender\",\n    value: function willRender() {\n      var _this2 = this;\n\n      _get(_getPrototypeOf(Scatters1D.prototype), \"willRender\", this).call(this);\n\n      if (this.layerNotSet) {\n        this.resetLayer();\n\n        if (Array.isArray(this.data.values)) {\n          this.data.values.forEach(function (d1) {\n            var result = _this2.getValues(d1).map(function (d2) {\n              return {\n                value: d2,\n                offset: _this2.setLayer(_this2.getY(d2), d1.pos)\n              };\n            });\n\n            _this2.setValues(d1, result);\n          });\n        } else {\n          Object.keys(this.data.values).forEach(function (k) {\n            var d1 = _this2.data.values[k];\n\n            var result = _this2.getValues(d1).map(function (d2) {\n              return {\n                value: d2,\n                offset: _this2.setLayer(_this2.getY(d2), d1.pos)\n              };\n            });\n\n            _this2.setValues(d1, result);\n          });\n        }\n      }\n    }\n  }, {\n    key: \"resetLayer\",\n    value: function resetLayer() {\n      this._layer = {};\n      this._layers = [new Set()];\n    }\n  }, {\n    key: \"getDistance\",\n    value: function getDistance(c1, c2) {\n      return Math.sqrt(Math.pow(c1[0] - c2[0], 2) + Math.pow(c1[1] - c2[1], 2));\n    } // @ts-ignore\n\n  }, {\n    key: \"getValues\",\n    value: function getValues(d) {\n      if (Array.isArray(d.data)) return d.data;else if (\"values\" in d.data) return d.data.values;\n      throw new Error(\"Scatters1D: Unknown data format.\");\n    }\n  }, {\n    key: \"setValues\",\n    value: function setValues(d, values) {\n      if (Array.isArray(d.data)) d.data = values;else if (\"values\" in d.data) d.data.values = values;else throw new Error(\"Scatters1D: Unknown data format.\");\n    }\n  }, {\n    key: \"setLayer\",\n    value: function setLayer(y, pos) {\n      var r = this.prop.r;\n      var fy = Math.round(y);\n      if (!this._layer[pos]) this._layer[pos] = 0; // layout\n\n      var placedLayer = null;\n\n      for (var l = 0; l <= this._layer[pos]; l++) {\n        var occupied = false;\n\n        for (var i = Math.max(fy - r, 0); i <= fy + r; i++) {\n          if (this._layers[l].has(\"\".concat(i, \"-\").concat(pos))) {\n            occupied = true;\n            break;\n          }\n        }\n\n        if (!occupied) {\n          this._layers[l].add(\"\".concat(fy, \"-\").concat(pos));\n\n          placedLayer = l;\n          break;\n        }\n      }\n\n      if (placedLayer === null) {\n        this._layer[pos]++;\n        placedLayer = this._layer[pos]; // @ts-ignore\n\n        this._layers[placedLayer] = new Set([fy]);\n      } // @ts-ignore\n\n\n      return (Math.floor((placedLayer - 1) / 2) + 1) * 2 * r * (placedLayer % 2 ? 1 : -1);\n    } // @ts-ignore\n\n  }, {\n    key: \"dotOpts\",\n    value: function dotOpts(x, y, offset) {\n      return this.flippedOpts({\n        x: x + offset,\n        y: y\n      });\n    }\n  }, {\n    key: \"defaultProp\",\n    value: function defaultProp() {\n      return Object.assign(Object.assign({}, _get(_getPrototypeOf(Scatters1D.prototype), \"defaultProp\", this).call(this)), {\n        r: 2,\n        fill: \"#aaa\"\n      });\n    }\n  }, {\n    key: \"layerNotSet\",\n    get: function get() {\n      if (Array.isArray(this.data.values)) {\n        var arr = this.getValues(this.data.values[0]);\n        if (Object.keys(arr[0]).indexOf(\"offset\") >= 0) return false;\n      } else {\n        var k0 = Object.keys(this.data.values)[0];\n\n        var _arr = this.getValues(this.data.values[k0]);\n\n        if (Object.keys(_arr[0]).indexOf(\"offset\") >= 0) return false;\n      }\n\n      return true;\n    }\n  }]);\n\n  return Scatters1D;\n}(BaseChart);","map":null,"metadata":{},"sourceType":"module"}