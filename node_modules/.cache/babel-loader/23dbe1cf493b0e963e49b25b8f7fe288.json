{"ast":null,"code":"function ownKeys(object, enumerableOnly) {\n  var keys = Object.keys(object);\n\n  if (Object.getOwnPropertySymbols) {\n    var symbols = Object.getOwnPropertySymbols(object);\n    if (enumerableOnly) symbols = symbols.filter(function (sym) {\n      return Object.getOwnPropertyDescriptor(object, sym).enumerable;\n    });\n    keys.push.apply(keys, symbols);\n  }\n\n  return keys;\n}\n\nfunction _objectSpread(target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = arguments[i] != null ? arguments[i] : {};\n\n    if (i % 2) {\n      ownKeys(Object(source), true).forEach(function (key) {\n        _defineProperty(target, key, source[key]);\n      });\n    } else if (Object.getOwnPropertyDescriptors) {\n      Object.defineProperties(target, Object.getOwnPropertyDescriptors(source));\n    } else {\n      ownKeys(Object(source)).forEach(function (key) {\n        Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));\n      });\n    }\n  }\n\n  return target;\n}\n\nfunction _defineProperty(obj, key, value) {\n  if (key in obj) {\n    Object.defineProperty(obj, key, {\n      value: value,\n      enumerable: true,\n      configurable: true,\n      writable: true\n    });\n  } else {\n    obj[key] = value;\n  }\n\n  return obj;\n}\n\nimport Vue from '../../utils/vue';\nimport { arrayIncludes } from '../../utils/array';\nimport { getComponentConfig } from '../../utils/config';\nimport { htmlOrText } from '../../utils/html';\nimport dropdownMixin from '../../mixins/dropdown';\nimport idMixin from '../../mixins/id';\nimport normalizeSlotMixin from '../../mixins/normalize-slot';\nimport { BButton } from '../button/button'; // --- Constants ---\n\nvar NAME = 'BDropdown'; // --- Props ---\n\nexport var props = {\n  text: {\n    // Button label\n    type: String,\n    \"default\": ''\n  },\n  html: {\n    // Button label\n    type: String // default: undefined\n\n  },\n  variant: {\n    type: String,\n    \"default\": function _default() {\n      return getComponentConfig(NAME, 'variant');\n    }\n  },\n  size: {\n    type: String,\n    \"default\": function _default() {\n      return getComponentConfig(NAME, 'size');\n    }\n  },\n  block: {\n    type: Boolean,\n    \"default\": false\n  },\n  menuClass: {\n    type: [String, Array, Object] // default: null\n\n  },\n  toggleTag: {\n    type: String,\n    \"default\": 'button'\n  },\n  toggleText: {\n    // This really should be toggleLabel\n    type: String,\n    \"default\": function _default() {\n      return getComponentConfig(NAME, 'toggleText');\n    }\n  },\n  toggleClass: {\n    type: [String, Array, Object] // default: null\n\n  },\n  noCaret: {\n    type: Boolean,\n    \"default\": false\n  },\n  split: {\n    type: Boolean,\n    \"default\": false\n  },\n  splitHref: {\n    type: String // default: undefined\n\n  },\n  splitTo: {\n    type: [String, Object] // default: undefined\n\n  },\n  splitVariant: {\n    type: String,\n    \"default\": function _default() {\n      return getComponentConfig(NAME, 'splitVariant');\n    }\n  },\n  splitClass: {\n    type: [String, Array, Object] // default: null\n\n  },\n  splitButtonType: {\n    type: String,\n    \"default\": 'button',\n    validator: function validator(value) {\n      return arrayIncludes(['button', 'submit', 'reset'], value);\n    }\n  },\n  lazy: {\n    // If true, only render menu contents when open\n    type: Boolean,\n    \"default\": false\n  },\n  role: {\n    type: String,\n    \"default\": 'menu'\n  }\n}; // --- Main component ---\n// @vue/component\n\nexport var BDropdown = /*#__PURE__*/Vue.extend({\n  name: NAME,\n  mixins: [idMixin, dropdownMixin, normalizeSlotMixin],\n  props: props,\n  computed: {\n    dropdownClasses: function dropdownClasses() {\n      var block = this.block,\n          split = this.split,\n          boundary = this.boundary;\n      return [this.directionClass, {\n        show: this.visible,\n        // The 'btn-group' class is required in `split` mode for button alignment\n        // It needs also to be applied when `block` is disabled to allow multiple\n        // dropdowns to be aligned one line\n        'btn-group': split || !block,\n        // When `block` is enabled and we are in `split` mode the 'd-flex' class\n        // needs to be applied to allow the buttons to stretch to full width\n        'd-flex': block && split,\n        // Position `static` is needed to allow menu to \"breakout\" of the `scrollParent`\n        // boundaries when boundary is anything other than `scrollParent`\n        // See: https://github.com/twbs/bootstrap/issues/24251#issuecomment-341413786\n        'position-static': boundary !== 'scrollParent' || !boundary\n      }];\n    },\n    menuClasses: function menuClasses() {\n      return [this.menuClass, {\n        'dropdown-menu-right': this.right,\n        show: this.visible\n      }];\n    },\n    toggleClasses: function toggleClasses() {\n      var split = this.split;\n      return [this.toggleClass, {\n        'dropdown-toggle-split': split,\n        'dropdown-toggle-no-caret': this.noCaret && !split\n      }];\n    }\n  },\n  render: function render(h) {\n    var variant = this.variant,\n        size = this.size,\n        block = this.block,\n        disabled = this.disabled,\n        split = this.split,\n        role = this.role;\n    var commonProps = {\n      variant: variant,\n      size: size,\n      block: block,\n      disabled: disabled\n    };\n    var $buttonContent = this.normalizeSlot('button-content');\n    var buttonContentProps = this.hasNormalizedSlot('button-content') ? {} : htmlOrText(this.html, this.text);\n    var $split = h();\n\n    if (split) {\n      var splitTo = this.splitTo,\n          splitHref = this.splitHref,\n          splitButtonType = this.splitButtonType;\n\n      var btnProps = _objectSpread(_objectSpread({}, commonProps), {}, {\n        variant: this.splitVariant || this.variant\n      }); // We add these as needed due to <router-link> issues with\n      // defined property with `undefined`/`null` values\n\n\n      if (splitTo) {\n        btnProps.to = splitTo;\n      } else if (splitHref) {\n        btnProps.href = splitHref;\n      } else if (splitButtonType) {\n        btnProps.type = splitButtonType;\n      }\n\n      $split = h(BButton, {\n        \"class\": this.splitClass,\n        attrs: {\n          id: this.safeId('_BV_button_')\n        },\n        props: btnProps,\n        domProps: buttonContentProps,\n        on: {\n          click: this.onSplitClick\n        },\n        ref: 'button'\n      }, [$buttonContent]);\n    }\n\n    var $toggle = h(BButton, {\n      staticClass: 'dropdown-toggle',\n      \"class\": this.toggleClasses,\n      attrs: {\n        id: this.safeId('_BV_toggle_'),\n        'aria-haspopup': 'true',\n        'aria-expanded': this.visible ? 'true' : 'false'\n      },\n      props: _objectSpread(_objectSpread({}, commonProps), {}, {\n        tag: this.toggleTag,\n        block: block && !split\n      }),\n      domProps: split ? {} : buttonContentProps,\n      on: {\n        mousedown: this.onMousedown,\n        click: this.toggle,\n        keydown: this.toggle // Handle ENTER, SPACE and DOWN\n\n      },\n      ref: 'toggle'\n    }, [split ? h('span', {\n      \"class\": ['sr-only']\n    }, [this.toggleText]) : $buttonContent]);\n    var $menu = h('ul', {\n      staticClass: 'dropdown-menu',\n      \"class\": this.menuClasses,\n      attrs: {\n        role: role,\n        tabindex: '-1',\n        'aria-labelledby': this.safeId(split ? '_BV_button_' : '_BV_toggle_')\n      },\n      on: {\n        keydown: this.onKeydown // Handle UP, DOWN and ESC\n\n      },\n      ref: 'menu'\n    }, !this.lazy || this.visible ? this.normalizeSlot('default', {\n      hide: this.hide\n    }) : [h()]);\n    return h('div', {\n      staticClass: 'dropdown b-dropdown',\n      \"class\": this.dropdownClasses,\n      attrs: {\n        id: this.safeId()\n      }\n    }, [$split, $toggle, $menu]);\n  }\n});","map":null,"metadata":{},"sourceType":"module"}