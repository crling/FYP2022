{"ast":null,"code":"import { deepFreeze } from './object'; // --- General BootstrapVue configuration ---\n// NOTES\n//\n// The global config SHALL NOT be used to set defaults for Boolean props, as the props\n// would loose their semantic meaning, and force people writing 3rd party components to\n// explicitly set a true or false value using the v-bind syntax on boolean props\n//\n// Supported config values (depending on the prop's supported type(s)):\n// `String`, `Array`, `Object`, `null` or `undefined`\n// BREAKPOINT DEFINITIONS\n//\n// Some components (`<b-col>` and `<b-form-group>`) generate props based on breakpoints,\n// and this occurs when the component is first loaded (evaluated), which may happen\n// before the config is created/modified\n//\n// To get around this we make these components' props async (lazy evaluation)\n// The component definition is only called/executed when the first access to the\n// component is used (and cached on subsequent uses)\n// PROP DEFAULTS\n//\n// For default values on props, we use the default value factory function approach so\n// that the default values are pulled in at each component instantiation\n//\n//  props: {\n//    variant: {\n//      type: String,\n//      default: () => getConfigComponent('BAlert', 'variant')\n//    }\n//  }\n//\n// We also provide a cached getter for breakpoints, which are \"frozen\" on first access\n// prettier-ignore\n\nexport default deepFreeze({\n  // Breakpoints\n  breakpoints: ['xs', 'sm', 'md', 'lg', 'xl'],\n  // Form controls\n  formControls: {\n    size: undefined\n  },\n  // Component specific defaults are keyed by the component\n  // name (PascalCase) and prop name (camelCase)\n  BAlert: {\n    dismissLabel: 'Close',\n    variant: 'info'\n  },\n  BAvatar: {\n    variant: 'secondary',\n    badgeVariant: 'primary'\n  },\n  BBadge: {\n    variant: 'secondary'\n  },\n  BButton: {\n    size: undefined,\n    variant: 'secondary'\n  },\n  BButtonClose: {\n    content: '&times;',\n    // `textVariant` is `null` to inherit the current text color\n    textVariant: undefined,\n    ariaLabel: 'Close'\n  },\n  BCalendar: {\n    // BFormDate will choose these first if not provided in BFormDate section\n    labelPrevDecade: 'Previous decade',\n    labelPrevYear: 'Previous year',\n    labelPrevMonth: 'Previous month',\n    labelCurrentMonth: 'Current month',\n    labelNextMonth: 'Next month',\n    labelNextYear: 'Next year',\n    labelNextDecade: 'Next decade',\n    labelToday: 'Today',\n    labelSelected: 'Selected date',\n    labelNoDateSelected: 'No date selected',\n    labelCalendar: 'Calendar',\n    labelNav: 'Calendar navigation',\n    labelHelp: 'Use cursor keys to navigate calendar dates'\n  },\n  BCardSubTitle: {\n    // `<b-card>` and `<b-card-body>` also inherit this prop\n    subTitleTextVariant: 'muted'\n  },\n  BCarousel: {\n    labelPrev: 'Previous Slide',\n    labelNext: 'Next Slide',\n    labelGotoSlide: 'Goto Slide',\n    labelIndicators: 'Select a slide to display'\n  },\n  BDropdown: {\n    toggleText: 'Toggle Dropdown',\n    size: undefined,\n    variant: 'secondary',\n    splitVariant: undefined\n  },\n  BFormDatepicker: {\n    // BFormDatepicker will choose from BCalendar first if not provided here\n    labelPrevDecade: undefined,\n    labelPrevYear: undefined,\n    labelPrevMonth: undefined,\n    labelCurrentMonth: undefined,\n    labelNextMonth: undefined,\n    labelNextYear: undefined,\n    labelNextDecade: undefined,\n    labelToday: undefined,\n    labelSelected: undefined,\n    labelNoDateSelected: undefined,\n    labelCalendar: undefined,\n    labelNav: undefined,\n    labelHelp: undefined,\n    // These props are specific to BFormDatepicker\n    labelTodayButton: 'Select today',\n    labelResetButton: 'Reset',\n    labelCloseButton: 'Close'\n  },\n  BFormFile: {\n    browseText: 'Browse',\n    // Chrome default file prompt\n    placeholder: 'No file chosen',\n    dropPlaceholder: 'Drop files here'\n  },\n  BFormRating: {\n    variant: null,\n    color: null\n  },\n  BFormTag: {\n    removeLabel: 'Remove tag',\n    variant: 'secondary'\n  },\n  BFormTags: {\n    addButtonText: 'Add',\n    addButtonVariant: 'outline-secondary',\n    duplicateTagText: 'Duplicate tag(s)',\n    invalidTagText: 'Invalid tag(s)',\n    placeholder: 'Add tag...',\n    tagRemoveLabel: 'Remove tag',\n    tagRemovedLabel: 'Tag removed',\n    tagVariant: 'secondary'\n  },\n  BFormText: {\n    textVariant: 'muted'\n  },\n  BFormTimepicker: {\n    // Fallback to BTime\n    labelNoTimeSelected: undefined,\n    labelSelected: undefined,\n    labelHours: undefined,\n    labelMinutes: undefined,\n    labelSeconds: undefined,\n    labelAmpm: undefined,\n    labelAm: undefined,\n    labelPm: undefined,\n    // Fallback to BTime then BFormSpinbutton\n    labelDecrement: undefined,\n    labelIncrement: undefined,\n    // These props are specific to BFormTimepicker\n    labelNowButton: 'Select now',\n    labelResetButton: 'Reset',\n    labelCloseButton: 'Close'\n  },\n  BFormSpinbutton: {\n    labelDecrement: 'Decrement',\n    labelIncrement: 'Increment'\n  },\n  BImg: {\n    blankColor: 'transparent'\n  },\n  BImgLazy: {\n    blankColor: 'transparent'\n  },\n  BInputGroup: {\n    size: undefined\n  },\n  BJumbotron: {\n    bgVariant: undefined,\n    borderVariant: undefined,\n    textVariant: undefined\n  },\n  BLink: {\n    routerComponentName: undefined\n  },\n  BListGroupItem: {\n    variant: undefined\n  },\n  BModal: {\n    titleTag: 'h5',\n    size: 'md',\n    headerBgVariant: undefined,\n    headerBorderVariant: undefined,\n    headerTextVariant: undefined,\n    headerCloseVariant: undefined,\n    bodyBgVariant: undefined,\n    bodyTextVariant: undefined,\n    footerBgVariant: undefined,\n    footerBorderVariant: undefined,\n    footerTextVariant: undefined,\n    cancelTitle: 'Cancel',\n    cancelVariant: 'secondary',\n    okTitle: 'OK',\n    okVariant: 'primary',\n    headerCloseContent: '&times;',\n    headerCloseLabel: 'Close'\n  },\n  BNavbar: {\n    variant: null\n  },\n  BNavbarToggle: {\n    label: 'Toggle navigation'\n  },\n  BPagination: {\n    size: undefined\n  },\n  BPaginationNav: {\n    size: undefined\n  },\n  BPopover: {\n    boundary: 'scrollParent',\n    boundaryPadding: 5,\n    customClass: undefined,\n    delay: 50,\n    variant: undefined\n  },\n  BProgress: {\n    variant: undefined\n  },\n  BProgressBar: {\n    variant: undefined\n  },\n  BSpinner: {\n    variant: undefined\n  },\n  BSidebar: {\n    bgVariant: 'light',\n    textVariant: 'dark',\n    shadow: false,\n    width: undefined,\n    tag: 'div',\n    backdropVariant: 'dark'\n  },\n  BTable: {\n    selectedVariant: 'active',\n    headVariant: undefined,\n    footVariant: undefined\n  },\n  BTime: {\n    labelNoTimeSelected: 'No time selected',\n    labelSelected: 'Selected time',\n    labelHours: 'Hours',\n    labelMinutes: 'Minutes',\n    labelSeconds: 'Seconds',\n    labelAmpm: 'AM/PM',\n    // It would be nice to be able to get these from Intl.DateTimeFormat somehow\n    labelAm: 'AM',\n    labelPm: 'PM',\n    // The following inherit from BFormSpinbutton if not provided\n    labelIncrement: undefined,\n    labelDecrement: undefined\n  },\n  BToast: {\n    toaster: 'b-toaster-top-right',\n    autoHideDelay: 5000,\n    variant: undefined,\n    toastClass: undefined,\n    headerClass: undefined,\n    bodyClass: undefined\n  },\n  BToaster: {\n    ariaLive: undefined,\n    ariaAtomic: undefined,\n    role: undefined\n  },\n  BTooltip: {\n    boundary: 'scrollParent',\n    boundaryPadding: 5,\n    customClass: undefined,\n    delay: 50,\n    variant: undefined\n  }\n});","map":null,"metadata":{},"sourceType":"module"}