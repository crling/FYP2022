{"ast":null,"code":"function _templateObject() {\n  var data = _taggedTemplateLiteral([\"\\n        Component{\\n            @if prop.treeNode.children {\\n                @if prop.treeNode.length {\\n                    Path {\\n                        d = computeLinkPath(prop.treeNode, prop.parentsDep, prop.parentsPos, prop.gravity)\\n                        stroke = prop.strokeFill || @color(\\\"line\\\")\\n                        fill = \\\"none\\\"\\n                    }\\n                }\\n                @let childProps = {\\n                    gravity: prop.gravity,\\n                    depthUnit: prop.depthUnit,\\n                    posUnit: prop.posUnit,\\n                    parentsPos: prop.treeNode.position,\\n                    parentsDep: prop.treeNode.depth,\\n                }\\n                BinaryTree {\\n                    treeNode = prop.treeNode.children[0]\\n                    @props childProps\\n                }\\n                BinaryTree {\\n                    treeNode = prop.treeNode.children[1]\\n                    @props childProps\\n                }\\n            }\\n            @else {\\n                Component {\\n                    Path {\\n                        d = computeLinkPath(prop.treeNode, prop.parentsDep, prop.parentsPos, prop.gravity)\\n                        stroke = prop.strokeFill || @color(\\\"line\\\")\\n                        fill = \\\"none\\\"\\n                    }\\n                    // Circle {\\n                    //     rx = depthUnit * prop.treeNode.depth\\n                    //     ry = posUnit * prop.treeNode.position\\n                    //     r = 3\\n                    //     fill = \\\"grey\\\"\\n                    // }\\n                    // Text {\\n                    //     text = prop.treeNode.name\\n                    //     x = depthUnit * prop.treeNode.depth + 5\\n                    //     y = posUnit * prop.treeNode.position\\n                    // }\\n                }\\n            }\\n        }\"]);\n\n  _templateObject = function _templateObject() {\n    return data;\n  };\n\n  return data;\n}\n\nfunction _taggedTemplateLiteral(strings, raw) { if (!raw) { raw = strings.slice(0); } return Object.freeze(Object.defineProperties(strings, { raw: { value: Object.freeze(raw) } })); }\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }\n\nfunction _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }\n\nfunction _inherits(subClass, superClass) { if (typeof superClass !== \"function\" && superClass !== null) { throw new TypeError(\"Super expression must either be null or a function\"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }\n\nfunction _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }\n\nfunction _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }\n\nfunction _possibleConstructorReturn(self, call) { if (call && (typeof call === \"object\" || typeof call === \"function\")) { return call; } return _assertThisInitialized(self); }\n\nfunction _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\"); } return self; }\n\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Date.prototype.toString.call(Reflect.construct(Date, [], function () {})); return true; } catch (e) { return false; } }\n\nfunction _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }\n\nimport { Component } from \"crux/dist/element\";\nexport var Gravity;\n\n(function (Gravity) {\n  Gravity[Gravity[\"Top\"] = 0] = \"Top\";\n  Gravity[Gravity[\"Right\"] = 1] = \"Right\";\n  Gravity[Gravity[\"Bottom\"] = 2] = \"Bottom\";\n  Gravity[Gravity[\"Left\"] = 3] = \"Left\";\n})(Gravity || (Gravity = {}));\n\nexport var BinaryTree = /*#__PURE__*/function (_Component) {\n  _inherits(BinaryTree, _Component);\n\n  var _super = _createSuper(BinaryTree);\n\n  function BinaryTree() {\n    var _this;\n\n    _classCallCheck(this, BinaryTree);\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    _this = _super.call.apply(_super, [this].concat(args));\n    _this.depthUnit = void 0;\n    _this.posUnit = void 0;\n    return _this;\n  }\n\n  _createClass(BinaryTree, [{\n    key: \"render\",\n    value: function render() {\n      return this.t(_templateObject());\n    }\n  }, {\n    key: \"didCreate\",\n    value: function didCreate() {\n      this.depthUnit = this.prop.depthUnit;\n      this.posUnit = this.prop.posUnit;\n    }\n  }, {\n    key: \"computeLinkPath\",\n    value: function computeLinkPath(node, pDepth, pPos, g) {\n      switch (g) {\n        case Gravity.Bottom:\n          return \"M \".concat(pPos * this.posUnit, \" \").concat(pDepth * this.depthUnit, \"\\n                    L \").concat(node.position * this.posUnit, \" \").concat(pDepth * this.depthUnit, \"\\n                    L \").concat(node.position * this.posUnit, \" \").concat(node.depth * this.depthUnit);\n\n        case Gravity.Right:\n          return \"M \".concat(pDepth * this.depthUnit, \" \").concat(pPos * this.posUnit, \"\\n                    L \").concat(pDepth * this.depthUnit, \" \").concat(node.position * this.posUnit, \"\\n                    L \").concat(node.depth * this.depthUnit, \" \").concat(node.position * this.posUnit);\n      }\n    }\n  }]);\n\n  return BinaryTree;\n}(Component);","map":{"version":3,"sources":["/Users/wangzhenyu/Desktop/fyp_workspace/meta_platform/app/javascript/viz/signed-heatmap/binary-tree.ts"],"names":["Component","Gravity","BinaryTree","depthUnit","posUnit","t","prop","node","pDepth","pPos","g","Bottom","position","depth","Right"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA,SAASA,SAAT,QAA2C,mBAA3C;AAEA,WAAYC,OAAZ;;WAAYA,O;AAAAA,EAAAA,O,CAAAA,O;AAAAA,EAAAA,O,CAAAA,O;AAAAA,EAAAA,O,CAAAA,O;AAAAA,EAAAA,O,CAAAA,O;GAAAA,O,KAAAA,O;;AAqBZ,WAAaC,UAAb;AAAA;;AAAA;;AAAA;AAAA;;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA,UAEYC,SAFZ;AAAA,UAGYC,OAHZ;AAAA;AAAA;;AAAA;AAAA;AAAA,6BAKa;AACL,aAAO,KAAKC,CAAZ;AAgDH;AAtDL;AAAA;AAAA,gCAwDuB;AACf,WAAKF,SAAL,GAAiB,KAAKG,IAAL,CAAUH,SAA3B;AACA,WAAKC,OAAL,GAAe,KAAKE,IAAL,CAAUF,OAAzB;AACH;AA3DL;AAAA;AAAA,oCA6DoBG,IA7DpB,EA6D0BC,MA7D1B,EA6DkCC,IA7DlC,EA6DwCC,CA7DxC,EA6DmD;AAC3C,cAAQA,CAAR;AACI,aAAKT,OAAO,CAACU,MAAb;AACI,6BAAYF,IAAI,GAAG,KAAKL,OAAxB,cAAmCI,MAAM,GAAG,KAAKL,SAAjD,qCACQI,IAAI,CAACK,QAAL,GAAgB,KAAKR,OAD7B,cACwCI,MAAM,GAAG,KAAKL,SADtD,qCAEQI,IAAI,CAACK,QAAL,GAAgB,KAAKR,OAF7B,cAEwCG,IAAI,CAACM,KAAL,GAAa,KAAKV,SAF1D;;AAGJ,aAAKF,OAAO,CAACa,KAAb;AACI,6BAAYN,MAAM,GAAG,KAAKL,SAA1B,cAAuCM,IAAI,GAAG,KAAKL,OAAnD,qCACQI,MAAM,GAAG,KAAKL,SADtB,cACmCI,IAAI,CAACK,QAAL,GAAgB,KAAKR,OADxD,qCAEQG,IAAI,CAACM,KAAL,GAAa,KAAKV,SAF1B,cAEuCI,IAAI,CAACK,QAAL,GAAgB,KAAKR,OAF5D;AANR;AAUH;AAxEL;;AAAA;AAAA,EAAgCJ,SAAhC","sourcesContent":["import { Component, ComponentOption } from \"crux/dist/element\";\n\nexport enum Gravity {\n    Top = 0, Right, Bottom, Left,\n}\n\nexport interface BinaryTreeOption extends ComponentOption {\n    treeNode: BinaryTreeNode;\n    parentsPos: number;\n    parentsDep: number;\n    depthUnit: number;\n    gravity: Gravity;\n    posUnit: number;\n    strokeFill: string;\n}\n\ninterface   BinaryTreeNode {\n    children?: BinaryTreeNode[];\n    name?: string;\n    depth?: number;\n    position: number;\n}\n\nexport class BinaryTree extends Component<BinaryTreeOption> {\n\n    private depthUnit: number;\n    private posUnit: number;\n\n    render() {\n        return this.t`\n        Component{\n            @if prop.treeNode.children {\n                @if prop.treeNode.length {\n                    Path {\n                        d = computeLinkPath(prop.treeNode, prop.parentsDep, prop.parentsPos, prop.gravity)\n                        stroke = prop.strokeFill || @color(\"line\")\n                        fill = \"none\"\n                    }\n                }\n                @let childProps = {\n                    gravity: prop.gravity,\n                    depthUnit: prop.depthUnit,\n                    posUnit: prop.posUnit,\n                    parentsPos: prop.treeNode.position,\n                    parentsDep: prop.treeNode.depth,\n                }\n                BinaryTree {\n                    treeNode = prop.treeNode.children[0]\n                    @props childProps\n                }\n                BinaryTree {\n                    treeNode = prop.treeNode.children[1]\n                    @props childProps\n                }\n            }\n            @else {\n                Component {\n                    Path {\n                        d = computeLinkPath(prop.treeNode, prop.parentsDep, prop.parentsPos, prop.gravity)\n                        stroke = prop.strokeFill || @color(\"line\")\n                        fill = \"none\"\n                    }\n                    // Circle {\n                    //     rx = depthUnit * prop.treeNode.depth\n                    //     ry = posUnit * prop.treeNode.position\n                    //     r = 3\n                    //     fill = \"grey\"\n                    // }\n                    // Text {\n                    //     text = prop.treeNode.name\n                    //     x = depthUnit * prop.treeNode.depth + 5\n                    //     y = posUnit * prop.treeNode.position\n                    // }\n                }\n            }\n        }`;\n\n    }\n\n    public didCreate() {\n        this.depthUnit = this.prop.depthUnit;\n        this.posUnit = this.prop.posUnit;\n    }\n\n    computeLinkPath(node, pDepth, pPos, g): string {\n        switch (g) {\n            case Gravity.Bottom:\n                return `M ${pPos * this.posUnit} ${pDepth * this.depthUnit}\n                    L ${node.position * this.posUnit} ${pDepth * this.depthUnit}\n                    L ${node.position * this.posUnit} ${node.depth * this.depthUnit}`;\n            case Gravity.Right:\n                return `M ${pDepth * this.depthUnit} ${pPos * this.posUnit}\n                    L ${pDepth * this.depthUnit} ${node.position * this.posUnit}\n                    L ${node.depth * this.depthUnit} ${node.position * this.posUnit}`;\n        }\n    }\n\n}\n"]},"metadata":{},"sourceType":"module"}