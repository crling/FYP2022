{"ast":null,"code":"function _typeof(obj) { \"@babel/helpers - typeof\"; if (typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; }; } return _typeof(obj); }\n\nfunction _templateObject() {\n  var data = _taggedTemplateLiteral([\"\\n    Component {\\n        @for (d, pos) in data.raw.values {\\n            Component {\\n                @let means = data.raw.means[pos]\\n\\n                key = \\\"b\\\" + pos\\n                anchor = getAnchor()\\n                @props containerOpts(pos)\\n\\n                Component {\\n                    anchor = getBoxAnchor()\\n                    @props whiskleOpts(d)\\n                    @yield whiskle with { data: d, pos } default {\\n                        @if flipped {\\n                            Line { y1 = 0; y2 = 100%; x1 = 0; x2 = 0 }\\n                            Line { y1 = 0; y2 = 100%; x1 = 100%; x2 = 100% }\\n                            Line { y1 = 50%; y2 = 50%; x1 = 0; x2 = 100% }\\n                        }\\n                        @else {\\n                            Line { x1 = 0; x2 = 100%; y1 = 0; y2 = 0 }\\n                            Line { x1 = 0; x2 = 100%; y1 = 100%; y2 = 100% }\\n                            Line { x1 = 50%; x2 = 50%; y1 = 0; y2 = 100% }\\n                        }\\n                    }\\n                }\\n                @if notched {\\n                    Component {\\n                        Path {\\n                            d = notchPath(d, data.raw.notches[pos])\\n                            fill = \\\"none\\\"\\n                            stroke = \\\"#000\\\"\\n                            @props prop.opt.notch\\n                        }\\n                    }\\n                }\\n                @else {\\n                    Component {\\n                        anchor = getBoxAnchor()\\n                        @props boxOpts(d)\\n                        @yield box with { data: d, pos } default {\\n                            Rect.full {\\n                                @props prop.opt.box\\n                                stroke = \\\"#000\\\"\\n                                fill = prop.fill || \\\"none\\\"\\n                            }\\n                        }\\n                    }\\n                }\\n                Component {\\n                    @props medianOpts(d)\\n                    @yield median with d\\n                }\\n                @if hasMean {\\n                    Component {\\n                        @props meanOpts(means)\\n                        @yield mean with {mean: means, pos: pos} default {\\n                            @if flipped {\\n                                Line {\\n                                    @props prop.opt.mean\\n                                    y1 = 0; y2 = 100%; x1 = 0; x2 = 0; stroke = \\\"#000\\\"\\n                                }\\n                            }\\n                            @else {\\n                                Line {\\n                                    @props prop.opt.mean\\n                                    x1 = 0; x2 = 100%; y1 = 0; y2 = 0; stroke = \\\"#000\\\"\\n                                }\\n                            }\\n                        }\\n                    }\\n                }\\n            }\\n        }\\n        @for (o, index) in data.raw.outliers {\\n            Component {\\n                @let x = getX(o[0])\\n                @let y = getY(o[1])\\n                @let data = { data: o }\\n\\n                key = \\\"o\\\" + index\\n                x = flipped ? y : x\\n                y = flipped ? x : y\\n\\n                @yield outlier with o default {\\n                    Circle.centered {\\n                        @props prop.opt.outlier\\n                        r = 2; fill = \\\"red\\\"\\n                    }\\n                }\\n            }\\n        }\\n    }\\n        \"]);\n\n  _templateObject = function _templateObject() {\n    return data;\n  };\n\n  return data;\n}\n\nfunction _taggedTemplateLiteral(strings, raw) { if (!raw) { raw = strings.slice(0); } return Object.freeze(Object.defineProperties(strings, { raw: { value: Object.freeze(raw) } })); }\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }\n\nfunction _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }\n\nfunction _get(target, property, receiver) { if (typeof Reflect !== \"undefined\" && Reflect.get) { _get = Reflect.get; } else { _get = function _get(target, property, receiver) { var base = _superPropBase(target, property); if (!base) return; var desc = Object.getOwnPropertyDescriptor(base, property); if (desc.get) { return desc.get.call(receiver); } return desc.value; }; } return _get(target, property, receiver || target); }\n\nfunction _superPropBase(object, property) { while (!Object.prototype.hasOwnProperty.call(object, property)) { object = _getPrototypeOf(object); if (object === null) break; } return object; }\n\nfunction _inherits(subClass, superClass) { if (typeof superClass !== \"function\" && superClass !== null) { throw new TypeError(\"Super expression must either be null or a function\"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }\n\nfunction _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }\n\nfunction _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }\n\nfunction _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === \"object\" || typeof call === \"function\")) { return call; } return _assertThisInitialized(self); }\n\nfunction _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\"); } return self; }\n\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Date.prototype.toString.call(Reflect.construct(Date, [], function () {})); return true; } catch (e) { return false; } }\n\nfunction _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }\n\nimport { GeometryValue } from \"../../defs/geometry\";\nimport { BaseChart } from \"./base-chart\";\nexport var Boxes = /*#__PURE__*/function (_BaseChart) {\n  _inherits(Boxes, _BaseChart);\n\n  var _super = _createSuper(Boxes);\n\n  function Boxes() {\n    _classCallCheck(this, Boxes);\n\n    return _super.apply(this, arguments);\n  }\n\n  _createClass(Boxes, [{\n    key: \"render\",\n    value: function render() {\n      return this.t(_templateObject());\n    } // @ts-ignore\n\n  }, {\n    key: \"medianOpts\",\n    // @ts-ignore\n    value: function medianOpts(d) {\n      return this.flippedOpts({\n        width: GeometryValue.fullSize,\n        y: this.getY(d[2])\n      });\n    } // @ts-ignore\n\n  }, {\n    key: \"meanOpts\",\n    value: function meanOpts(mean) {\n      return this.flippedOpts({\n        width: GeometryValue.fullSize,\n        y: this.getY(mean)\n      });\n    } // @ts-ignore\n\n  }, {\n    key: \"whiskleOpts\",\n    value: function whiskleOpts(d) {\n      return this.flippedOpts({\n        width: GeometryValue.fullSize,\n        y: this.getY(d[0]),\n        height: this.getHeight(d[4] - d[0], d[0])\n      });\n    } // @ts-ignore\n\n  }, {\n    key: \"boxOpts\",\n    value: function boxOpts(d) {\n      return this.flippedOpts({\n        width: GeometryValue.fullSize,\n        y: this.getY(d[1]),\n        height: this.getHeight(d[3] - d[1], d[1])\n      });\n    } // @ts-ignore\n\n  }, {\n    key: \"notchPath\",\n    value: function notchPath(d, n) {\n      var _this = this;\n\n      var max = this.getY(d[1]);\n      var notchMin = this.getY(n[1]);\n      var medium = this.getY(d[2]);\n      var notchMax = this.getY(n[0]);\n      var min = this.getY(d[3]);\n      var width = this.columnWidth;\n      var nWidth = width * 0.5 * this.prop.notchWidth;\n\n      var seg = function seg(x, y) {\n        var isM = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;\n        return (isM ? \"M\" : \"L\") + (_this.flipped ? \"\".concat(y, \",\").concat(x, \" \") : \"\".concat(x, \",\").concat(y, \" \"));\n      }; // tslint:disable-next-line: prefer-template\n\n\n      return seg(0, max, true) + seg(0, notchMax) + seg(nWidth, medium) + seg(0, notchMin) + seg(0, min) + seg(width, min) + seg(width, notchMin) + seg(width - nWidth, medium) + seg(width, notchMax) + seg(width, max) + \"z\";\n    } // @ts-ignore\n\n  }, {\n    key: \"containerOpts\",\n    value: function containerOpts(pos) {\n      return this.flippedOpts({\n        x: this.getX(pos),\n        y: this.inverted ? 0 : GeometryValue.fullSize,\n        width: this.getWidth(),\n        height: GeometryValue.fullSize\n      });\n    }\n  }, {\n    key: \"getBoxAnchor\",\n    value: function getBoxAnchor() {\n      return this.flipped ? (this.inverted ? 16\n      /* Left */\n      : 64\n      /* Right */\n      ) | 2\n      /* Top */\n      : (this.inverted ? 2\n      /* Top */\n      : 8\n      /* Bottom */\n      ) | 16\n      /* Left */\n      ;\n    }\n  }, {\n    key: \"defaultProp\",\n    value: function defaultProp() {\n      return Object.assign(Object.assign({}, _get(_getPrototypeOf(Boxes.prototype), \"defaultProp\", this).call(this)), {\n        notchWidth: 0.5\n      });\n    }\n  }, {\n    key: \"notched\",\n    get: function get() {\n      return !!this.data.raw.notches && this.prop.showNotch;\n    } // @ts-ignore\n\n  }, {\n    key: \"hasMean\",\n    get: function get() {\n      return !!this.data.raw.means && this.prop.showMean;\n    }\n  }]);\n\n  return Boxes;\n}(BaseChart);","map":null,"metadata":{},"sourceType":"module"}