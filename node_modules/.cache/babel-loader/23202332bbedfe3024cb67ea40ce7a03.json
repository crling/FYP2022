{"ast":null,"code":"function _toConsumableArray(arr) { return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _unsupportedIterableToArray(arr) || _nonIterableSpread(); }\n\nfunction _nonIterableSpread() { throw new TypeError(\"Invalid attempt to spread non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\"); }\n\nfunction _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === \"string\") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === \"Object\" && o.constructor) n = o.constructor.name; if (n === \"Map\" || n === \"Set\") return Array.from(o); if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }\n\nfunction _iterableToArray(iter) { if (typeof Symbol !== \"undefined\" && Symbol.iterator in Object(iter)) return Array.from(iter); }\n\nfunction _arrayWithoutHoles(arr) { if (Array.isArray(arr)) return _arrayLikeToArray(arr); }\n\nfunction _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }\n\nfunction _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }\n\nexport function histogram(data) {\n  var scale = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : \"count\";\n  var numberOfBins = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 0;\n  var threshold = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : [];\n  var isAccumulated = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : false;\n  return new Histogram(data, scale, numberOfBins, threshold, isAccumulated);\n}\nexport var Histogram = /*#__PURE__*/function () {\n  function Histogram(data) {\n    var _this = this;\n\n    var scale = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : \"count\";\n    var numberOfBins = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 0;\n    var threshold = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : [];\n    var isAccumulated = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : false;\n\n    _classCallCheck(this, Histogram);\n\n    if (scale !== \"count\" && scale !== \"area\") {\n      throw new Error('scale can only be \"count\" or \"area\".');\n    }\n\n    if (data.length !== 0) {\n      var withCount = Array.isArray(data[0]);\n      this._data = withCount ? data.sort(function (a, b) {\n        return a[0] - b[0];\n      }) : data.sort(function (a, b) {\n        return Number(a) - Number(b);\n      });\n      var points = withCount ? this._data.map(function (d) {\n        return d[0];\n      }) : this._data;\n      var counts = withCount ? this._data.map(function (d) {\n        return d[1];\n      }) : this._data.map(function (_) {\n        return 1;\n      });\n      var countSum = counts.reduce(function (a, b) {\n        return a + b;\n      }, 0);\n      this._numberOfBins = threshold.length !== 0 ? threshold.length - 1 : numberOfBins !== 0 ? numberOfBins : Math.ceil(Math.sqrt(this._data.length));\n      this._gap = (points[points.length - 1] - points[0]) / this._numberOfBins;\n      var dataIndex = 0;\n      var accumulatedCount = 0;\n      this._bins = _toConsumableArray(Array(this._numberOfBins + 1).keys()).map(function (i) {\n        var count = 0;\n        var x1 = threshold.length !== 0 ? threshold[i] : points[0] + _this._gap * (i - 0.5);\n        var x2 = threshold.length !== 0 ? threshold[i + 1] : points[0] + _this._gap * (i + 0.5);\n\n        while (dataIndex < points.length && points[dataIndex] >= x1 && points[dataIndex] < x2) {\n          count += counts[dataIndex];\n          dataIndex++;\n        }\n\n        accumulatedCount += count;\n        count = isAccumulated ? accumulatedCount : count;\n        var y = scale === \"count\" ? count : count / (x2 - x1) / countSum;\n        return {\n          x1: x1,\n          x2: x2,\n          y: y\n        };\n      });\n      this._max = Math.max.apply(Math, _toConsumableArray(this._bins.map(function (d) {\n        return d.y;\n      })));\n    } else {\n      throw new Error(\"Data is empty.\");\n    }\n  }\n\n  _createClass(Histogram, [{\n    key: \"getData\",\n    value: function getData() {\n      return this._data;\n    }\n  }, {\n    key: \"getBins\",\n    value: function getBins() {\n      return this._bins;\n    }\n  }, {\n    key: \"getMax\",\n    value: function getMax() {\n      return this._max;\n    }\n  }, {\n    key: \"getNumberOfBins\",\n    value: function getNumberOfBins() {\n      return this._numberOfBins;\n    }\n  }, {\n    key: \"getGap\",\n    value: function getGap() {\n      return this._gap;\n    }\n  }]);\n\n  return Histogram;\n}();","map":null,"metadata":{},"sourceType":"module"}