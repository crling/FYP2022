{"ast":null,"code":"function _createForOfIteratorHelper(o, allowArrayLike) { var it; if (typeof Symbol === \"undefined\" || o[Symbol.iterator] == null) { if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === \"number\") { if (it) o = it; var i = 0; var F = function F() {}; return { s: F, n: function n() { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }, e: function e(_e) { throw _e; }, f: F }; } throw new TypeError(\"Invalid attempt to iterate non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\"); } var normalCompletion = true, didErr = false, err; return { s: function s() { it = o[Symbol.iterator](); }, n: function n() { var step = it.next(); normalCompletion = step.done; return step; }, e: function e(_e2) { didErr = true; err = _e2; }, f: function f() { try { if (!normalCompletion && it[\"return\"] != null) it[\"return\"](); } finally { if (didErr) throw err; } } }; }\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nfunction _toConsumableArray(arr) { return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _unsupportedIterableToArray(arr) || _nonIterableSpread(); }\n\nfunction _nonIterableSpread() { throw new TypeError(\"Invalid attempt to spread non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\"); }\n\nfunction _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === \"string\") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === \"Object\" && o.constructor) n = o.constructor.name; if (n === \"Map\" || n === \"Set\") return Array.from(o); if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }\n\nfunction _iterableToArray(iter) { if (typeof Symbol !== \"undefined\" && Symbol.iterator in Object(iter)) return Array.from(iter); }\n\nfunction _arrayWithoutHoles(arr) { if (Array.isArray(arr)) return _arrayLikeToArray(arr); }\n\nfunction _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }\n\nimport { setMainData } from \".\";\nexport var editorRef = {};\n\nfunction run(v) {\n  v.forceRedraw = true;\n  v.run();\n}\n\nfunction scatterConfig(v) {\n  return {\n    id: \"scatter\",\n    title: \"Scatterplot Content\",\n    layout: \"single-page\",\n    icon: \"\",\n    view: {\n      type: \"list\",\n      items: [{\n        title: \"\",\n        ref: \"filterSamples\",\n        type: \"vue\",\n        component: \"filter-samples-bind\",\n        data: {\n          get samples() {\n            return v.data.samples;\n          },\n\n          get title() {\n            return \"Filter Samples\";\n          },\n\n          callback: function callback(samples) {\n            console.log(samples);\n          }\n        }\n      }]\n    }\n  };\n}\n\nfunction xyConfig(v) {\n  return [{\n    id: \"xData\",\n    name: \"X-Axis\",\n    view: {\n      type: \"list\",\n      items: [{\n        ref: \"xAxis\",\n        title: \"X-Axis\",\n        type: \"select\",\n        options: v.data.axises,\n        value: {\n          current: v.data.xLabel,\n          callback: function callback(d) {\n            setMainData(v.data.mainDict[v.data.rank], v, d);\n            editorRef.xLower.value = v.data.data.categoryRange[0];\n            editorRef.xUpper.value = v.data.data.categoryRange[1];\n            run(v);\n          }\n        }\n      }, {\n        ref: \"xLower\",\n        title: \"X Range Lower Bound\",\n        type: \"input\",\n        value: {\n          current: v.data.data.categoryRange[0],\n          callback: function callback(d) {\n            v.data.boxDataX.valueRange[0] = v.data.data.categoryRange[0] = parseFloat(d);\n            run(v);\n          }\n        }\n      }, {\n        ref: \"xUpper\",\n        title: \"X Range Upper Bound\",\n        type: \"input\",\n        value: {\n          current: v.data.data.categoryRange[1],\n          callback: function callback(d) {\n            v.data.boxDataX.valueRange[1] = v.data.data.categoryRange[1] = parseFloat(d);\n            run(v);\n          }\n        }\n      }]\n    }\n  }, {\n    id: \"yData\",\n    name: \"Y-Axis\",\n    view: {\n      type: \"list\",\n      items: [{\n        ref: \"yAxis\",\n        title: \"Y-Axis\",\n        type: \"select\",\n        options: v.data.axises,\n        value: {\n          current: v.data.yLabel,\n          callback: function callback(d) {\n            setMainData(v.data.mainDict[v.data.rank], v, null, d);\n            editorRef.yLower.value = v.data.data.valueRange[0];\n            editorRef.yUpper.value = v.data.data.valueRange[1];\n            run(v);\n          }\n        }\n      }, {\n        ref: \"yLower\",\n        title: \"Y Range Lower Bound\",\n        type: \"input\",\n        value: {\n          current: v.data.data.valueRange[0],\n          callback: function callback(d) {\n            v.data.boxDataY.valueRange[0] = v.data.data.valueRange[0] = parseFloat(d);\n            run(v);\n          }\n        }\n      }, {\n        ref: \"yUpper\",\n        title: \"Y Range Upper Bound\",\n        type: \"input\",\n        value: {\n          current: v.data.data.valueRange[1],\n          callback: function callback(d) {\n            v.data.boxDataY.valueRange[1] = v.data.data.valueRange[1] = parseFloat(d);\n            run(v);\n          }\n        }\n      }]\n    }\n  }];\n}\n\nexport function editorConfig(v) {\n  var metaOpts = Object.keys(v.data.metaInfo).map(function (x) {\n    return {\n      value: x,\n      text: \"\".concat(x, \" (\").concat(v.data.metaInfo[x].isNumber ? \"continuous\" : \"discrete\", \")\")\n    };\n  });\n  var metaOptsDiscrete = Object.keys(v.data.metaInfo).filter(function (k) {\n    return !v.data.metaInfo[k].isNumber;\n  }).map(function (x) {\n    return {\n      value: x,\n      text: x\n    };\n  });\n  return {\n    sections: [{\n      id: \"data\",\n      title: \"Data\",\n      layout: \"tabs\",\n      tabs: [{\n        id: \"gData\",\n        name: \"General\",\n        view: {\n          type: \"list\",\n          items: [{\n            type: \"select\",\n            title: \"Taxonomic rank\",\n            options: v.data.ranks,\n            value: {\n              current: v.data.rank,\n              callback: function callback(d) {\n                v.data.rank = d;\n                setMainData(v.data.mainDict[d], v);\n                run(v);\n              }\n            }\n          }, {\n            type: \"select\",\n            title: \"Scatter shape by\",\n            options: metaOptsDiscrete,\n            value: {\n              current: v.data.groupKey,\n              callback: function callback(d) {\n                v.data.groupKey = d;\n                v.data.groups = v.data.metaInfo[d].values;\n                v.data.shapeDict = {};\n                v.data.groups.forEach(function (x, i) {\n                  v.data.shapeDict[x] = v.data.shapes[i];\n                });\n\n                v.data.data.shapeGetter = function (x) {\n                  return v.data.shapeDict[x[d]];\n                };\n\n                run(v);\n              }\n            }\n          }, {\n            type: \"select\",\n            title: \"Scatter color by\",\n            options: metaOpts,\n            value: {\n              current: v.data.colorKey,\n              callback: function callback(d) {\n                v.data.colorKey = d;\n                var colorMetaInfo = v.data.metaInfo[v.data.colorKey];\n\n                v.data.data.colorGetter = function (s) {\n                  return v.data.metaInfo[v.data.colorKey].color(s[v.data.colorKey]);\n                };\n\n                v.data.classLegend = colorMetaInfo.values.map(function (x, i) {\n                  return {\n                    label: x,\n                    fill: colorMetaInfo.color(x),\n                    type: \"Rect\"\n                  };\n                });\n                run(v);\n              }\n            }\n          }, {\n            type: \"select\",\n            title: \"Box category by\",\n            options: metaOptsDiscrete,\n            value: {\n              current: v.data.catKey,\n              callback: function callback(d) {\n                v.data.catKey = d;\n                v.data.categories = v.data.metaInfo[d].values;\n                setMainData(v.data.mainDict[v.data.rank], v);\n                run(v);\n              }\n            }\n          }]\n        }\n      }].concat(_toConsumableArray(xyConfig(v)))\n    }, {\n      id: \"setting-general\",\n      title: \"General settings\",\n      layout: \"single-page\",\n      view: {\n        type: \"list\",\n        items: [{\n          title: \"grid length\",\n          type: \"input\",\n          value: {\n            current: v.data.mainGridLength,\n            callback: function callback(d) {\n              v.data.mainGridLength = parseFloat(d);\n              run(v);\n            }\n          }\n        }, {\n          title: \"box height\",\n          type: \"input\",\n          value: {\n            current: v.data.boxGridHeight,\n            callback: function callback(d) {\n              v.data.boxGridHeight = parseFloat(d);\n              run(v);\n            }\n          }\n        }, {\n          title: \"scatter size\",\n          type: \"input\",\n          value: {\n            current: v.data.scatterConfig.scatterSize,\n            callback: function callback(d) {\n              v.data.scatterConfig.scatterSize = parseInt(d);\n              run(v);\n            }\n          }\n        }, {\n          title: \"hollow scatter\",\n          type: \"checkbox\",\n          value: {\n            current: v.data.scatterConfig.hollow,\n            callback: function callback(d) {\n              v.data.scatterConfig.hollow = d;\n              run(v);\n            }\n          }\n        }, {\n          title: \"\",\n          ref: \"filterSamples\",\n          type: \"vue\",\n          component: \"filter-samples-bind\",\n          data: {\n            get samples() {\n              return v.data.scatterData;\n            },\n\n            get title() {\n              return \"Filter Samples\";\n            },\n\n            callback: function callback(samples) {\n              // console.log(samples);\n              v.data.scatterData = samples;\n              run(v);\n            }\n          }\n        }]\n      }\n    }, // scatterConfig(v),\n    {\n      id: \"setting-bc\",\n      title: \"Box content settings\",\n      layout: \"single-page\",\n      view: {\n        type: \"list\",\n        items: [{\n          title: \"Hollow box\",\n          type: \"checkbox\",\n          value: {\n            current: v.data.boxConfig.hollowBox,\n            callback: function callback(d) {\n              v.data.boxConfig.hollowBox = d;\n              run(v);\n            }\n          }\n        }, {\n          title: \"Outliers\",\n          type: \"checkbox\",\n          value: {\n            current: v.data.boxConfig.showOutliers,\n            callback: function callback(d) {\n              v.data.boxConfig.showOutliers = d;\n              run(v);\n            }\n          }\n        }, {\n          title: \"Sample scatter\",\n          type: \"checkbox\",\n          value: {\n            current: v.data.boxConfig.drawScatter,\n            callback: function callback(d) {\n              v.data.boxConfig.drawScatter = d;\n              run(v);\n            }\n          }\n        }, {\n          title: \"Draw violin\",\n          type: \"checkbox\",\n          value: {\n            current: v.data.boxConfig.drawViolin,\n            callback: function callback(d) {\n              v.data.boxConfig.drawViolin = d;\n              v.data.boxConfig.drawBox = !d;\n              run(v);\n            }\n          }\n        }]\n      }\n    }, {\n      id: \"meta\",\n      title: \"Meta Panel\",\n      layout: \"single-page\",\n      view: {\n        type: \"list\",\n        items: [{\n          title: \"meta info\",\n          type: \"vue\",\n          component: \"meta-info\",\n          data: {\n            data: v.data.metaFeatures.map(function (k) {\n              return _objectSpread({\n                name: k\n              }, v.data.metaInfo[k]);\n            }),\n            callback: function callback(obj) {\n              var _iterator = _createForOfIteratorHelper(obj),\n                  _step;\n\n              try {\n                for (_iterator.s(); !(_step = _iterator.n()).done;) {\n                  var o = _step.value;\n                  v.data.metaInfo[o.name].update(v, o);\n                }\n              } catch (err) {\n                _iterator.e(err);\n              } finally {\n                _iterator.f();\n              }\n\n              run(v);\n            }\n          }\n        }]\n      }\n    }]\n  };\n}","map":{"version":3,"sources":["/Users/wangzhenyu/Desktop/fyp_workspace/meta_platform/app/javascript/viz/scatter-box-plot/editor.ts"],"names":["setMainData","editorRef","run","v","forceRedraw","scatterConfig","id","title","layout","icon","view","type","items","ref","component","data","samples","callback","console","log","xyConfig","name","options","axises","value","current","xLabel","d","mainDict","rank","xLower","categoryRange","xUpper","boxDataX","valueRange","parseFloat","yLabel","yLower","yUpper","boxDataY","editorConfig","metaOpts","Object","keys","metaInfo","map","x","text","isNumber","metaOptsDiscrete","filter","k","sections","tabs","ranks","groupKey","groups","values","shapeDict","forEach","i","shapes","shapeGetter","colorKey","colorMetaInfo","colorGetter","s","color","classLegend","label","fill","catKey","categories","mainGridLength","boxGridHeight","scatterSize","parseInt","hollow","scatterData","boxConfig","hollowBox","showOutliers","drawScatter","drawViolin","drawBox","metaFeatures","obj","o","update"],"mappings":"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","sourcesContent":["import { setSyntheticLeadingComments } from \"typescript\";\nimport { EditorDef } from \"utils/editor\";\nimport { generateBoxConfig } from \"viz/boxplot/editor\";\nimport { setMainData } from \".\";\n\nexport const editorRef = {} as any;\n\nfunction run(v) {\n    v.forceRedraw = true;\n    v.run();\n}\nfunction scatterConfig(v) {\n    return ({\n        id: \"scatter\",\n        title: \"Scatterplot Content\",\n        layout: \"single-page\",\n        icon: \"\",\n        view: {\n            type: \"list\",\n            items: [\n                {\n                    title: \"\",\n                    ref: \"filterSamples\",\n                    type: \"vue\",\n                    component: \"filter-samples-bind\",\n                    data: {\n                        get samples() {\n                            return v.data.samples;\n                        },\n                        get title() {\n                            return \"Filter Samples\";\n                        },\n                        callback(samples) {\n                            console.log(samples);\n                        },\n                    },\n                },\n            ],\n        },\n    });\n}\nfunction xyConfig(v) {\n    return [{\n        id: \"xData\",\n        name: \"X-Axis\",\n        view: {\n            type: \"list\",\n            items: [\n                {\n                    ref: \"xAxis\",\n                    title: \"X-Axis\",\n                    type: \"select\",\n                    options: v.data.axises,\n                    value: {\n                        current: v.data.xLabel,\n                        callback(d) {\n                            setMainData(v.data.mainDict[v.data.rank], v, d);\n                            editorRef.xLower.value = v.data.data.categoryRange[0];\n                            editorRef.xUpper.value = v.data.data.categoryRange[1];\n                            run(v);\n                        },\n                    },\n                },\n                {\n                    ref: \"xLower\",\n                    title: \"X Range Lower Bound\",\n                    type: \"input\",\n                    value: {\n                        current:  v.data.data.categoryRange[0],\n                        callback(d) {\n                            v.data.boxDataX.valueRange[0] = v.data.data.categoryRange[0] = parseFloat(d);\n                            run(v);\n                        },\n                    },\n                },\n                {\n                    ref: \"xUpper\",\n                    title: \"X Range Upper Bound\",\n                    type: \"input\",\n                    value: {\n                        current: v.data.data.categoryRange[1],\n                        callback(d) {\n                            v.data.boxDataX.valueRange[1] = v.data.data.categoryRange[1] = parseFloat(d);\n                            run(v);\n                        },\n                    },\n                },\n            ],\n        },\n    },\n    {\n        id: \"yData\",\n        name: \"Y-Axis\",\n        view: {\n            type: \"list\",\n            items: [\n                {\n                    ref: \"yAxis\",\n                    title: \"Y-Axis\",\n                    type: \"select\",\n                    options: v.data.axises,\n                    value: {\n                        current: v.data.yLabel,\n                        callback(d) {\n                            setMainData(v.data.mainDict[v.data.rank], v, null, d);\n                            editorRef.yLower.value = v.data.data.valueRange[0];\n                            editorRef.yUpper.value = v.data.data.valueRange[1];\n                            run(v);\n                        },\n                    },\n                },\n                {\n                    ref: \"yLower\",\n                    title: \"Y Range Lower Bound\",\n                    type: \"input\",\n                    value: {\n                        current:  v.data.data.valueRange[0],\n                        callback(d) {\n                            v.data.boxDataY.valueRange[0] = v.data.data.valueRange[0] = parseFloat(d);\n                            run(v);\n                        },\n                    },\n                },\n                {\n                    ref: \"yUpper\",\n                    title: \"Y Range Upper Bound\",\n                    type: \"input\",\n                    value: {\n                        current: v.data.data.valueRange[1],\n                        callback(d) {\n                            v.data.boxDataY.valueRange[1] = v.data.data.valueRange[1] = parseFloat(d);\n                            run(v);\n                        },\n                    },\n                },\n            ],\n        },\n    },\n];\n}\nexport function editorConfig(v): EditorDef {\n\n    const metaOpts = Object.keys(v.data.metaInfo).map(x => ({value: x,\n                            text: `${x} (${v.data.metaInfo[x].isNumber ? \"continuous\" : \"discrete\"})`}));\n    const metaOptsDiscrete = Object.keys(v.data.metaInfo)\n                                    .filter(k => !v.data.metaInfo[k].isNumber)\n                                    .map(x => ({value: x, text: x}));\n\n    return {\n        sections: [\n            {\n                id: \"data\",\n                title: \"Data\",\n                layout: \"tabs\",\n                tabs: [\n                    {\n                        id: \"gData\",\n                        name: \"General\",\n                        view: {\n                            type: \"list\",\n                            items: [\n                                {\n                                    type: \"select\",\n                                    title: \"Taxonomic rank\",\n                                    options: v.data.ranks,\n                                    value: {\n                                        current: v.data.rank,\n                                        callback(d) {\n                                            v.data.rank = d;\n                                            setMainData(v.data.mainDict[d], v);\n                                            run(v);\n                                        },\n                                    },\n                                },\n                                {\n                                    type: \"select\",\n                                    title: \"Scatter shape by\",\n                                    options: metaOptsDiscrete,\n                                    value: {\n                                        current: v.data.groupKey,\n                                        callback(d) {\n                                            v.data.groupKey = d;\n                                            v.data.groups = v.data.metaInfo[d].values;\n                                            v.data.shapeDict = {};\n                                            v.data.groups.forEach((x, i) => {\n                                                v.data.shapeDict[x] = v.data.shapes[i];\n                                            });\n                                            v.data.data.shapeGetter = (x) => v.data.shapeDict[x[d]];\n                                            run(v);\n                                        },\n                                    },\n                                },\n                                {\n                                    type: \"select\",\n                                    title: \"Scatter color by\",\n                                    options: metaOpts,\n                                    value: {\n                                        current: v.data.colorKey,\n                                        callback(d) {\n                                            v.data.colorKey = d;\n                                            const colorMetaInfo = v.data.metaInfo[v.data.colorKey];\n                                            v.data.data.colorGetter = (s) => v.data.metaInfo[v.data.colorKey].color(s[v.data.colorKey]);\n                                            v.data.classLegend = colorMetaInfo.values.map((x, i) => {\n                                                return {label: x, fill: colorMetaInfo.color(x), type: \"Rect\"};\n                                            });\n                                            run(v);\n                                        },\n                                    },\n                                },\n                                {\n                                    type: \"select\",\n                                    title: \"Box category by\",\n                                    options: metaOptsDiscrete,\n                                    value: {\n                                        current: v.data.catKey,\n                                        callback(d) {\n                                            v.data.catKey = d;\n                                            v.data.categories = v.data.metaInfo[d].values;\n                                            setMainData(v.data.mainDict[v.data.rank], v);\n                                            run(v);\n                                        },\n                                    },\n                                },\n                            ],\n                        },\n                    },\n                    ...xyConfig(v),\n\n                ],\n            },\n            {\n                id: \"setting-general\",\n                title: \"General settings\",\n                layout: \"single-page\",\n                view: {\n                    type: \"list\",\n                    items: [\n                        {\n                            title: \"grid length\",\n                            type: \"input\",\n                            value: {\n                                current: v.data.mainGridLength,\n                                callback(d) {\n                                    v.data.mainGridLength = parseFloat(d);\n                                    run(v);\n                                },\n                            },\n                        },\n                        {\n                            title: \"box height\",\n                            type: \"input\",\n                            value: {\n                                current: v.data.boxGridHeight,\n                                callback(d) {\n                                    v.data.boxGridHeight = parseFloat(d);\n                                    run(v);\n                                },\n                            },\n                        },\n                        {\n                            title: \"scatter size\",\n                            type: \"input\",\n                            value: {\n                                current: v.data.scatterConfig.scatterSize,\n                                callback(d) {\n                                    v.data.scatterConfig.scatterSize = parseInt(d);\n                                    run(v);\n                                },\n                            },\n                        },\n                        {\n                            title: \"hollow scatter\",\n                            type: \"checkbox\",\n                            value: {\n                                current: v.data.scatterConfig.hollow,\n                                callback(d) {\n                                    v.data.scatterConfig.hollow = d;\n                                    run(v);\n                                },\n                            },\n                        },\n                        {\n                            title: \"\",\n                            ref: \"filterSamples\",\n                            type: \"vue\",\n                            component: \"filter-samples-bind\",\n                            data: {\n                                get samples() {\n                                    return v.data.scatterData;\n                                },\n                                get title() {\n                                    return \"Filter Samples\";\n                                },\n                                callback(samples) {\n                                    // console.log(samples);\n                                    v.data.scatterData = samples;\n                                    run(v);\n                                },\n                            },\n                        },\n                    ],\n                },\n            },\n            // scatterConfig(v),\n            {\n                id: \"setting-bc\",\n                title: \"Box content settings\",\n                layout: \"single-page\",\n                view: {\n                    type: \"list\",\n                    items: [                       \n                        {\n                            title: \"Hollow box\",\n                            type: \"checkbox\",\n                            value: {\n                                current: v.data.boxConfig.hollowBox,\n                                callback(d) {\n                                    v.data.boxConfig.hollowBox = d;\n                                    run(v);\n                                },\n                            },\n                        },\n                        {\n                            title: \"Outliers\",\n                            type: \"checkbox\",\n                            value: {\n                                current: v.data.boxConfig.showOutliers,\n                                callback(d) {\n                                    v.data.boxConfig.showOutliers = d;\n                                    run(v);\n                                },\n                            },\n                        },\n                        {\n                            title: \"Sample scatter\",\n                            type: \"checkbox\",\n                            value: {\n                                current: v.data.boxConfig.drawScatter,\n                                callback(d) {\n                                    v.data.boxConfig.drawScatter = d;\n                                    run(v);\n                                },\n                            },\n                        },\n                        {\n                            title: \"Draw violin\",\n                            type: \"checkbox\",\n                            value: {\n                                current: v.data.boxConfig.drawViolin,\n                                callback(d) {\n                                    v.data.boxConfig.drawViolin = d;\n                                    v.data.boxConfig.drawBox = !d;\n                                    run(v);\n                                },\n                            },\n                        },\n                    ],\n                },\n            },\n            {\n                id: \"meta\",\n                title: \"Meta Panel\",\n                layout: \"single-page\",\n                view: {\n                    type: \"list\",\n                    items: [\n                        {\n                            title: \"meta info\",\n                            type: \"vue\",\n                            component: \"meta-info\",\n                            data: {\n                                data: v.data.metaFeatures.map(k => ({\n                                    name: k, ...v.data.metaInfo[k],\n                                })),\n                                callback(obj) {\n                                    for (const o of obj) {\n                                        v.data.metaInfo[o.name].update(v, o);\n                                    }\n                                    run(v);\n                                },\n                            },\n                        },\n                    ]\n                }\n            }\n        ],\n    };\n}\n"]},"metadata":{},"sourceType":"module"}