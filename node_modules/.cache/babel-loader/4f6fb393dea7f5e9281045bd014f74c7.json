{"ast":null,"code":"function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nfunction _slicedToArray(arr, i) { return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray(arr, i) || _nonIterableRest(); }\n\nfunction _nonIterableRest() { throw new TypeError(\"Invalid attempt to destructure non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\"); }\n\nfunction _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === \"string\") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === \"Object\" && o.constructor) n = o.constructor.name; if (n === \"Map\" || n === \"Set\") return Array.from(o); if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }\n\nfunction _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }\n\nfunction _iterableToArrayLimit(arr, i) { if (typeof Symbol === \"undefined\" || !(Symbol.iterator in Object(arr))) return; var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i[\"return\"] != null) _i[\"return\"](); } finally { if (_d) throw _e; } } return _arr; }\n\nfunction _arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }\n\nfunction _templateObject() {\n  var data = _taggedTemplateLiteral([\"Component{\\n            width = 1500; height = 800; id = \\\"network\\\"\\n            Line {\\n                x1 = layoutConfig.groupWidth; x2 = layoutConfig.groupWidth; y1 = 0; y2 = 700\\n                strokeWidth = 2\\n                stroke = \\\"grey\\\"\\n                dashArray = \\\"4 2\\\"\\n            }\\n            Text.centered {\\n                text = \\\"Control Enrichment\\\"\\n                x = layoutConfig.groupWidth/2; y = 20\\n                fontSize = 20\\n                style:user-select = \\\"none\\\"\\n            }\\n            Text.centered {\\n                text = \\\"Gout Enrichment\\\"\\n                x = layoutConfig.groupWidth * 1.5; y = 20\\n                fontSize = 20\\n                style:user-select = \\\"none\\\"\\n            }\\n            @for (l, i) in _links {\\n                Line {\\n                    key = i;\\n                    x1 = l.source_x; x2 = l.target_x; y1 = l.source_y; y2 = l.target_y\\n                    strokeWidth = l.correlation < 0.5 ? 0.5 : _edgeScale(l.correlation)\\n                    stroke = l.correlation < 0.5 ? edgeColor.group1 : edgeColor.group2\\n                    behavior:tooltip {\\n                        content = [edgeDetail, l]\\n                    }\\n                }\\n            }\\n            @for d in _nodes {\\n                Component {\\n                    id = d.NodeName\\n                    x = d._x\\n                    y = d._y\\n                    on:mousedown = (ev, el) => dragStart(ev, el, d.NodeGroup)\\n                    on:mouseup = (ev, el) => dragEnd(ev, el)\\n                    \\n                    behavior:tooltip {\\n                        content = [nodeDetail, d]\\n                    }\\n                    \\n                    Circle.centered{\\n                        r =  Math.sqrt(d.NodeSize) * 3.14\\n                        fill = getFillByPhylumAndGenus(d)\\n                    }\\n                    @if prop.showNodeNames {\\n                        Text.centered {\\n                            html = parseText(d.NodeName)\\n                            fill = \\\"black\\\"\\n                            style:font-weight = \\\"bold\\\"\\n                            style:user-select = \\\"none\\\"\\n                        }\\n                    }\\n                }\\n            }\\n        }\"]);\n\n  _templateObject = function _templateObject() {\n    return data;\n  };\n\n  return data;\n}\n\nfunction _taggedTemplateLiteral(strings, raw) { if (!raw) { raw = strings.slice(0); } return Object.freeze(Object.defineProperties(strings, { raw: { value: Object.freeze(raw) } })); }\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }\n\nfunction _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }\n\nfunction _inherits(subClass, superClass) { if (typeof superClass !== \"function\" && superClass !== null) { throw new TypeError(\"Super expression must either be null or a function\"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }\n\nfunction _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }\n\nfunction _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }\n\nfunction _possibleConstructorReturn(self, call) { if (call && (typeof call === \"object\" || typeof call === \"function\")) { return call; } return _assertThisInitialized(self); }\n\nfunction _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\"); } return self; }\n\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Date.prototype.toString.call(Reflect.construct(Date, [], function () {})); return true; } catch (e) { return false; } }\n\nfunction _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }\n\nimport Oviz from \"crux\";\nimport { Color } from \"crux/dist/color\";\nimport { Component } from \"crux/dist/element\";\nimport * as d3 from \"d3\";\nexport var Gravity;\n\n(function (Gravity) {\n  Gravity[Gravity[\"Top\"] = 0] = \"Top\";\n  Gravity[Gravity[\"Right\"] = 1] = \"Right\";\n  Gravity[Gravity[\"Bottom\"] = 2] = \"Bottom\";\n  Gravity[Gravity[\"Left\"] = 3] = \"Left\";\n})(Gravity || (Gravity = {}));\n\nexport var NetworkDiagram = /*#__PURE__*/function (_Component) {\n  _inherits(NetworkDiagram, _Component);\n\n  var _super = _createSuper(NetworkDiagram);\n\n  function NetworkDiagram() {\n    var _this;\n\n    _classCallCheck(this, NetworkDiagram);\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    _this = _super.call.apply(_super, [this].concat(args));\n    _this.edgeColor = void 0;\n    _this._nodes = void 0;\n    _this._links = void 0;\n    _this._updateNode = void 0;\n    _this._scaleX = void 0;\n    _this._scaleY = void 0;\n    _this._edgeScale = void 0;\n    _this.group1LinkedX = 0;\n    _this.group2LinkedX = 700;\n    _this.group1LinkedY = 100;\n    _this.group2LinkedY = 100;\n    _this.group1LinkedRow = 0;\n    _this.group1LinkedCol = 0;\n    _this.group2LinkedRow = 0;\n    _this.group2LinkedCol = 0;\n    _this.group1LinkedColumnCount = 0;\n    _this.group2LinkedColumnCount = 0;\n    _this.group1NonLinkX = 0;\n    _this.group2NonLinkX = 700;\n    _this.group1NonLinkY = 600;\n    _this.group2NonLinkY = 600;\n    _this.group1NonLinkColumnCount = 0;\n    _this.group2NonLinkColumnCount = 0;\n    _this.layoutConfig = {\n      nodeInterval: 70,\n      groupWidth: 600,\n      offset: 20,\n      maxCol: 8\n    };\n    return _this;\n  }\n\n  _createClass(NetworkDiagram, [{\n    key: \"render\",\n    value: function render() {\n      return this.t(_templateObject());\n    }\n  }, {\n    key: \"parseText\",\n    value: function parseText(str) {\n      if (str.length > 10) {\n        var strs = str.split(\" \");\n        var parsedStr = \"\";\n        strs.forEach(function (s, i) {\n          parsedStr = parsedStr.concat(\"<tspan x = \".concat(s.length / 4 * -1, \"em dy = \").concat(i, \"em>\").concat(s, \"</tspan>\"));\n        });\n        return parsedStr;\n      }\n\n      return str;\n    }\n  }, {\n    key: \"nodeDetail\",\n    value: function nodeDetail(d) {\n      var details = \"Node ID: \".concat(d.id, \"<br>Size: \").concat(d.size);\n      details += \"<br>Phylum: \".concat(d.NodePhylum, \"<br>Genus: \").concat(d.NodeGenus);\n      return details;\n    }\n  }, {\n    key: \"edgeDetail\",\n    value: function edgeDetail(l) {\n      var details = \"Source ID: \".concat(l.source, \"<br>Target ID: \").concat(l.target);\n      details += \"<br>Correlation: \".concat(parseFloat(l.correlation).toFixed(3));\n      return details;\n    }\n  }, {\n    key: \"dragEnd\",\n    value: function dragEnd(_, el) {\n      delete this.$on['mousemove'];\n      el.stage = null;\n      this._updateNode = null; // this.setState(null);\n    }\n  }, {\n    key: \"dragStart\",\n    value: function dragStart(_, el, group) {\n      var _this2 = this;\n\n      this.$on['mousemove'] = function (evp, elp) {\n        var _Oviz$utils$mouse = Oviz.utils.mouse(elp, evp),\n            _Oviz$utils$mouse2 = _slicedToArray(_Oviz$utils$mouse, 2),\n            newX = _Oviz$utils$mouse2[0],\n            newY = _Oviz$utils$mouse2[1];\n\n        console.log(\"\".concat(newX, \" - \").concat(newY));\n\n        if (newY < 50 || newY > 700) {\n          el.stage = null;\n          return;\n        }\n\n        if (group === \"Control\") {\n          if (newX < 0 || newX > _this2.layoutConfig.groupWidth) {\n            el.stage = null;\n            return;\n          }\n        } else {\n          if (newX < _this2.layoutConfig.groupWidth || newX > _this2.layoutConfig.groupWidth * 2 + 100) {\n            el.stage = null;\n            return;\n          }\n        }\n\n        _this2._updateNode = {\n          nid: el._prop.id,\n          newX: newX,\n          newY: newY\n        };\n\n        _this2.setState(_objectSpread({}, _this2._updateNode));\n      };\n\n      el.stage = \"dragging\";\n    }\n  }, {\n    key: \"didCreate\",\n    value: function didCreate() {\n      var _this3 = this;\n\n      this.edgeColor = {\n        group1: Color.literal(\"red\").desaturate(30).string,\n        group2: Color.literal(\"blue\").desaturate(30).lighten(20).string\n      };\n      this._nodes = this.prop._nodes.map(function (d) {\n        var temp_x = _this3.setUpXCoordinates(d);\n\n        var temp_y = _this3.setUpYCoordinates(d);\n\n        _this3.prop._links.forEach(function (e) {\n          if (d.NodeName === e.source) {\n            e.source_x = temp_x;\n            e.source_y = temp_y;\n          }\n\n          if (d.NodeName === e.target) {\n            e.target_x = temp_x;\n            e.target_y = temp_y;\n          }\n        });\n\n        d._x = temp_x;\n        d._y = temp_y;\n        return d;\n      });\n      var maxCor = 0;\n\n      this.prop._links.forEach(function (d) {\n        if (maxCor < d.correlation) maxCor = d.correlation;\n      });\n\n      this._links = this.prop._links;\n      this._edgeScale = d3.scaleQuantize().domain([0.5, maxCor]).range([1, 1.5, 2]);\n    }\n  }, {\n    key: \"willRender\",\n    value: function willRender() {\n      var _this4 = this;\n\n      if (this._updateNode) {\n        this._nodes.forEach(function (node) {\n          if (node.NodeName === _this4._updateNode.nid) {\n            node._x = _this4._updateNode.newX;\n            node._y = _this4._updateNode.newY;\n          }\n        });\n\n        this._links.forEach(function (link) {\n          if (link.source === _this4._updateNode.nid) {\n            link.source_x = _this4._updateNode.newX;\n            link.source_y = _this4._updateNode.newY;\n          } else if (link.target === _this4._updateNode.nid) {\n            link.target_x = _this4._updateNode.newX;\n            link.target_y = _this4._updateNode.newY;\n          }\n        });\n      }\n    }\n  }, {\n    key: \"getParsedNodes\",\n    value: function getParsedNodes() {\n      var _this5 = this;\n\n      return this.prop._nodes.map(function (d) {\n        var temp_x = _this5.setUpXCoordinates(d);\n\n        var temp_y = _this5.setUpYCoordinates(d);\n\n        _this5.prop._links.forEach(function (e) {\n          if (d.id === e.source) {\n            e.source_x = temp_x;\n            e.source_y = temp_y;\n          }\n\n          if (d.id === e.target) {\n            e.target_x = temp_x;\n            e.target_y = temp_y;\n          }\n        });\n\n        d._x = temp_x;\n        d._y = temp_y;\n        return d;\n      });\n    }\n  }, {\n    key: \"getFillByPhylumAndGenus\",\n    value: function getFillByPhylumAndGenus(d) {\n      if (d.NodeName.startsWith(d.NodeGroup)) return this.prop.colorMap.Other.Unclassified;\n      return this.prop.colorMap[d.NodePhylum][d.NodeGenus];\n    }\n  }, {\n    key: \"setUpXCoordinates\",\n    value: function setUpXCoordinates(d) {\n      var returnX = 0;\n      var flag_link = false;\n\n      this.prop._links.forEach(function (e, i) {\n        if (e.source === d.NodeName || e.target === d.NodeName) {\n          flag_link = true;\n        }\n      });\n\n      if (d.NodeGroup === \"Control\") {\n        if (flag_link) {\n          returnX = this.group1LinkedX;\n          this.group1LinkedX += this.layoutConfig.nodeInterval;\n        } else {\n          returnX = this.group1NonLinkX;\n          this.group1NonLinkX += this.layoutConfig.nodeInterval;\n        }\n      } else if (d.NodeGroup === \"Gout\") {\n        if (flag_link) {\n          returnX = this.group2LinkedX;\n          this.group2LinkedX += this.layoutConfig.nodeInterval;\n        } else {\n          returnX = this.group2NonLinkX;\n          this.group2NonLinkX += this.layoutConfig.nodeInterval;\n        }\n      }\n\n      return returnX;\n    }\n  }, {\n    key: \"setUpYCoordinates\",\n    value: function setUpYCoordinates(d) {\n      var returnY = 0;\n      var flag_link = false;\n\n      this.prop._links.forEach(function (e) {\n        if (e.source === d.NodeName || e.target === d.NodeName) {\n          flag_link = true;\n        }\n      }); // Group 1 Y\n\n\n      if (d.NodeGroup === \"Control\") {\n        if (flag_link) {\n          returnY = this.group1LinkedCol % 2 === 1 ? this.group1LinkedY + this.layoutConfig.offset : this.group1LinkedY; // this.group1LinkedColumnCount ++;\n\n          this.group1LinkedCol++;\n\n          if (this.group1LinkedCol === this.layoutConfig.maxCol) {\n            this.group1LinkedCol = 0;\n            this.group1LinkedRow++;\n            this.group1LinkedX = this.group1LinkedRow % 2 === 1 ? this.layoutConfig.offset : 0;\n            this.group1LinkedY += this.layoutConfig.nodeInterval;\n            this.group1LinkedColumnCount = 0;\n          }\n        } else {\n          returnY = this.group1NonLinkY;\n          this.group1NonLinkColumnCount++;\n\n          if (this.group1NonLinkColumnCount === this.layoutConfig.maxCol) {\n            this.group1NonLinkX = 0;\n            this.group1NonLinkY += this.layoutConfig.nodeInterval;\n            this.group1NonLinkColumnCount = 0;\n          }\n        }\n      } else if (d.NodeGroup === \"Gout\") {\n        if (flag_link) {\n          returnY = this.group2LinkedCol % 2 === 1 ? this.group2LinkedY + this.layoutConfig.offset : this.group2LinkedY;\n          this.group2LinkedCol++;\n\n          if (this.group2LinkedCol === this.layoutConfig.maxCol) {\n            this.group2LinkedCol = 0;\n            this.group2LinkedRow++;\n            this.group2LinkedX = this.group2LinkedRow % 2 === 1 ? 700 + this.layoutConfig.offset : 700;\n            this.group2LinkedY += this.layoutConfig.nodeInterval;\n            this.group2LinkedColumnCount = 0;\n          }\n        } else {\n          returnY = this.group2NonLinkY;\n          this.group2NonLinkColumnCount++;\n\n          if (this.group2NonLinkColumnCount === this.layoutConfig.maxCol) {\n            this.group2NonLinkX = 700;\n            this.group2NonLinkY += this.layoutConfig.nodeInterval;\n            this.group2NonLinkColumnCount = 0;\n          }\n        }\n      }\n\n      return returnY;\n    }\n  }]);\n\n  return NetworkDiagram;\n}(Component);","map":{"version":3,"sources":["/Users/wangzhenyu/Desktop/fyp_workspace/meta_platform/app/javascript/viz/network-diagram/network.ts"],"names":["Oviz","Color","Component","d3","Gravity","NetworkDiagram","edgeColor","_nodes","_links","_updateNode","_scaleX","_scaleY","_edgeScale","group1LinkedX","group2LinkedX","group1LinkedY","group2LinkedY","group1LinkedRow","group1LinkedCol","group2LinkedRow","group2LinkedCol","group1LinkedColumnCount","group2LinkedColumnCount","group1NonLinkX","group2NonLinkX","group1NonLinkY","group2NonLinkY","group1NonLinkColumnCount","group2NonLinkColumnCount","layoutConfig","nodeInterval","groupWidth","offset","maxCol","t","str","length","strs","split","parsedStr","forEach","s","i","concat","d","details","id","size","NodePhylum","NodeGenus","l","source","target","parseFloat","correlation","toFixed","_","el","$on","stage","group","evp","elp","utils","mouse","newX","newY","console","log","nid","_prop","setState","group1","literal","desaturate","string","group2","lighten","prop","map","temp_x","setUpXCoordinates","temp_y","setUpYCoordinates","e","NodeName","source_x","source_y","target_x","target_y","_x","_y","maxCor","scaleQuantize","domain","range","node","link","startsWith","NodeGroup","colorMap","Other","Unclassified","returnX","flag_link","returnY"],"mappings":"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","sourcesContent":["import Oviz from \"crux\";\nimport { Color } from \"crux/dist/color\";\nimport { Component, ComponentOption } from \"crux/dist/element\";\nimport * as d3 from \"d3\";\n\nexport enum Gravity {\n    Top = 0, Right, Bottom, Left,\n}\n\ninterface DiagramLink {\n    source: string;\n    target: string;\n    correlation: number;\n    source_x?: number;\n    source_y?: number;\n    target_x?: number;\n    target_y?: number;\n    _strokeWidth?: number;\n}\n\nexport interface NetworkDiagramOption<Data extends T[], T= any> extends ComponentOption {\n    _gravity?: Gravity;\n    // the gravity or direction of the graph\n    _raidus?: number | ((d: T, i: number) => number);\n    // the radius of each dot\n    _maxX?: number;\n    // the maxv alue of x that users provide\n    _minX?: number;\n    // the min value of x that users provide\n    _maxY?: number;\n    // the maxv alue of y that users provide\n    _minY?: number;\n    // The value of the y-coordinate (belongs to the vertical axis)\n    _yFunc?: (d: T, i?: number) => number;\n    // The value of the x-coordinate (belongs to the horizontal axis)\n    _xFunc?: (d: T, i?: number) => number;\n    // The class of circles\n    _classFunc?: (d: T, i?: number) => string;\n    // Whether to display labels of circles\n    _labelFunc?: (d: T, i?: number) => string;\n    _links?: DiagramLink[]  ;\n    _nodes?: any[] ;\n    _phylums?: any;\n    colorMap: any;\n    showNodeNames: boolean;\n}\n\nexport class NetworkDiagram extends Component<NetworkDiagramOption<any[], any>> {\n\n    protected edgeColor: {group1:string, group2:string };\n\n    protected _nodes: any[];\n    protected _links: DiagramLink[];\n    protected _updateNode: {nid, newX, newY};\n    protected _scaleX;\n    protected _scaleY;\n    protected _edgeScale;\n    // the nodes groups are hardcoded as\n    // group 1: Control enrichment\n    // group 2: Gout enrichment\n    protected group1LinkedX = 0;\n    protected group2LinkedX = 700;\n    protected group1LinkedY = 100;\n    protected group2LinkedY = 100;\n    protected group1LinkedRow = 0;\n    protected group1LinkedCol = 0;\n    protected group2LinkedRow = 0;\n    protected group2LinkedCol = 0;\n    protected group1LinkedColumnCount = 0;\n    protected group2LinkedColumnCount = 0;\n    protected group1NonLinkX = 0;\n    protected group2NonLinkX = 700;\n    protected group1NonLinkY = 600;\n    protected group2NonLinkY = 600;\n    protected group1NonLinkColumnCount = 0;\n    protected group2NonLinkColumnCount = 0;\n    protected layoutConfig = {\n        nodeInterval: 70,\n        groupWidth: 600,\n        offset: 20,\n        maxCol: 8,\n    };\n\n    render() {\n        return this.t`Component{\n            width = 1500; height = 800; id = \"network\"\n            Line {\n                x1 = layoutConfig.groupWidth; x2 = layoutConfig.groupWidth; y1 = 0; y2 = 700\n                strokeWidth = 2\n                stroke = \"grey\"\n                dashArray = \"4 2\"\n            }\n            Text.centered {\n                text = \"Control Enrichment\"\n                x = layoutConfig.groupWidth/2; y = 20\n                fontSize = 20\n                style:user-select = \"none\"\n            }\n            Text.centered {\n                text = \"Gout Enrichment\"\n                x = layoutConfig.groupWidth * 1.5; y = 20\n                fontSize = 20\n                style:user-select = \"none\"\n            }\n            @for (l, i) in _links {\n                Line {\n                    key = i;\n                    x1 = l.source_x; x2 = l.target_x; y1 = l.source_y; y2 = l.target_y\n                    strokeWidth = l.correlation < 0.5 ? 0.5 : _edgeScale(l.correlation)\n                    stroke = l.correlation < 0.5 ? edgeColor.group1 : edgeColor.group2\n                    behavior:tooltip {\n                        content = [edgeDetail, l]\n                    }\n                }\n            }\n            @for d in _nodes {\n                Component {\n                    id = d.NodeName\n                    x = d._x\n                    y = d._y\n                    on:mousedown = (ev, el) => dragStart(ev, el, d.NodeGroup)\n                    on:mouseup = (ev, el) => dragEnd(ev, el)\n                    \n                    behavior:tooltip {\n                        content = [nodeDetail, d]\n                    }\n                    \n                    Circle.centered{\n                        r =  Math.sqrt(d.NodeSize) * 3.14\n                        fill = getFillByPhylumAndGenus(d)\n                    }\n                    @if prop.showNodeNames {\n                        Text.centered {\n                            html = parseText(d.NodeName)\n                            fill = \"black\"\n                            style:font-weight = \"bold\"\n                            style:user-select = \"none\"\n                        }\n                    }\n                }\n            }\n        }`;\n    }\n\n    parseText(str: string): string {\n        if (str.length > 10 ) {\n            const strs = str.split(\" \");\n            let parsedStr: string = \"\";\n            strs.forEach( (s, i) => {\n                parsedStr = parsedStr.concat(`<tspan x = ${s.length / 4 * -1}em dy = ${i}em>${s}</tspan>`);\n            });\n            return parsedStr;\n        }\n        return str;\n    }\n\n    nodeDetail(d) {\n        let details = `Node ID: ${d.id}<br>Size: ${d.size}`;\n        details += `<br>Phylum: ${d.NodePhylum}<br>Genus: ${d.NodeGenus}`;\n        return details;\n    }\n    edgeDetail(l) {\n        let details = `Source ID: ${l.source}<br>Target ID: ${l.target}`;\n        details += `<br>Correlation: ${parseFloat(l.correlation).toFixed(3)}`;\n        return details;\n    }\n\n    protected dragEnd(_, el) {\n        delete this.$on['mousemove'];\n        el.stage = null;\n        this._updateNode = null;\n        // this.setState(null);\n    }\n\n    protected dragStart(_, el, group) {\n        this.$on['mousemove'] = (evp, elp) => {\n            let [newX, newY] = Oviz.utils.mouse(elp, evp);\n            console.log(`${newX} - ${newY}`)\n            if (newY < 50 || newY > 700) {\n                el.stage = null;\n                return;\n            }\n            if (group === \"Control\") {\n                if (newX < 0 || newX > this.layoutConfig.groupWidth) {\n                    el.stage = null;\n                    return;\n                }\n            } else {\n                if (newX < this.layoutConfig.groupWidth || newX > this.layoutConfig.groupWidth * 2 + 100) {\n                    el.stage = null;\n                    return;\n                }\n            }\n            this._updateNode = {nid: el._prop.id, newX, newY};\n            this.setState({\n                ...this._updateNode,\n            });\n        }\n        el.stage = \"dragging\";\n    }\n    didCreate() {\n        this.edgeColor = {\n            group1: Color.literal(\"red\").desaturate(30).string,\n            group2: Color.literal(\"blue\").desaturate(30).lighten(20).string,\n        }\n        this._nodes = this.prop._nodes.map(d => {\n            const temp_x = this.setUpXCoordinates(d);\n            const temp_y = this.setUpYCoordinates(d);\n            this.prop._links.forEach(e => {\n                if (d.NodeName === e.source) {\n                    e.source_x = temp_x;\n                    e.source_y = temp_y;\n                }\n                if (d.NodeName === e.target) {\n                    e.target_x = temp_x;\n                    e.target_y = temp_y;\n                }\n            });\n            d._x = temp_x;\n            d._y = temp_y;\n            return d;\n        });\n        let maxCor = 0;\n        this.prop._links.forEach(d => {\n            if (maxCor < d.correlation) maxCor = d.correlation;\n        });\n        this._links = this.prop._links;\n        this._edgeScale = d3.scaleQuantize()\n                            .domain([0.5, maxCor])\n                            .range([1, 1.5, 2]);\n    }\n\n    willRender() {\n        if (this._updateNode) {\n            this._nodes.forEach( node => {\n                if (node.NodeName === this._updateNode.nid) {\n                    node._x = this._updateNode.newX;\n                    node._y = this._updateNode.newY;\n                }\n            });\n            this._links.forEach( link => {\n                if ( link.source === this._updateNode.nid) {\n                    link.source_x = this._updateNode.newX;\n                    link.source_y = this._updateNode.newY;\n                } else if ( link.target === this._updateNode.nid) {\n                    link.target_x = this._updateNode.newX;\n                    link.target_y = this._updateNode.newY;\n                }\n            });\n        }\n    }\n\n    protected getParsedNodes() {\n        return this.prop._nodes.map(d => {\n            const temp_x = this.setUpXCoordinates(d);\n            const temp_y = this.setUpYCoordinates(d);\n            this.prop._links.forEach(e => {\n                if (d.id === e.source) {\n                    e.source_x = temp_x;\n                    e.source_y = temp_y;\n                }\n                if (d.id === e.target) {\n                    e.target_x = temp_x;\n                    e.target_y = temp_y;\n                }\n            });\n            d._x = temp_x;\n            d._y = temp_y;\n            return d;\n        });\n    }\n\n    protected getFillByPhylumAndGenus(d) {\n        if (d.NodeName.startsWith(d.NodeGroup)) return this.prop.colorMap.Other.Unclassified;\n        return this.prop.colorMap[d.NodePhylum][d.NodeGenus];\n    }\n\n    protected setUpXCoordinates(d) {\n        let returnX = 0;\n        let flag_link = false;\n        this.prop._links.forEach((e, i) => {\n            if (e.source === d.NodeName || e.target === d.NodeName) {\n                flag_link = true;\n            }\n        });\n        if (d.NodeGroup === \"Control\") {\n            if (flag_link) {\n                returnX = this.group1LinkedX;\n                this.group1LinkedX += this.layoutConfig.nodeInterval;\n            } else {\n                returnX = this.group1NonLinkX;\n                this.group1NonLinkX += this.layoutConfig.nodeInterval;\n            }\n        } else if (d.NodeGroup === \"Gout\") {\n            if (flag_link) {\n                returnX = this.group2LinkedX;\n                this.group2LinkedX += this.layoutConfig.nodeInterval;\n            } else {\n                returnX = this.group2NonLinkX;\n                this.group2NonLinkX += this.layoutConfig.nodeInterval;\n            }\n        }\n        return returnX;\n    }\n\n    protected setUpYCoordinates(d) {\n        let returnY = 0;\n        let flag_link = false;\n        this.prop._links.forEach(e => {\n            if (e.source === d.NodeName || e.target === d.NodeName) {\n                flag_link = true;\n            }\n        });\n        // Group 1 Y\n        if (d.NodeGroup === \"Control\") {\n            if (flag_link) {\n                returnY = this.group1LinkedCol % 2 === 1 ? this.group1LinkedY + this.layoutConfig.offset\n                    : this.group1LinkedY;\n                // this.group1LinkedColumnCount ++;\n                this.group1LinkedCol ++;\n                if (this.group1LinkedCol === this.layoutConfig.maxCol) {\n                    this.group1LinkedCol = 0;\n                    this.group1LinkedRow ++;\n                    this.group1LinkedX = this.group1LinkedRow % 2 === 1 ? this.layoutConfig.offset : 0;\n                    this.group1LinkedY += this.layoutConfig.nodeInterval;\n                    this.group1LinkedColumnCount = 0;\n                }\n            } else {\n                returnY = this.group1NonLinkY;\n                this.group1NonLinkColumnCount ++;\n                if (this.group1NonLinkColumnCount === this.layoutConfig.maxCol) {\n                    this.group1NonLinkX = 0;\n                    this.group1NonLinkY += this.layoutConfig.nodeInterval;\n                    this.group1NonLinkColumnCount = 0;\n                }\n            }\n        } else if (d.NodeGroup === \"Gout\") {\n            if (flag_link) {\n                returnY = this.group2LinkedCol % 2 === 1 ? this.group2LinkedY + this.layoutConfig.offset\n                    : this.group2LinkedY;\n                this.group2LinkedCol ++;\n                if (this.group2LinkedCol === this.layoutConfig.maxCol) {\n                    this.group2LinkedCol = 0;\n                    this.group2LinkedRow ++;\n                    this.group2LinkedX = this.group2LinkedRow % 2 === 1 ? 700 + this.layoutConfig.offset : 700;\n                    this.group2LinkedY += this.layoutConfig.nodeInterval;\n                    this.group2LinkedColumnCount = 0;\n                }\n            } else {\n                returnY = this.group2NonLinkY;\n                this.group2NonLinkColumnCount ++;\n                if (this.group2NonLinkColumnCount === this.layoutConfig.maxCol) {\n                    this.group2NonLinkX = 700;\n                    this.group2NonLinkY += this.layoutConfig.nodeInterval;\n                    this.group2NonLinkColumnCount = 0;\n                }\n            }\n        }\n        return returnY;\n    }\n\n}\n"]},"metadata":{},"sourceType":"module"}