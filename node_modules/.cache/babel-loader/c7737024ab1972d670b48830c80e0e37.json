{"ast":null,"code":"function ownKeys(object, enumerableOnly) {\n  var keys = Object.keys(object);\n\n  if (Object.getOwnPropertySymbols) {\n    var symbols = Object.getOwnPropertySymbols(object);\n    if (enumerableOnly) symbols = symbols.filter(function (sym) {\n      return Object.getOwnPropertyDescriptor(object, sym).enumerable;\n    });\n    keys.push.apply(keys, symbols);\n  }\n\n  return keys;\n}\n\nfunction _objectSpread(target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = arguments[i] != null ? arguments[i] : {};\n\n    if (i % 2) {\n      ownKeys(Object(source), true).forEach(function (key) {\n        _defineProperty(target, key, source[key]);\n      });\n    } else if (Object.getOwnPropertyDescriptors) {\n      Object.defineProperties(target, Object.getOwnPropertyDescriptors(source));\n    } else {\n      ownKeys(Object(source)).forEach(function (key) {\n        Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));\n      });\n    }\n  }\n\n  return target;\n}\n\nfunction _defineProperty(obj, key, value) {\n  if (key in obj) {\n    Object.defineProperty(obj, key, {\n      value: value,\n      enumerable: true,\n      configurable: true,\n      writable: true\n    });\n  } else {\n    obj[key] = value;\n  }\n\n  return obj;\n}\n\nimport Vue from '../../utils/vue';\nimport { arrayIncludes } from '../../utils/array';\nimport { BVFormBtnLabelControl, dropdownProps } from '../../utils/bv-form-btn-label-control';\nimport { getComponentConfig } from '../../utils/config';\nimport { createDate, constrainDate, formatYMD, parseYMD } from '../../utils/date';\nimport { attemptBlur, attemptFocus } from '../../utils/dom';\nimport { isUndefinedOrNull } from '../../utils/inspect';\nimport { pick } from '../../utils/object';\nimport idMixin from '../../mixins/id';\nimport { BButton } from '../button/button';\nimport { BCalendar, STR_LONG, STR_NARROW, STR_NUMERIC, STR_SHORT } from '../calendar/calendar';\nimport { BIconCalendar, BIconCalendarFill } from '../../icons/icons';\nvar NAME = 'BFormDatepicker'; // Fallback to BCalendar prop if no value found\n\nvar getConfigFallback = function getConfigFallback(prop) {\n  return getComponentConfig(NAME, prop) || getComponentConfig('BCalendar', prop);\n}; // We create our props as a mixin so that we can control\n// where they appear in the props listing reference section\n\n\nvar propsMixin = {\n  props: _objectSpread({\n    value: {\n      type: [String, Date],\n      \"default\": null\n    },\n    valueAsDate: {\n      type: Boolean,\n      \"default\": false\n    },\n    resetValue: {\n      type: [String, Date] // default: null\n\n    },\n    initialDate: {\n      // This specifies the calendar year/month/day that will be shown when\n      // first opening the datepicker if no v-model value is provided\n      // Default is the current date (or `min`/`max`)\n      // Passed directly to <b-calendar>\n      type: [String, Date] // default: null\n\n    },\n    placeholder: {\n      type: String // Defaults to `labelNoDateSelected` from calendar context\n      // default: null\n\n    },\n    size: {\n      type: String // default: null\n\n    },\n    min: {\n      type: [String, Date] // default: null\n\n    },\n    max: {\n      type: [String, Date] // default: null\n\n    },\n    disabled: {\n      type: Boolean,\n      \"default\": false\n    },\n    readonly: {\n      type: Boolean,\n      \"default\": false\n    },\n    required: {\n      // If true adds the `aria-required` attribute\n      type: Boolean,\n      \"default\": false\n    },\n    name: {\n      type: String // default: null\n\n    },\n    form: {\n      type: String // default: null\n\n    },\n    state: {\n      // Tri-state prop: `true`, `false` or `null`\n      type: Boolean,\n      \"default\": null\n    },\n    dateDisabledFn: {\n      type: Function // default: null\n\n    },\n    noCloseOnSelect: {\n      type: Boolean,\n      \"default\": false\n    },\n    hideHeader: {\n      type: Boolean,\n      \"default\": false\n    },\n    showDecadeNav: {\n      // When `true` enables the decade navigation buttons\n      type: Boolean,\n      \"default\": false\n    },\n    locale: {\n      type: [String, Array] // default: null\n\n    },\n    startWeekday: {\n      // `0` (Sunday), `1` (Monday), ... `6` (Saturday)\n      // Day of week to start calendar on\n      type: [Number, String],\n      \"default\": 0\n    },\n    direction: {\n      type: String // default: null\n\n    },\n    buttonOnly: {\n      type: Boolean,\n      \"default\": false\n    },\n    buttonVariant: {\n      // Applicable in button only mode\n      type: String,\n      \"default\": 'secondary'\n    },\n    calendarWidth: {\n      // Width of the calendar dropdown\n      type: String,\n      \"default\": '270px'\n    },\n    selectedVariant: {\n      // Variant color to use for the selected date\n      type: String,\n      \"default\": 'primary'\n    },\n    todayVariant: {\n      // Variant color to use for today's date (defaults to `variant`)\n      type: String // default: null\n\n    },\n    noHighlightToday: {\n      // Disable highlighting today's date\n      type: Boolean,\n      \"default\": false\n    },\n    todayButton: {\n      type: Boolean,\n      \"default\": false\n    },\n    labelTodayButton: {\n      type: String,\n      \"default\": function _default() {\n        return getComponentConfig(NAME, 'labelTodayButton');\n      }\n    },\n    todayButtonVariant: {\n      type: String,\n      \"default\": 'outline-primary'\n    },\n    resetButton: {\n      type: Boolean,\n      \"default\": false\n    },\n    labelResetButton: {\n      type: String,\n      \"default\": function _default() {\n        return getComponentConfig(NAME, 'labelResetButton');\n      }\n    },\n    resetButtonVariant: {\n      type: String,\n      \"default\": 'outline-danger'\n    },\n    closeButton: {\n      type: Boolean,\n      \"default\": false\n    },\n    labelCloseButton: {\n      type: String,\n      \"default\": function _default() {\n        return getComponentConfig(NAME, 'labelCloseButton');\n      }\n    },\n    closeButtonVariant: {\n      type: String,\n      \"default\": 'outline-secondary'\n    },\n    dateInfoFn: {\n      // Passed through to b-calendar\n      type: Function // default: undefined\n\n    },\n    // Labels for buttons and keyboard shortcuts\n    // These pick BCalendar global config if no BFormDate global config\n    labelPrevDecade: {\n      type: String,\n      \"default\": function _default() {\n        return getConfigFallback('labelPrevDecade');\n      }\n    },\n    labelPrevYear: {\n      type: String,\n      \"default\": function _default() {\n        return getConfigFallback('labelPrevYear');\n      }\n    },\n    labelPrevMonth: {\n      type: String,\n      \"default\": function _default() {\n        return getConfigFallback('labelPrevMonth');\n      }\n    },\n    labelCurrentMonth: {\n      type: String,\n      \"default\": function _default() {\n        return getConfigFallback('labelCurrentMonth');\n      }\n    },\n    labelNextMonth: {\n      type: String,\n      \"default\": function _default() {\n        return getConfigFallback('labelNextMonth');\n      }\n    },\n    labelNextYear: {\n      type: String,\n      \"default\": function _default() {\n        return getConfigFallback('labelNextYear');\n      }\n    },\n    labelNextDecade: {\n      type: String,\n      \"default\": function _default() {\n        return getConfigFallback('labelNextDecade');\n      }\n    },\n    labelToday: {\n      type: String,\n      \"default\": function _default() {\n        return getConfigFallback('labelToday');\n      }\n    },\n    labelSelected: {\n      type: String,\n      \"default\": function _default() {\n        return getConfigFallback('labelSelected');\n      }\n    },\n    labelNoDateSelected: {\n      type: String,\n      \"default\": function _default() {\n        return getConfigFallback('labelNoDateSelected');\n      }\n    },\n    labelCalendar: {\n      type: String,\n      \"default\": function _default() {\n        return getConfigFallback('labelCalendar');\n      }\n    },\n    labelNav: {\n      type: String,\n      \"default\": function _default() {\n        return getConfigFallback('labelNav');\n      }\n    },\n    labelHelp: {\n      type: String,\n      \"default\": function _default() {\n        return getConfigFallback('labelHelp');\n      }\n    },\n    dateFormatOptions: {\n      // `Intl.DateTimeFormat` object\n      // Note: This value is *not* to be placed in the global config\n      type: Object,\n      \"default\": function _default() {\n        return {\n          year: STR_NUMERIC,\n          month: STR_LONG,\n          day: STR_NUMERIC,\n          weekday: STR_LONG\n        };\n      }\n    },\n    weekdayHeaderFormat: {\n      // Format of the weekday names at the top of the calendar\n      // Note: This value is *not* to be placed in the global config\n      type: String,\n      // `short` is typically a 3 letter abbreviation,\n      // `narrow` is typically a single letter\n      // `long` is the full week day name\n      // Although some locales may override this (i.e `ar`, etc)\n      \"default\": STR_SHORT,\n      validator: function validator(value) {\n        return arrayIncludes([STR_LONG, STR_SHORT, STR_NARROW], value);\n      }\n    },\n    // Dark mode\n    dark: {\n      type: Boolean,\n      \"default\": false\n    },\n    // extra dropdown stuff\n    menuClass: {\n      type: [String, Array, Object] // default: null\n\n    }\n  }, dropdownProps)\n}; // --- BFormDate component ---\n// @vue/component\n\nexport var BFormDatepicker = /*#__PURE__*/Vue.extend({\n  name: NAME,\n  // The mixins order determines the order of appearance in the props reference section\n  mixins: [idMixin, propsMixin],\n  model: {\n    prop: 'value',\n    event: 'input'\n  },\n  data: function data() {\n    return {\n      // We always use `YYYY-MM-DD` value internally\n      localYMD: formatYMD(this.value) || '',\n      // If the popup is open\n      isVisible: false,\n      // Context data from BCalendar\n      localLocale: null,\n      isRTL: false,\n      formattedValue: '',\n      activeYMD: ''\n    };\n  },\n  computed: {\n    calendarYM: function calendarYM() {\n      // Returns the calendar year/month\n      // Returns the `YYYY-MM` portion of the active calendar date\n      return this.activeYMD.slice(0, -3);\n    },\n    calendarProps: function calendarProps() {\n      // Use self for better minification, as `this` won't\n      // minimize and we reference it many times below\n      var self = this;\n      return {\n        hidden: !self.isVisible,\n        value: self.localYMD,\n        min: self.min,\n        max: self.max,\n        initialDate: self.initialDate,\n        readonly: self.readonly,\n        disabled: self.disabled,\n        locale: self.locale,\n        startWeekday: self.startWeekday,\n        direction: self.direction,\n        width: self.calendarWidth,\n        dateDisabledFn: self.dateDisabledFn,\n        selectedVariant: self.selectedVariant,\n        todayVariant: self.todayVariant,\n        dateInfoFn: self.dateInfoFn,\n        hideHeader: self.hideHeader,\n        showDecadeNav: self.showDecadeNav,\n        noHighlightToday: self.noHighlightToday,\n        labelPrevDecade: self.labelPrevDecade,\n        labelPrevYear: self.labelPrevYear,\n        labelPrevMonth: self.labelPrevMonth,\n        labelCurrentMonth: self.labelCurrentMonth,\n        labelNextMonth: self.labelNextMonth,\n        labelNextYear: self.labelNextYear,\n        labelNextDecade: self.labelNextDecade,\n        labelToday: self.labelToday,\n        labelSelected: self.labelSelected,\n        labelNoDateSelected: self.labelNoDateSelected,\n        labelCalendar: self.labelCalendar,\n        labelNav: self.labelNav,\n        labelHelp: self.labelHelp,\n        dateFormatOptions: self.dateFormatOptions,\n        weekdayHeaderFormat: self.weekdayHeaderFormat\n      };\n    },\n    computedLang: function computedLang() {\n      return (this.localLocale || '').replace(/-u-.*$/i, '') || null;\n    },\n    computedResetValue: function computedResetValue() {\n      return formatYMD(constrainDate(this.resetValue)) || '';\n    }\n  },\n  watch: {\n    value: function value(newVal) {\n      this.localYMD = formatYMD(newVal) || '';\n    },\n    localYMD: function localYMD(newVal) {\n      // We only update the v-model when the datepicker is open\n      if (this.isVisible) {\n        this.$emit('input', this.valueAsDate ? parseYMD(newVal) || null : newVal || '');\n      }\n    },\n    calendarYM: function calendarYM(newVal, oldVal)\n    /* istanbul ignore next */\n    {\n      // Displayed calendar month has changed\n      // So possibly the calendar height has changed...\n      // We need to update popper computed position\n      if (newVal !== oldVal && oldVal) {\n        try {\n          this.$refs.control.updatePopper();\n        } catch (_unused) {}\n      }\n    }\n  },\n  methods: {\n    // Public methods\n    focus: function focus() {\n      if (!this.disabled) {\n        attemptFocus(this.$refs.control);\n      }\n    },\n    blur: function blur() {\n      if (!this.disabled) {\n        attemptBlur(this.$refs.control);\n      }\n    },\n    // Private methods\n    setAndClose: function setAndClose(ymd) {\n      var _this = this;\n\n      this.localYMD = ymd; // Close calendar popup, unless `noCloseOnSelect`\n\n      if (!this.noCloseOnSelect) {\n        this.$nextTick(function () {\n          _this.$refs.control.hide(true);\n        });\n      }\n    },\n    onSelected: function onSelected(ymd) {\n      var _this2 = this;\n\n      this.$nextTick(function () {\n        _this2.setAndClose(ymd);\n      });\n    },\n    onInput: function onInput(ymd) {\n      if (this.localYMD !== ymd) {\n        this.localYMD = ymd;\n      }\n    },\n    onContext: function onContext(ctx) {\n      var activeYMD = ctx.activeYMD,\n          isRTL = ctx.isRTL,\n          locale = ctx.locale,\n          selectedYMD = ctx.selectedYMD,\n          selectedFormatted = ctx.selectedFormatted;\n      this.isRTL = isRTL;\n      this.localLocale = locale;\n      this.formattedValue = selectedFormatted;\n      this.localYMD = selectedYMD;\n      this.activeYMD = activeYMD; // Re-emit the context event\n\n      this.$emit('context', ctx);\n    },\n    onTodayButton: function onTodayButton() {\n      // Set to today (or min/max if today is out of range)\n      this.setAndClose(formatYMD(constrainDate(createDate(), this.min, this.max)));\n    },\n    onResetButton: function onResetButton() {\n      this.setAndClose(this.computedResetValue);\n    },\n    onCloseButton: function onCloseButton() {\n      this.$refs.control.hide(true);\n    },\n    // Menu handlers\n    onShow: function onShow() {\n      this.isVisible = true;\n    },\n    onShown: function onShown() {\n      var _this3 = this;\n\n      this.$nextTick(function () {\n        attemptFocus(_this3.$refs.calendar);\n\n        _this3.$emit('shown');\n      });\n    },\n    onHidden: function onHidden() {\n      this.isVisible = false;\n      this.$emit('hidden');\n    },\n    // Render helpers\n    defaultButtonFn: function defaultButtonFn(_ref) {\n      var isHovered = _ref.isHovered,\n          hasFocus = _ref.hasFocus;\n      return this.$createElement(isHovered || hasFocus ? BIconCalendarFill : BIconCalendar, {\n        attrs: {\n          'aria-hidden': 'true'\n        }\n      });\n    }\n  },\n  render: function render(h) {\n    var $scopedSlots = this.$scopedSlots;\n    var localYMD = this.localYMD;\n    var disabled = this.disabled;\n    var readonly = this.readonly;\n    var placeholder = isUndefinedOrNull(this.placeholder) ? this.labelNoDateSelected : this.placeholder; // Optional footer buttons\n\n    var $footer = [];\n\n    if (this.todayButton) {\n      var label = this.labelTodayButton;\n      $footer.push(h(BButton, {\n        props: {\n          size: 'sm',\n          disabled: disabled || readonly,\n          variant: this.todayButtonVariant\n        },\n        attrs: {\n          'aria-label': label || null\n        },\n        on: {\n          click: this.onTodayButton\n        }\n      }, label));\n    }\n\n    if (this.resetButton) {\n      var _label = this.labelResetButton;\n      $footer.push(h(BButton, {\n        props: {\n          size: 'sm',\n          disabled: disabled || readonly,\n          variant: this.resetButtonVariant\n        },\n        attrs: {\n          'aria-label': _label || null\n        },\n        on: {\n          click: this.onResetButton\n        }\n      }, _label));\n    }\n\n    if (this.closeButton) {\n      var _label2 = this.labelCloseButton;\n      $footer.push(h(BButton, {\n        props: {\n          size: 'sm',\n          disabled: disabled,\n          variant: this.closeButtonVariant\n        },\n        attrs: {\n          'aria-label': _label2 || null\n        },\n        on: {\n          click: this.onCloseButton\n        }\n      }, _label2));\n    }\n\n    if ($footer.length > 0) {\n      $footer = [h('div', {\n        staticClass: 'b-form-date-controls d-flex flex-wrap',\n        \"class\": {\n          'justify-content-between': $footer.length > 1,\n          'justify-content-end': $footer.length < 2\n        }\n      }, $footer)];\n    }\n\n    var $calendar = h(BCalendar, {\n      key: 'calendar',\n      ref: 'calendar',\n      staticClass: 'b-form-date-calendar w-100',\n      props: this.calendarProps,\n      on: {\n        selected: this.onSelected,\n        input: this.onInput,\n        context: this.onContext\n      },\n      scopedSlots: pick($scopedSlots, ['nav-prev-decade', 'nav-prev-year', 'nav-prev-month', 'nav-this-month', 'nav-next-month', 'nav-next-year', 'nav-next-decade'])\n    }, $footer);\n    return h(BVFormBtnLabelControl, {\n      ref: 'control',\n      staticClass: 'b-form-datepicker',\n      props: _objectSpread(_objectSpread({}, this.$props), {}, {\n        // Overridden / computed props\n        id: this.safeId(),\n        rtl: this.isRTL,\n        lang: this.computedLang,\n        value: localYMD || '',\n        formattedValue: localYMD ? this.formattedValue : '',\n        placeholder: placeholder || '',\n        menuClass: [{\n          'bg-dark': !!this.dark,\n          'text-light': !!this.dark\n        }, this.menuClass]\n      }),\n      on: {\n        show: this.onShow,\n        shown: this.onShown,\n        hidden: this.onHidden\n      },\n      scopedSlots: {\n        'button-content': $scopedSlots['button-content'] || this.defaultButtonFn\n      }\n    }, [$calendar]);\n  }\n});","map":null,"metadata":{},"sourceType":"module"}