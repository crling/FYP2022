{"ast":null,"code":"function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }\n\nfunction _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }\n\nimport { toRad } from \"./math\";\nexport var Matrix = /*#__PURE__*/function () {\n  function Matrix() {\n    var a = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 1;\n    var c = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;\n    var e = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 0;\n    var b = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : 0;\n    var d = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : 1;\n    var f = arguments.length > 5 && arguments[5] !== undefined ? arguments[5] : 0;\n\n    _classCallCheck(this, Matrix);\n\n    this.a = a;\n    this.c = c;\n    this.e = e;\n    this.b = b;\n    this.d = d;\n    this.f = f;\n  }\n\n  _createClass(Matrix, [{\n    key: \"transform\",\n    value: function transform(m) {\n      return multiply(this, m);\n    }\n  }, {\n    key: \"inverse\",\n    value: function inverse() {\n      var C = 1.0 / (this.a * this.d - this.b * this.c);\n      return new Matrix(this.d * C, -this.c * C, (this.c * this.f - this.d * this.e) * C, -this.b * C, this.a * C, (this.b * this.e - this.a * this.f) * C);\n    }\n  }], [{\n    key: \"translate\",\n    value: function translate(x, y) {\n      return new Matrix(1, 0, x, 0, 1, y);\n    }\n  }, {\n    key: \"rotate\",\n    value: function rotate(d) {\n      var cos = Math.cos(toRad(d));\n      var sin = Math.sin(toRad(d));\n      return new Matrix(cos, -sin, 0, sin, cos, 0);\n    }\n  }]);\n\n  return Matrix;\n}();\n\nvar multiply = function multiply(m1, m2) {\n  return new Matrix(m1.a * m2.a + m1.c * m2.b, m1.a * m2.c + m1.c * m2.d, m1.a * m2.e + m1.c * m2.f + m1.e, m1.b * m2.a + m1.d * m2.b, m1.b * m2.c + m1.d * m2.d, m1.b * m2.e + m1.d * m2.f + m1.f);\n};","map":null,"metadata":{},"sourceType":"module"}