{"ast":null,"code":"function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nfunction _toConsumableArray(arr) { return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _unsupportedIterableToArray(arr) || _nonIterableSpread(); }\n\nfunction _nonIterableSpread() { throw new TypeError(\"Invalid attempt to spread non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\"); }\n\nfunction _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === \"string\") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === \"Object\" && o.constructor) n = o.constructor.name; if (n === \"Map\" || n === \"Set\") return Array.from(o); if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }\n\nfunction _iterableToArray(iter) { if (typeof Symbol !== \"undefined\" && Symbol.iterator in Object(iter)) return Array.from(iter); }\n\nfunction _arrayWithoutHoles(arr) { if (Array.isArray(arr)) return _arrayLikeToArray(arr); }\n\nfunction _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }\n\nimport Oviz from \"crux\";\nimport { Color } from \"crux/dist/color\";\nimport * as TextSize from \"crux/dist/utils/text-size\";\nimport { EditText } from \"oviz-components/edit-text\";\nimport { GridPlot } from \"../../oviz-components/grid-plot\";\nimport { editorConfig } from \"./editor\";\nimport template from \"./template.bvt\";\nimport { register } from \"page/visualizers\";\nimport { getGroups } from \"utils/array\";\nimport { registerEditorConfig } from \"utils/editor\";\nimport { findBoundsForValues } from \"utils/maths\";\nimport { groupedChartColors } from \"oviz-common/palette\";\nvar MODULE_NAME = \"classifier\";\nvar plotSize = [200, 200];\nvar barGap = 4;\n\nfunction init() {\n  if (!window.gon || window.gon.module_name !== MODULE_NAME) return;\n\n  var _Oviz$visualize = Oviz.visualize({\n    el: \"#canvas\",\n    template: template,\n    components: {\n      GridPlot: GridPlot,\n      EditText: EditText\n    },\n    data: {\n      config: {\n        rankIndex: 0,\n        plotWidth: 1000,\n        showOutliers: true,\n        showP: true,\n        hollowBox: true,\n        xLabelRotation: 45,\n        labelFontSize: 12,\n        titleProps: {\n          x: 10,\n          fontSize: 14\n        }\n      },\n      colors: {\n        // area: \"rgb(233, 0,0, 0.3)\",\n        area: \"pink\",\n        highlight: \"red\",\n        bar: \"lightGrey\",\n        barHighlight: \"pink\" // LightCoral\n\n      },\n      titles: [\"Feature selection\", \"Training set\"],\n      getBoxColors: function getBoxColors(x) {\n        var hollow = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : true;\n        if (hollow) return [x, \"white\", x];else return [Color.literal(x).darken(30).string, Color.literal(x).lighten(10).string, \"white\"];\n      },\n      updateNotePos: function updateNotePos(ev, el, deltaPos) {\n        this.notesProps.x += deltaPos[0];\n        this.notesProps.y += deltaPos[1];\n        this.redraw();\n      }\n    },\n    loadData: {\n      clsPickData: {\n        fileKey: \"clsPickData\",\n        loaded: function loaded(d) {\n          this.data.pickCats = d.split(\",\");\n          return null;\n        }\n      },\n      clsBarData: {\n        fileKey: \"clsBarData\",\n        type: \"tsv\",\n        loaded: function loaded(data) {\n          var _this = this;\n\n          var catKey = data.columns[0];\n\n          var _loop = function _loop(i) {\n            var valueKey = data.columns[i];\n            var bars = data.map(function (d) {\n              return [d[catKey], parseFloat(d[valueKey])];\n            }).sort(function (a, b) {\n              return b[1] - a[1];\n            }).slice(0, 11);\n            var categories = bars.map(function (x) {\n              return x[0];\n            });\n            var valueRange = [0, Math.ceil(Math.max.apply(Math, _toConsumableArray(bars.map(function (x) {\n              return x[1];\n            }))))];\n            _this.data[\"barData\".concat(i)] = {\n              categories: categories,\n              valueRange: valueRange,\n              discreteCategory: true,\n              flip: true,\n              data: bars,\n              plotSize: plotSize,\n              invertValueAxis: true,\n              gap: barGap\n            };\n          };\n\n          for (var i = 1; i < 3; i++) {\n            _loop(i);\n          }\n\n          this.data.barData1.yLabel = \"Mean Decrease Accuracy\";\n          this.data.barData2.yLabel = \"Mean Decrease Gini\";\n          return null;\n        }\n      },\n      clsLineData: {\n        fileKey: \"clsLineData\",\n        type: \"tsv\",\n        loaded: function loaded(data) {\n          var xPosKey = data.columns[0];\n          var lineData = {};\n          var allValues = [];\n          var maxCat = 0;\n\n          var _loop2 = function _loop2(i) {\n            lineData[data.columns[i]] = {\n              key: data.columns[i],\n              values: []\n            };\n            data.forEach(function (d) {\n              var value = parseFloat(d[data.columns[i]]);\n              lineData[data.columns[i]].values.push([parseInt(d[xPosKey]), value]);\n              allValues.push(value);\n              if (parseInt(d[xPosKey]) > maxCat) maxCat = parseInt(d[xPosKey]);\n            });\n            lineData[data.columns[i]].values.sort(function (a, b) {\n              return a[0] - b[0];\n            });\n          };\n\n          for (var i = 6; i > 0; i--) {\n            _loop2(i);\n          }\n\n          this.data.medianLineKey = data.columns[1];\n          var valueRange = findBoundsForValues(allValues, 2);\n          this.data.lineData = {\n            data: lineData,\n            categoryRange: [1, maxCat],\n            valueRange: valueRange,\n            categoryUseLog: true,\n            plotSize: plotSize,\n            margin: [0.05, 0.05],\n            dataHandler: {\n              \"default\": {\n                values: function values(d) {\n                  return d.values;\n                }\n              }\n            },\n            xLabel: \"Number of variables\",\n            yLabel: \"CV Error\"\n          };\n          return null;\n        }\n      },\n      clsPredictData: {\n        fileKey: \"clsPredictData\",\n        type: \"tsv\",\n        dsvRowParser: function dsvRowParser(row, _, columns) {\n          return {\n            sampleId: row[columns[0]],\n            value: parseFloat(row[columns[1]]),\n            group: row[columns[2]]\n          };\n        },\n        loaded: function loaded(data) {\n          this.data.groups = getGroups(data, \"group\");\n          var allValues = data.map(function (x) {\n            return x.value;\n          });\n          var valueRange = findBoundsForValues(allValues, 2);\n          var boxData = {\n            values: [],\n            outliers: [],\n            means: [],\n            categories: _toConsumableArray(this.data.groups)\n          };\n          this.data.groups.forEach(function (group, i) {\n            var result = [];\n            var values = data.filter(function (d) {\n              return d.group === group;\n            }).map(function (d) {\n              return d.value;\n            });\n            var stat1 = new Oviz.algo.Statistics(values);\n            var interQuartileRange = stat1.Q3() - stat1.Q1();\n            values.forEach(function (x) {\n              if (x < stat1.Q3() - 1.5 * interQuartileRange || x > stat1.Q3() + 1.5 * interQuartileRange) {\n                boxData.outliers.push([i, x]);\n              } else {\n                result.push(x);\n              }\n            });\n            var stat2 = new Oviz.algo.Statistics(result);\n            boxData.values.push([stat2.min(), stat2.Q1(), stat2.median(), stat2.Q3(), stat2.max()]);\n            boxData.means.push(stat2.mean());\n          });\n          this.data.boxData = {\n            data: {\n              boxData: boxData\n            },\n            discreteCategories: true,\n            plotSize: plotSize,\n            valueRange: valueRange,\n            margin: [0.05, 0.05],\n            yLabel: \"Propability of Disease\"\n          };\n          var scatterData = data.sort(function (a, b) {\n            return a.value - b.value;\n          }).map(function (d, i) {\n            return _objectSpread({\n              pos: i + 1\n            }, d);\n          });\n          this.data.scatterData = {\n            data: scatterData,\n            margin: [0.05, 0.05],\n            categoryRange: [0, scatterData.length],\n            plotSize: plotSize,\n            valueRange: valueRange,\n            xLabel: \"Samples\"\n          };\n          return null;\n        }\n      },\n      clsSpecifyData: {\n        fileKey: \"clsSpecifyData\",\n        type: \"tsv\",\n        dsvRowParser: function dsvRowParser(row, _, columns) {\n          return {\n            x: 1 - parseFloat(row[columns[0]]),\n            low: parseFloat(row[columns[1]]),\n            median: parseFloat(row[columns[2]]),\n            high: parseFloat(row[columns[3]])\n          };\n        },\n        loaded: function loaded(data) {\n          var line = [];\n          var area = [];\n          data = data.sort(function (a, b) {\n            return a.x - b.x;\n          });\n          data.forEach(function (d) {\n            line.push([d.x, d.median]);\n            area.push([d.x, d.low]);\n          });\n          data.sort(function (a, b) {\n            return b.x - a.x;\n          }).forEach(function (d) {\n            area.push([d.x, d.high]);\n          });\n          this.data.specifyData = {\n            plotSize: plotSize,\n            valueRange: [0, 1],\n            categoryRange: [0, 1],\n            yLabel: \"sensitivity\",\n            xLabel: \"1 - specify\",\n            margin: [0.05, 0.05],\n            data: {\n              line: {\n                values: line,\n                key: \"median\"\n              },\n              area: {\n                values: area,\n                key: \"low-high\"\n              }\n            }\n          };\n        }\n      },\n      clsNoteData: {\n        fileKey: \"clsNoteData\",\n        loaded: function loaded(d) {\n          this.data.specifyNotes = d.split(/\\r?\\n/);\n          var width = Math.max.apply(Math, _toConsumableArray(this.data.specifyNotes.map(function (x) {\n            return TextSize.measuredTextSize(x, 11).width;\n          })));\n          var height = this.data.specifyNotes.length * 13;\n          this.data.notesProps = {\n            x: plotSize[0] - 2 - width,\n            y: plotSize[1] - height,\n            width: width,\n            height: height\n          };\n        }\n      }\n    },\n    setup: function setup() {\n      var _this2 = this;\n\n      // danger! possible conflicts with preset color names\n      this.data.groups.forEach(function (g, i) {\n        _this2.data.colors[g] = groupedChartColors[i];\n      });\n      registerEditorConfig(editorConfig(this));\n    }\n  }),\n      visualizer = _Oviz$visualize.visualizer;\n\n  return visualizer;\n}\n\nexport function registerBoxplot() {\n  register(MODULE_NAME, init);\n}\nregister(MODULE_NAME, init);","map":{"version":3,"sources":["/Users/wangzhenyu/Desktop/fyp_workspace/meta_platform/app/javascript/viz/classifier/index.ts"],"names":["Oviz","Color","TextSize","EditText","GridPlot","editorConfig","template","register","getGroups","registerEditorConfig","findBoundsForValues","groupedChartColors","MODULE_NAME","plotSize","barGap","init","window","gon","module_name","visualize","el","components","data","config","rankIndex","plotWidth","showOutliers","showP","hollowBox","xLabelRotation","labelFontSize","titleProps","x","fontSize","colors","area","highlight","bar","barHighlight","titles","getBoxColors","hollow","literal","darken","string","lighten","updateNotePos","ev","deltaPos","notesProps","y","redraw","loadData","clsPickData","fileKey","loaded","d","pickCats","split","clsBarData","type","catKey","columns","i","valueKey","bars","map","parseFloat","sort","a","b","slice","categories","valueRange","Math","ceil","max","discreteCategory","flip","invertValueAxis","gap","barData1","yLabel","barData2","clsLineData","xPosKey","lineData","allValues","maxCat","key","values","forEach","value","push","parseInt","medianLineKey","categoryRange","categoryUseLog","margin","dataHandler","xLabel","clsPredictData","dsvRowParser","row","_","sampleId","group","groups","boxData","outliers","means","result","filter","stat1","algo","Statistics","interQuartileRange","Q3","Q1","stat2","min","median","mean","discreteCategories","scatterData","pos","length","clsSpecifyData","low","high","line","specifyData","clsNoteData","specifyNotes","width","measuredTextSize","height","setup","g","visualizer","registerBoxplot"],"mappings":"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","sourcesContent":["import Oviz from \"crux\";\nimport { Color } from \"crux/dist/color\";\nimport * as TextSize from \"crux/dist/utils/text-size\";\nimport { EditText } from \"oviz-components/edit-text\";\nimport { GridPlot } from \"../../oviz-components/grid-plot\";\nimport { editorConfig } from \"./editor\";\nimport template from \"./template.bvt\";\n\nimport {register} from \"page/visualizers\";\nimport { getGroups } from \"utils/array\";\nimport { registerEditorConfig } from \"utils/editor\";\nimport { computeLog, findBoundsForValues } from \"utils/maths\";\n\nimport { groupedChartColors} from \"oviz-common/palette\";\n\nconst MODULE_NAME = \"classifier\";\n\nconst plotSize = [200, 200];\nconst barGap = 4;\n\nfunction init() {\n    if (!window.gon || window.gon.module_name !== MODULE_NAME) return;\n\n    const {visualizer} = Oviz.visualize({\n        el: \"#canvas\",\n        template,\n        components: { GridPlot, EditText },\n        data: {\n            config: {\n                rankIndex: 0,\n                plotWidth: 1000,\n                showOutliers: true,\n                showP: true,\n                hollowBox: true,\n                xLabelRotation: 45,\n                labelFontSize: 12,\n                titleProps: {\n                    x: 10,\n                    fontSize: 14,\n                },\n            },\n            colors: {\n                // area: \"rgb(233, 0,0, 0.3)\",\n                area: \"pink\",\n                highlight: \"red\",\n                bar: \"lightGrey\",\n                barHighlight: \"pink\",\n                // LightCoral\n            },\n            titles: [\"Feature selection\", \"Training set\"],\n            getBoxColors: (x, hollow = true) => {\n                if (hollow) return [x, \"white\", x];\n                else return [Color.literal(x).darken(30).string,\n                    Color.literal(x).lighten(10).string, \"white\" ];\n            },\n            updateNotePos(ev, el, deltaPos) {\n                this.notesProps.x += deltaPos[0];\n                this.notesProps.y += deltaPos[1];\n                this.redraw();\n            },\n        },\n        loadData: {\n            clsPickData: {\n                fileKey: \"clsPickData\",\n                loaded(d) {\n                    this.data.pickCats = d.split(\",\");\n                    return null;\n                },\n            },\n            clsBarData: {\n                fileKey: \"clsBarData\",\n                type: \"tsv\",\n                loaded(data) {\n                    const catKey = data.columns[0];\n                    for (let i = 1; i < 3; i ++) {\n                        const valueKey = data.columns[i];\n                        const bars = data.map(d => [d[catKey], parseFloat(d[valueKey])])\n                            .sort((a, b) => b[1] - a[1])\n                            .slice(0, 11);\n                        const categories = bars.map(x => x[0]);\n                        const valueRange = [0, Math.ceil(Math.max(...bars.map(x => x[1])))];\n                        this.data[`barData${i}`] = {\n                            categories, valueRange, discreteCategory: true, flip: true,\n                            data: bars, plotSize, invertValueAxis: true, gap: barGap,\n                        };\n                    }\n                    this.data.barData1.yLabel = \"Mean Decrease Accuracy\";\n                    this.data.barData2.yLabel = \"Mean Decrease Gini\";\n                    return null;\n                },\n            },\n            clsLineData: {\n                fileKey: \"clsLineData\",\n                type: \"tsv\",\n                loaded(data) {\n                    const xPosKey = data.columns[0];\n                    const lineData = {};\n                    const allValues = [];\n                    let maxCat = 0;\n                    for (let i = 6; i > 0; i --) {\n                        lineData[data.columns[i]] = {key: data.columns[i], values: []};\n                        data.forEach(d => {\n                            const value = parseFloat(d[data.columns[i]]);\n                            lineData[data.columns[i]].values.push([parseInt(d[xPosKey]), value]);\n                            allValues.push(value);\n                            if (parseInt(d[xPosKey]) > maxCat) maxCat = parseInt(d[xPosKey]);\n                        });\n                        lineData[data.columns[i]].values.sort((a, b) => a[0] - b[0]);\n                    }\n                    this.data.medianLineKey = data.columns[1];\n                    const valueRange = findBoundsForValues(allValues, 2);\n                    this.data.lineData = {\n                        data: lineData, categoryRange: [1, maxCat], valueRange,\n                        categoryUseLog: true, plotSize, margin: [0.05, 0.05],\n                        dataHandler: {\n                            default: {\n                                values: d => d.values,\n                            },\n                        },\n                        xLabel: \"Number of variables\", yLabel: \"CV Error\",\n                    };\n                    return null;\n                },\n            },\n            clsPredictData: {\n                fileKey: \"clsPredictData\",\n                type: \"tsv\",\n                dsvRowParser(row, _, columns) {\n                    return {\n                        sampleId: row[columns[0]],\n                        value: parseFloat(row[columns[1]]),\n                        group: row[columns[2]],\n                    };\n                },\n                loaded(data) {\n                    this.data.groups = getGroups(data, \"group\");\n                    const allValues = data.map(x => x.value);\n                    const valueRange = findBoundsForValues(allValues, 2);\n                    const boxData = { values: [], outliers: [], means: [], categories: [...this.data.groups]};\n                    this.data.groups.forEach((group, i) => {\n                        const result = [];\n                        const values = data.filter(d => d.group === group).map(d => d.value);\n                        const stat1 = new Oviz.algo.Statistics(values);\n                        const interQuartileRange = stat1.Q3() - stat1.Q1();\n                        values.forEach(x => {\n                            if ((x < stat1.Q3() - 1.5 * interQuartileRange) || (x > stat1.Q3() + 1.5 * interQuartileRange))  {\n                                boxData.outliers.push([i, x]);\n                            } else {\n                                result.push(x);\n                            }\n                        });\n                        const stat2 = new Oviz.algo.Statistics(result);\n                        boxData.values.push([stat2.min(), stat2.Q1(), stat2.median(), stat2.Q3(), stat2.max()]);\n                        boxData.means.push(stat2.mean());\n                    });\n                    this.data.boxData = {data: {boxData}, discreteCategories: true, plotSize,\n                        valueRange, margin: [0.05, 0.05],\n                        yLabel: \"Propability of Disease\"};\n                    const scatterData = data.sort((a, b) => a.value - b.value)\n                        .map((d, i) => ({pos: i + 1, ...d}));\n                    this.data.scatterData = {data: scatterData, margin: [0.05, 0.05],\n                        categoryRange: [0, scatterData.length], plotSize,\n                        valueRange, xLabel: \"Samples\"};\n                    return null;\n                },\n            },\n            clsSpecifyData: {\n                fileKey: \"clsSpecifyData\",\n                type: \"tsv\",\n                dsvRowParser(row, _, columns) {\n                    return {\n                        x: 1 - parseFloat(row[columns[0]]),\n                        low: parseFloat(row[columns[1]]),\n                        median: parseFloat(row[columns[2]]),\n                        high: parseFloat(row[columns[3]]),\n                    };\n                },\n                loaded(data) {\n                    const line = [];\n                    const area = [];\n                    data = data.sort((a, b) => a.x - b.x);\n                    data.forEach(d => {\n                        line.push([d.x, d.median]);\n                        area.push([d.x, d.low]);\n                    });\n                    data.sort((a, b) => b.x - a. x)\n                        .forEach(d => {\n                            area.push([d.x, d.high]);\n                        });\n                    this.data.specifyData = {\n                        plotSize, valueRange: [0, 1], categoryRange: [0, 1],\n                        yLabel: \"sensitivity\", xLabel: \"1 - specify\",\n                        margin: [0.05, 0.05],\n                        data: {\n                            line: {values: line, key: \"median\"},\n                            area: {values: area, key: \"low-high\"},\n                        },\n                    };\n                },\n            },\n            clsNoteData: {\n                fileKey: \"clsNoteData\",\n                loaded(d) {\n                    this.data.specifyNotes = d.split(/\\r?\\n/);\n                    const width = Math.max(...this.data.specifyNotes.map(x =>\n                        TextSize.measuredTextSize(x, 11).width));\n                    const height = this.data.specifyNotes.length * 13;\n                    this.data.notesProps = {\n                        x: plotSize[0] - 2 - width,\n                        y: plotSize[1] - height,\n                        width, height,\n                    };\n                },\n            },\n        },\n        setup() {\n            // danger! possible conflicts with preset color names\n            this.data.groups.forEach((g, i) => {\n                this.data.colors[g] = groupedChartColors[i];\n            });\n\n            registerEditorConfig(editorConfig(this));\n        },\n    });\n\n    return visualizer;\n}\n\nexport function registerBoxplot() {\n    register(MODULE_NAME, init);\n}\n\nregister(MODULE_NAME, init);\n"]},"metadata":{},"sourceType":"module"}