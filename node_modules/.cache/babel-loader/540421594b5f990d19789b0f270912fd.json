{"ast":null,"code":"function ownKeys(object, enumerableOnly) {\n  var keys = Object.keys(object);\n\n  if (Object.getOwnPropertySymbols) {\n    var symbols = Object.getOwnPropertySymbols(object);\n    if (enumerableOnly) symbols = symbols.filter(function (sym) {\n      return Object.getOwnPropertyDescriptor(object, sym).enumerable;\n    });\n    keys.push.apply(keys, symbols);\n  }\n\n  return keys;\n}\n\nfunction _objectSpread(target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = arguments[i] != null ? arguments[i] : {};\n\n    if (i % 2) {\n      ownKeys(Object(source), true).forEach(function (key) {\n        _defineProperty(target, key, source[key]);\n      });\n    } else if (Object.getOwnPropertyDescriptors) {\n      Object.defineProperties(target, Object.getOwnPropertyDescriptors(source));\n    } else {\n      ownKeys(Object(source)).forEach(function (key) {\n        Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));\n      });\n    }\n  }\n\n  return target;\n}\n\nfunction _defineProperty(obj, key, value) {\n  if (key in obj) {\n    Object.defineProperty(obj, key, {\n      value: value,\n      enumerable: true,\n      configurable: true,\n      writable: true\n    });\n  } else {\n    obj[key] = value;\n  }\n\n  return obj;\n}\n\nimport { mergeData } from 'vue-functional-data-merge';\nimport Vue from '../../utils/vue';\nimport KeyCodes from '../../utils/key-codes';\nimport { concat } from '../../utils/array';\nimport { getComponentConfig } from '../../utils/config';\nimport { addClass, isTag, removeClass } from '../../utils/dom';\nimport { isBoolean, isEvent, isFunction } from '../../utils/inspect';\nimport { omit } from '../../utils/object';\nimport { pluckProps } from '../../utils/props';\nimport { isLink as isLinkStrict } from '../../utils/router';\nimport { BLink, props as BLinkProps } from '../link/link'; // --- Constants ---\n\nvar NAME = 'BButton'; // --- Props ---\n\nvar linkProps = omit(BLinkProps, ['event', 'routerTag']);\ndelete linkProps.href[\"default\"];\ndelete linkProps.to[\"default\"];\nvar btnProps = {\n  block: {\n    type: Boolean,\n    \"default\": false\n  },\n  disabled: {\n    type: Boolean,\n    \"default\": false\n  },\n  size: {\n    type: String,\n    \"default\": function _default() {\n      return getComponentConfig(NAME, 'size');\n    }\n  },\n  variant: {\n    type: String,\n    \"default\": function _default() {\n      return getComponentConfig(NAME, 'variant');\n    }\n  },\n  type: {\n    type: String,\n    \"default\": 'button'\n  },\n  tag: {\n    type: String,\n    \"default\": 'button'\n  },\n  pill: {\n    type: Boolean,\n    \"default\": false\n  },\n  squared: {\n    type: Boolean,\n    \"default\": false\n  },\n  pressed: {\n    // Tri-state: `true`, `false` or `null`\n    // => On, off, not a toggle\n    type: Boolean,\n    \"default\": null\n  }\n};\nexport var props = _objectSpread(_objectSpread({}, btnProps), linkProps); // --- Helper methods ---\n// Focus handler for toggle buttons\n// Needs class of 'focus' when focused\n\nvar handleFocus = function handleFocus(evt) {\n  if (evt.type === 'focusin') {\n    addClass(evt.target, 'focus');\n  } else if (evt.type === 'focusout') {\n    removeClass(evt.target, 'focus');\n  }\n}; // Is the requested button a link?\n// If tag prop is set to `a`, we use a <b-link> to get proper disabled handling\n\n\nvar isLink = function isLink(props) {\n  return isLinkStrict(props) || isTag(props.tag, 'a');\n}; // Is the button to be a toggle button?\n\n\nvar isToggle = function isToggle(props) {\n  return isBoolean(props.pressed);\n}; // Is the button \"really\" a button?\n\n\nvar isButton = function isButton(props) {\n  return !(isLink(props) || props.tag && !isTag(props.tag, 'button'));\n}; // Is the requested tag not a button or link?\n\n\nvar isNonStandardTag = function isNonStandardTag(props) {\n  return !isLink(props) && !isButton(props);\n}; // Compute required classes (non static classes)\n\n\nvar computeClass = function computeClass(props) {\n  var _ref;\n\n  return [\"btn-\".concat(props.variant || getComponentConfig(NAME, 'variant')), (_ref = {}, _defineProperty(_ref, \"btn-\".concat(props.size), props.size), _defineProperty(_ref, 'btn-block', props.block), _defineProperty(_ref, 'rounded-pill', props.pill), _defineProperty(_ref, 'rounded-0', props.squared && !props.pill), _defineProperty(_ref, \"disabled\", props.disabled), _defineProperty(_ref, \"active\", props.pressed), _ref)];\n}; // Compute the link props to pass to b-link (if required)\n\n\nvar computeLinkProps = function computeLinkProps(props) {\n  return isLink(props) ? pluckProps(linkProps, props) : {};\n}; // Compute the attributes for a button\n\n\nvar computeAttrs = function computeAttrs(props, data) {\n  var button = isButton(props);\n  var link = isLink(props);\n  var toggle = isToggle(props);\n  var nonStandardTag = isNonStandardTag(props);\n  var hashLink = link && props.href === '#';\n  var role = data.attrs && data.attrs.role ? data.attrs.role : null;\n  var tabindex = data.attrs ? data.attrs.tabindex : null;\n\n  if (nonStandardTag || hashLink) {\n    tabindex = '0';\n  }\n\n  return {\n    // Type only used for \"real\" buttons\n    type: button && !link ? props.type : null,\n    // Disabled only set on \"real\" buttons\n    disabled: button ? props.disabled : null,\n    // We add a role of button when the tag is not a link or button for ARIA\n    // Don't bork any role provided in `data.attrs` when `isLink` or `isButton`\n    // Except when link has `href` of `#`\n    role: nonStandardTag || hashLink ? 'button' : role,\n    // We set the `aria-disabled` state for non-standard tags\n    'aria-disabled': nonStandardTag ? String(props.disabled) : null,\n    // For toggles, we need to set the pressed state for ARIA\n    'aria-pressed': toggle ? String(props.pressed) : null,\n    // `autocomplete=\"off\"` is needed in toggle mode to prevent some browsers\n    // from remembering the previous setting when using the back button\n    autocomplete: toggle ? 'off' : null,\n    // `tabindex` is used when the component is not a button\n    // Links are tabbable, but don't allow disabled, while non buttons or links\n    // are not tabbable, so we mimic that functionality by disabling tabbing\n    // when disabled, and adding a `tabindex=\"0\"` to non buttons or non links\n    tabindex: props.disabled && !button ? '-1' : tabindex\n  };\n}; // --- Main component ---\n// @vue/component\n\n\nexport var BButton = /*#__PURE__*/Vue.extend({\n  name: NAME,\n  functional: true,\n  props: props,\n  render: function render(h, _ref2) {\n    var props = _ref2.props,\n        data = _ref2.data,\n        listeners = _ref2.listeners,\n        children = _ref2.children;\n    var toggle = isToggle(props);\n    var link = isLink(props);\n    var nonStandardTag = isNonStandardTag(props);\n    var hashLink = link && props.href === '#';\n    var on = {\n      keydown: function keydown(evt) {\n        // When the link is a `href=\"#\"` or a non-standard tag (has `role=\"button\"`),\n        // we add a keydown handlers for SPACE/ENTER\n\n        /* istanbul ignore next */\n        if (props.disabled || !(nonStandardTag || hashLink)) {\n          return;\n        }\n\n        var keyCode = evt.keyCode; // Add SPACE handler for `href=\"#\"` and ENTER handler for non-standard tags\n\n        if (keyCode === KeyCodes.SPACE || keyCode === KeyCodes.ENTER && nonStandardTag) {\n          var target = evt.currentTarget || evt.target;\n          evt.preventDefault();\n          target.click();\n        }\n      },\n      click: function click(evt) {\n        /* istanbul ignore if: blink/button disabled should handle this */\n        if (props.disabled && isEvent(evt)) {\n          evt.stopPropagation();\n          evt.preventDefault();\n        } else if (toggle && listeners && listeners['update:pressed']) {\n          // Send `.sync` updates to any \"pressed\" prop (if `.sync` listeners)\n          // `concat()` will normalize the value to an array without\n          // double wrapping an array value in an array\n          concat(listeners['update:pressed']).forEach(function (fn) {\n            if (isFunction(fn)) {\n              fn(!props.pressed);\n            }\n          });\n        }\n      }\n    };\n\n    if (toggle) {\n      on.focusin = handleFocus;\n      on.focusout = handleFocus;\n    }\n\n    var componentData = {\n      staticClass: 'btn',\n      \"class\": computeClass(props),\n      props: computeLinkProps(props),\n      attrs: computeAttrs(props, data),\n      on: on\n    };\n    return h(link ? BLink : props.tag, mergeData(data, componentData), children);\n  }\n});","map":null,"metadata":{},"sourceType":"module"}