{"ast":null,"code":"function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }\n\nfunction _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }\n\nimport * as lodash from \"lodash\";\nimport IS_NODE from \"./is-node\";\n\nfunction getWindowObject(name, defaultVal) {\n  if (IS_NODE) {\n    return defaultVal;\n  }\n\n  return window[name] || (window[name] = defaultVal);\n}\n\nvar eventNames = getWindowObject(\"__BVD3_eventNames\", new Set());\nvar listeners = getWindowObject(\"__BVD3_listeners\", {});\nvar rpcReceivers = getWindowObject(\"__BVD3_rpcReceivers\", {});\nexport var Listener = /*#__PURE__*/function () {\n  function Listener(eventName, callback, id) {\n    _classCallCheck(this, Listener);\n\n    this.eventName = eventName;\n    this.action = callback;\n\n    if (typeof id === \"string\") {\n      this.id = id;\n    }\n  }\n\n  _createClass(Listener, [{\n    key: \"triggerCallback\",\n    value: function triggerCallback(data) {\n      this.action.call(null, this.eventName, data);\n    }\n  }]);\n\n  return Listener;\n}();\nexport var on = function on(eventName, callback, id) {\n  if (!eventNames.has(eventName)) {\n    addEventName(eventName);\n  }\n\n  var curr = listeners[eventName].find(function (l) {\n    return l.id === id;\n  });\n\n  if (id && curr) {\n    curr.action = callback;\n    return;\n  }\n\n  listeners[eventName].push(new Listener(eventName, callback, id));\n};\nexport var emit = function emit(eventName, data) {\n  if (!eventNames.has(eventName)) {\n    return;\n  }\n\n  listeners[eventName].forEach(function (listener) {\n    listener.triggerCallback(data);\n  });\n};\nexport var remove = function remove(eventName, id) {\n  if (!eventNames.has(eventName)) {\n    return;\n  }\n\n  if (typeof id === \"string\") {\n    lodash.remove(listeners[eventName], function (x) {\n      return x.id === id;\n    });\n  } else {\n    listeners[eventName] = [];\n  }\n}; // rpc\n\nexport function rpcRegisterReceiver(label, callback) {\n  rpcReceivers[label] = callback;\n}\nexport function rpc(label, data) {\n  if (!rpcReceivers[label]) {\n    return undefined;\n  }\n\n  return rpcReceivers[label].call(null, data);\n}\nexport var CANVAS_READY = \"canvas-ready\";\nexport var CANVAS_MOUNTED = \"canvas-mounted\";\nexport var CANVAS_INITIALIZED = \"canvas-initialized\";\nexport var DATA_LOADING_STARTED = \"data-loading-started\";\nexport var DATA_LOADING_FINISHED = \"data-loading-finished\";\nexport var DATA_LOADING_FAILED = \"data-loading-failed\";\nexport var EDITOR_READY = \"editor-ready\";\nexport var BEFORE_DRAW = \"will-draw\";\nexport var AFTER_DRAW = \"did-draw\";\n\nvar addEventName = function addEventName(name) {\n  eventNames.add(name);\n  listeners[name] = [];\n};","map":null,"metadata":{},"sourceType":"module"}