{"ast":null,"code":"function ownKeys(object, enumerableOnly) {\n  var keys = Object.keys(object);\n\n  if (Object.getOwnPropertySymbols) {\n    var symbols = Object.getOwnPropertySymbols(object);\n    if (enumerableOnly) symbols = symbols.filter(function (sym) {\n      return Object.getOwnPropertyDescriptor(object, sym).enumerable;\n    });\n    keys.push.apply(keys, symbols);\n  }\n\n  return keys;\n}\n\nfunction _objectSpread(target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = arguments[i] != null ? arguments[i] : {};\n\n    if (i % 2) {\n      ownKeys(Object(source), true).forEach(function (key) {\n        _defineProperty(target, key, source[key]);\n      });\n    } else if (Object.getOwnPropertyDescriptors) {\n      Object.defineProperties(target, Object.getOwnPropertyDescriptors(source));\n    } else {\n      ownKeys(Object(source)).forEach(function (key) {\n        Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));\n      });\n    }\n  }\n\n  return target;\n}\n\nfunction _defineProperty(obj, key, value) {\n  if (key in obj) {\n    Object.defineProperty(obj, key, {\n      value: value,\n      enumerable: true,\n      configurable: true,\n      writable: true\n    });\n  } else {\n    obj[key] = value;\n  }\n\n  return obj;\n}\n\nimport Vue from '../../utils/vue';\nimport attrsMixin from '../../mixins/attrs';\nimport listenersMixin from '../../mixins/listeners';\nimport normalizeSlotMixin from '../../mixins/normalize-slot';\nexport var props = {\n  footVariant: {\n    type: String,\n    // Supported values: 'lite', 'dark', or null\n    \"default\": null\n  }\n}; // TODO:\n//   In Bootstrap v5, we won't need \"sniffing\" as table element variants properly inherit\n//   to the child elements, so this can be converted to a functional component\n// @vue/component\n\nexport var BTfoot = /*#__PURE__*/Vue.extend({\n  name: 'BTfoot',\n  // Mixin order is important!\n  mixins: [attrsMixin, listenersMixin, normalizeSlotMixin],\n  inheritAttrs: false,\n  provide: function provide() {\n    return {\n      bvTableRowGroup: this\n    };\n  },\n  inject: {\n    bvTable: {\n      // Sniffed by <b-tr> / <b-td> / <b-th>\n\n      /* istanbul ignore next */\n      \"default\": function _default()\n      /* istanbul ignore next */\n      {\n        return {};\n      }\n    }\n  },\n  props: props,\n  computed: {\n    isTfoot: function isTfoot() {\n      // Sniffed by <b-tr> / <b-td> / <b-th>\n      return true;\n    },\n    isDark: function isDark() {\n      // Sniffed by <b-tr> / <b-td> / <b-th>\n      return this.bvTable.dark;\n    },\n    isStacked: function isStacked() {\n      // Sniffed by <b-tr> / <b-td> / <b-th>\n      return this.bvTable.isStacked;\n    },\n    isResponsive: function isResponsive() {\n      // Sniffed by <b-tr> / <b-td> / <b-th>\n      return this.bvTable.isResponsive;\n    },\n    isStickyHeader: function isStickyHeader() {\n      // Sniffed by <b-tr> / <b-td> / <b-th>\n      // Sticky headers are only supported in thead\n      return false;\n    },\n    hasStickyHeader: function hasStickyHeader() {\n      // Sniffed by <b-tr> / <b-td> / <b-th>\n      // Needed to handle header background classes, due to lack of\n      // background color inheritance with Bootstrap v4 table CSS\n      return !this.isStacked && this.bvTable.stickyHeader;\n    },\n    tableVariant: function tableVariant() {\n      // Sniffed by <b-tr> / <b-td> / <b-th>\n      return this.bvTable.tableVariant;\n    },\n    tfootClasses: function tfootClasses() {\n      return [this.footVariant ? \"thead-\".concat(this.footVariant) : null];\n    },\n    tfootAttrs: function tfootAttrs() {\n      return _objectSpread({\n        role: 'rowgroup'\n      }, this.bvAttrs);\n    }\n  },\n  render: function render(h) {\n    return h('tfoot', {\n      \"class\": this.tfootClasses,\n      attrs: this.tfootAttrs,\n      // Pass down any native listeners\n      on: this.bvListeners\n    }, this.normalizeSlot('default'));\n  }\n});","map":null,"metadata":{},"sourceType":"module"}