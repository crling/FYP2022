{"ast":null,"code":"function _defineProperty(obj, key, value) {\n  if (key in obj) {\n    Object.defineProperty(obj, key, {\n      value: value,\n      enumerable: true,\n      configurable: true,\n      writable: true\n    });\n  } else {\n    obj[key] = value;\n  }\n\n  return obj;\n}\n\nimport Vue from '../../utils/vue';\nimport { mergeData } from 'vue-functional-data-merge';\nimport { getComponentConfig } from '../../utils/config';\nimport { htmlOrText } from '../../utils/html';\nimport { hasNormalizedSlot, normalizeSlot } from '../../utils/normalize-slot';\nimport { BContainer } from '../layout/container'; // --- Constants ---\n\nvar NAME = 'BJumbotron'; // --- Props ---\n\nexport var props = {\n  fluid: {\n    type: Boolean,\n    \"default\": false\n  },\n  containerFluid: {\n    type: [Boolean, String],\n    \"default\": false\n  },\n  header: {\n    type: String // default: null\n\n  },\n  headerHtml: {\n    type: String // default: null\n\n  },\n  headerTag: {\n    type: String,\n    \"default\": 'h1'\n  },\n  headerLevel: {\n    type: [Number, String],\n    \"default\": '3'\n  },\n  lead: {\n    type: String // default: null\n\n  },\n  leadHtml: {\n    type: String // default: null\n\n  },\n  leadTag: {\n    type: String,\n    \"default\": 'p'\n  },\n  tag: {\n    type: String,\n    \"default\": 'div'\n  },\n  bgVariant: {\n    type: String,\n    \"default\": function _default() {\n      return getComponentConfig(NAME, 'bgVariant');\n    }\n  },\n  borderVariant: {\n    type: String,\n    \"default\": function _default() {\n      return getComponentConfig(NAME, 'borderVariant');\n    }\n  },\n  textVariant: {\n    type: String,\n    \"default\": function _default() {\n      return getComponentConfig(NAME, 'textVariant');\n    }\n  }\n}; // --- Main component ---\n// @vue/component\n\nexport var BJumbotron = /*#__PURE__*/Vue.extend({\n  name: NAME,\n  functional: true,\n  props: props,\n  render: function render(h, _ref) {\n    var _class2;\n\n    var props = _ref.props,\n        data = _ref.data,\n        slots = _ref.slots,\n        scopedSlots = _ref.scopedSlots;\n    var header = props.header,\n        headerHtml = props.headerHtml,\n        lead = props.lead,\n        leadHtml = props.leadHtml,\n        textVariant = props.textVariant,\n        bgVariant = props.bgVariant,\n        borderVariant = props.borderVariant;\n    var $scopedSlots = scopedSlots || {};\n    var $slots = slots();\n    var slotScope = {};\n    var $header = h();\n    var hasHeaderSlot = hasNormalizedSlot('header', $scopedSlots, $slots);\n\n    if (hasHeaderSlot || header || headerHtml) {\n      var headerLevel = props.headerLevel;\n      $header = h(props.headerTag, {\n        \"class\": _defineProperty({}, \"display-\".concat(headerLevel), headerLevel),\n        domProps: hasHeaderSlot ? {} : htmlOrText(headerHtml, header)\n      }, normalizeSlot('header', slotScope, $scopedSlots, $slots));\n    }\n\n    var $lead = h();\n    var hasLeadSlot = hasNormalizedSlot('lead', $scopedSlots, $slots);\n\n    if (hasLeadSlot || lead || leadHtml) {\n      $lead = h(props.leadTag, {\n        staticClass: 'lead',\n        domProps: hasLeadSlot ? {} : htmlOrText(leadHtml, lead)\n      }, normalizeSlot('lead', slotScope, $scopedSlots, $slots));\n    }\n\n    var $children = [$header, $lead, normalizeSlot('default', slotScope, $scopedSlots, $slots)]; // If fluid, wrap content in a container\n\n    if (props.fluid) {\n      $children = [h(BContainer, {\n        props: {\n          fluid: props.containerFluid\n        }\n      }, $children)];\n    }\n\n    return h(props.tag, mergeData(data, {\n      staticClass: 'jumbotron',\n      \"class\": (_class2 = {\n        'jumbotron-fluid': props.fluid\n      }, _defineProperty(_class2, \"text-\".concat(textVariant), textVariant), _defineProperty(_class2, \"bg-\".concat(bgVariant), bgVariant), _defineProperty(_class2, \"border-\".concat(borderVariant), borderVariant), _defineProperty(_class2, \"border\", borderVariant), _class2)\n    }), $children);\n  }\n});","map":null,"metadata":{},"sourceType":"module"}