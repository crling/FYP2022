{"ast":null,"code":"function _typeof(obj) { \"@babel/helpers - typeof\"; if (typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; }; } return _typeof(obj); }\n\nfunction _toConsumableArray(arr) { return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _unsupportedIterableToArray(arr) || _nonIterableSpread(); }\n\nfunction _nonIterableSpread() { throw new TypeError(\"Invalid attempt to spread non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\"); }\n\nfunction _iterableToArray(iter) { if (typeof Symbol !== \"undefined\" && Symbol.iterator in Object(iter)) return Array.from(iter); }\n\nfunction _arrayWithoutHoles(arr) { if (Array.isArray(arr)) return _arrayLikeToArray(arr); }\n\nfunction _slicedToArray(arr, i) { return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray(arr, i) || _nonIterableRest(); }\n\nfunction _nonIterableRest() { throw new TypeError(\"Invalid attempt to destructure non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\"); }\n\nfunction _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === \"string\") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === \"Object\" && o.constructor) n = o.constructor.name; if (n === \"Map\" || n === \"Set\") return Array.from(o); if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }\n\nfunction _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }\n\nfunction _iterableToArrayLimit(arr, i) { if (typeof Symbol === \"undefined\" || !(Symbol.iterator in Object(arr))) return; var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i[\"return\"] != null) _i[\"return\"](); } finally { if (_d) throw _e; } } return _arr; }\n\nfunction _arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }\n\nfunction _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }\n\nfunction _get(target, property, receiver) { if (typeof Reflect !== \"undefined\" && Reflect.get) { _get = Reflect.get; } else { _get = function _get(target, property, receiver) { var base = _superPropBase(target, property); if (!base) return; var desc = Object.getOwnPropertyDescriptor(base, property); if (desc.get) { return desc.get.call(receiver); } return desc.value; }; } return _get(target, property, receiver || target); }\n\nfunction _superPropBase(object, property) { while (!Object.prototype.hasOwnProperty.call(object, property)) { object = _getPrototypeOf(object); if (object === null) break; } return object; }\n\nfunction _inherits(subClass, superClass) { if (typeof superClass !== \"function\" && superClass !== null) { throw new TypeError(\"Super expression must either be null or a function\"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }\n\nfunction _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }\n\nfunction _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }\n\nfunction _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === \"object\" || typeof call === \"function\")) { return call; } return _assertThisInitialized(self); }\n\nfunction _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\"); } return self; }\n\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Date.prototype.toString.call(Reflect.construct(Date, [], function () {})); return true; } catch (e) { return false; } }\n\nfunction _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }\n\nimport { getThemeColor } from \"../../../color\";\nimport { canvasStroke } from \"../../../rendering/canvas/canvas-helper\";\nimport { svgPropFillAndStroke } from \"../../../rendering/svg/svg-helper\";\nimport { toCartesian } from \"../../../utils/math\";\nimport { BaseElement } from \"../../base-element\";\nexport var RadicalLine = /*#__PURE__*/function (_BaseElement) {\n  _inherits(RadicalLine, _BaseElement);\n\n  var _super = _createSuper(RadicalLine);\n\n  function RadicalLine() {\n    var _this;\n\n    _classCallCheck(this, RadicalLine);\n\n    _this = _super.apply(this, arguments);\n    _this.positionDetached = true;\n    return _this;\n  }\n\n  _createClass(RadicalLine, [{\n    key: \"getPosition\",\n    value: function getPosition() {\n      var isRad = !!this.prop.rad;\n      var _this$$geometry = this.$geometry,\n          x = _this$$geometry.x,\n          r1 = _this$$geometry.r1,\n          r2 = _this$$geometry.r2,\n          y1 = _this$$geometry.y1,\n          y2 = _this$$geometry.y2;\n\n      var _toCartesian = toCartesian(x, r1 !== null && r1 !== void 0 ? r1 : y1, isRad),\n          _toCartesian2 = _slicedToArray(_toCartesian, 2),\n          x1_ = _toCartesian2[0],\n          y1_ = _toCartesian2[1];\n\n      var _toCartesian3 = toCartesian(x, r2 !== null && r2 !== void 0 ? r2 : y2, isRad),\n          _toCartesian4 = _slicedToArray(_toCartesian3, 2),\n          x2_ = _toCartesian4[0],\n          y2_ = _toCartesian4[1];\n\n      return [x1_, y1_, x2_, y2_];\n    }\n  }, {\n    key: \"svgAttrs\",\n    value: function svgAttrs() {\n      var _this$getPosition = this.getPosition(),\n          _this$getPosition2 = _slicedToArray(_this$getPosition, 4),\n          x1 = _this$getPosition2[0],\n          y1 = _this$getPosition2[1],\n          x2 = _this$getPosition2[2],\n          y2 = _this$getPosition2[3];\n\n      return Object.assign(Object.assign({}, svgPropFillAndStroke(this)), {\n        x1: x1,\n        y1: y1,\n        x2: x2,\n        y2: y2\n      });\n    }\n  }, {\n    key: \"svgTagName\",\n    value: function svgTagName() {\n      return \"line\";\n    }\n  }, {\n    key: \"svgTextContent\",\n    value: function svgTextContent() {\n      return null;\n    }\n  }, {\n    key: \"renderToCanvas\",\n    value: function renderToCanvas(ctx) {\n      var _this$getPosition3 = this.getPosition(),\n          _this$getPosition4 = _slicedToArray(_this$getPosition3, 4),\n          x1 = _this$getPosition4[0],\n          y1 = _this$getPosition4[1],\n          x2 = _this$getPosition4[2],\n          y2 = _this$getPosition4[3];\n\n      this.path = new Path2D();\n      this.path.moveTo(x1, y1);\n      this.path.lineTo(x2, y2);\n      canvasStroke(ctx, this);\n    }\n  }, {\n    key: \"defaultProp\",\n    value: function defaultProp() {\n      return {\n        stroke: getThemeColor(this.$v.theme, \"line\")\n      };\n    }\n  }, {\n    key: \"geometryProps\",\n    value: function geometryProps() {\n      var _get$call = _get(_getPrototypeOf(RadicalLine.prototype), \"geometryProps\", this).call(this),\n          h = _get$call.h,\n          v = _get$call.v;\n\n      return {\n        h: h,\n        v: [].concat(_toConsumableArray(v), [\"r1\", \"r2\", \"y1\", \"y2\"])\n      };\n    }\n  }]);\n\n  return RadicalLine;\n}(BaseElement);","map":null,"metadata":{},"sourceType":"module"}