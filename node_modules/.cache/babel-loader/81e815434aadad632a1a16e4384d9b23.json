{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\n\nfunction _slicedToArray(arr, i) { return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray(arr, i) || _nonIterableRest(); }\n\nfunction _nonIterableRest() { throw new TypeError(\"Invalid attempt to destructure non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\"); }\n\nfunction _iterableToArrayLimit(arr, i) { if (typeof Symbol === \"undefined\" || !(Symbol.iterator in Object(arr))) return; var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i[\"return\"] != null) _i[\"return\"](); } finally { if (_d) throw _e; } } return _arr; }\n\nfunction _arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }\n\nfunction _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }\n\nfunction _toConsumableArray(arr) { return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _unsupportedIterableToArray(arr) || _nonIterableSpread(); }\n\nfunction _nonIterableSpread() { throw new TypeError(\"Invalid attempt to spread non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\"); }\n\nfunction _iterableToArray(iter) { if (typeof Symbol !== \"undefined\" && Symbol.iterator in Object(iter)) return Array.from(iter); }\n\nfunction _arrayWithoutHoles(arr) { if (Array.isArray(arr)) return _arrayLikeToArray(arr); }\n\nvar _marked = /*#__PURE__*/_regeneratorRuntime.mark(leaves),\n    _marked2 = /*#__PURE__*/_regeneratorRuntime.mark(permutations),\n    _marked3 = /*#__PURE__*/_regeneratorRuntime.mark(product);\n\nfunction _createForOfIteratorHelper(o, allowArrayLike) { var it; if (typeof Symbol === \"undefined\" || o[Symbol.iterator] == null) { if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === \"number\") { if (it) o = it; var i = 0; var F = function F() {}; return { s: F, n: function n() { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }, e: function e(_e2) { throw _e2; }, f: F }; } throw new TypeError(\"Invalid attempt to iterate non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\"); } var normalCompletion = true, didErr = false, err; return { s: function s() { it = o[Symbol.iterator](); }, n: function n() { var step = it.next(); normalCompletion = step.done; return step; }, e: function e(_e3) { didErr = true; err = _e3; }, f: function f() { try { if (!normalCompletion && it[\"return\"] != null) it[\"return\"](); } finally { if (didErr) throw err; } } }; }\n\nfunction _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === \"string\") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === \"Object\" && o.constructor) n = o.constructor.name; if (n === \"Map\" || n === \"Set\") return Array.from(o); if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }\n\nfunction _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }\n\nimport { minBy } from \"lodash\";\n\nfunction isLeaf(node) {\n  return !node.children || !node.children.length;\n}\n\nfunction leaves(root) {\n  var _iterator, _step, child;\n\n  return _regeneratorRuntime.wrap(function leaves$(_context) {\n    while (1) {\n      switch (_context.prev = _context.next) {\n        case 0:\n          if (!isLeaf(root)) {\n            _context.next = 5;\n            break;\n          }\n\n          _context.next = 3;\n          return root;\n\n        case 3:\n          _context.next = 21;\n          break;\n\n        case 5:\n          _iterator = _createForOfIteratorHelper(root.children);\n          _context.prev = 6;\n\n          _iterator.s();\n\n        case 8:\n          if ((_step = _iterator.n()).done) {\n            _context.next = 13;\n            break;\n          }\n\n          child = _step.value;\n          return _context.delegateYield(leaves(child), \"t0\", 11);\n\n        case 11:\n          _context.next = 8;\n          break;\n\n        case 13:\n          _context.next = 18;\n          break;\n\n        case 15:\n          _context.prev = 15;\n          _context.t1 = _context[\"catch\"](6);\n\n          _iterator.e(_context.t1);\n\n        case 18:\n          _context.prev = 18;\n\n          _iterator.f();\n\n          return _context.finish(18);\n\n        case 21:\n        case \"end\":\n          return _context.stop();\n      }\n    }\n  }, _marked, null, [[6, 15, 18, 21]]);\n}\n\nfunction range(len) {\n  return Array.from(Array(len), function (_, i) {\n    return i;\n  });\n}\n\nfunction fill(len, f) {\n  return Array.from(Array(len), f);\n}\n\nfunction permutations(arr) {\n  var length, c, i, k, p;\n  return _regeneratorRuntime.wrap(function permutations$(_context2) {\n    while (1) {\n      switch (_context2.prev = _context2.next) {\n        case 0:\n          length = arr.length;\n          c = Array(length).fill(0);\n          i = 1;\n          _context2.next = 5;\n          return arr.slice();\n\n        case 5:\n          if (!(i < length)) {\n            _context2.next = 21;\n            break;\n          }\n\n          if (!(c[i] < i)) {\n            _context2.next = 17;\n            break;\n          }\n\n          k = i % 2 && c[i];\n          p = arr[i];\n          arr[i] = arr[k];\n          arr[k] = p;\n          ++c[i];\n          i = 1;\n          _context2.next = 15;\n          return arr.slice();\n\n        case 15:\n          _context2.next = 19;\n          break;\n\n        case 17:\n          c[i] = 0;\n          ++i;\n\n        case 19:\n          _context2.next = 5;\n          break;\n\n        case 21:\n        case \"end\":\n          return _context2.stop();\n      }\n    }\n  }, _marked2);\n}\n\nfunction product() {\n  var _len,\n      list,\n      _key,\n      head,\n      tail,\n      remainder,\n      _iterator2,\n      _step2,\n      r,\n      _iterator3,\n      _step3,\n      h,\n      _args3 = arguments;\n\n  return _regeneratorRuntime.wrap(function product$(_context3) {\n    while (1) {\n      switch (_context3.prev = _context3.next) {\n        case 0:\n          for (_len = _args3.length, list = new Array(_len), _key = 0; _key < _len; _key++) {\n            list[_key] = _args3[_key];\n          }\n\n          head = list[0], tail = list.slice(1); // @ts-ignore\n\n          remainder = tail.length > 0 ? product.apply(void 0, _toConsumableArray(tail)) : [[]];\n          _iterator2 = _createForOfIteratorHelper(remainder);\n          _context3.prev = 4;\n\n          _iterator2.s();\n\n        case 6:\n          if ((_step2 = _iterator2.n()).done) {\n            _context3.next = 27;\n            break;\n          }\n\n          r = _step2.value;\n          _iterator3 = _createForOfIteratorHelper(head);\n          _context3.prev = 9;\n\n          _iterator3.s();\n\n        case 11:\n          if ((_step3 = _iterator3.n()).done) {\n            _context3.next = 17;\n            break;\n          }\n\n          h = _step3.value;\n          _context3.next = 15;\n          return [h].concat(_toConsumableArray(r));\n\n        case 15:\n          _context3.next = 11;\n          break;\n\n        case 17:\n          _context3.next = 22;\n          break;\n\n        case 19:\n          _context3.prev = 19;\n          _context3.t0 = _context3[\"catch\"](9);\n\n          _iterator3.e(_context3.t0);\n\n        case 22:\n          _context3.prev = 22;\n\n          _iterator3.f();\n\n          return _context3.finish(22);\n\n        case 25:\n          _context3.next = 6;\n          break;\n\n        case 27:\n          _context3.next = 32;\n          break;\n\n        case 29:\n          _context3.prev = 29;\n          _context3.t1 = _context3[\"catch\"](4);\n\n          _iterator2.e(_context3.t1);\n\n        case 32:\n          _context3.prev = 32;\n\n          _iterator2.f();\n\n          return _context3.finish(32);\n\n        case 35:\n        case \"end\":\n          return _context3.stop();\n      }\n    }\n  }, _marked3, null, [[4, 29, 32, 35], [9, 19, 22, 25]]);\n}\n\nvar Solver = /*#__PURE__*/function () {\n  function Solver(colors) {\n    _classCallCheck(this, Solver);\n\n    this.colors = colors;\n    this.colorRange = range(this.colors.length);\n  } // @ts-ignore\n\n\n  _createClass(Solver, [{\n    key: \"trace\",\n    value: function trace(node, root, lr) {\n      var _this = this;\n\n      if (isLeaf(node)) {\n        root.children.push(node);\n        return;\n      }\n\n      var newSelf = Object.assign(Object.assign({}, node), {\n        children: []\n      });\n      var left;\n      var right;\n\n      if (lr) {\n        left = lr[0];\n        right = lr[1];\n      } else {\n        var minCase = minBy(node.cases, function (n) {\n          return n[2];\n        });\n        left = minCase[0];\n        right = minCase[1];\n      }\n\n      var _node$dp$left$right = node.dp[left][right],\n          order = _node$dp$left$right.order,\n          plan = _node$dp$left$right.plan;\n      order.forEach(function (i, idx) {\n        _this.trace(node.children[i], newSelf, [plan[idx][0], plan[idx][1]]);\n      });\n\n      if (root) {\n        root.children.push(newSelf);\n      } else {\n        return newSelf;\n      }\n    }\n  }, {\n    key: \"updateScoreWithOrder\",\n    value: function updateScoreWithOrder(node, order) {\n      var caseList = order.map(function (i) {\n        return node.children[i].cases;\n      });\n\n      var _iterator4 = _createForOfIteratorHelper(product.apply(void 0, _toConsumableArray(caseList))),\n          _step4;\n\n      try {\n        for (_iterator4.s(); !(_step4 = _iterator4.n()).done;) {\n          var plan = _step4.value;\n          var score = 0;\n          var firstLeft = -1;\n          var lastRight = -1;\n\n          var _iterator5 = _createForOfIteratorHelper(plan),\n              _step5;\n\n          try {\n            for (_iterator5.s(); !(_step5 = _iterator5.n()).done;) {\n              var _ref3 = _step5.value;\n\n              var _ref2 = _slicedToArray(_ref3, 3);\n\n              var left = _ref2[0];\n              var right = _ref2[1];\n              var subScore = _ref2[2];\n              score += subScore;\n\n              if (lastRight >= 0) {\n                if (left !== lastRight) {\n                  score += 1;\n                }\n              } else {\n                firstLeft = left;\n              }\n\n              lastRight = right;\n            }\n          } catch (err) {\n            _iterator5.e(err);\n          } finally {\n            _iterator5.f();\n          }\n\n          if (score < node.dp[firstLeft][lastRight].score) {\n            node.dp[firstLeft][lastRight] = {\n              score: score,\n              order: order,\n              plan: plan\n            };\n          }\n        }\n      } catch (err) {\n        _iterator4.e(err);\n      } finally {\n        _iterator4.f();\n      }\n    }\n  }, {\n    key: \"updateScore\",\n    value: function updateScore(node) {\n      if (isLeaf(node)) return; // Update scores for all possible orders of children\n\n      var _iterator6 = _createForOfIteratorHelper(permutations(range(node.children.length))),\n          _step6;\n\n      try {\n        for (_iterator6.s(); !(_step6 = _iterator6.n()).done;) {\n          var order = _step6.value;\n          this.updateScoreWithOrder(node, order);\n        } // Gather stats for all cases for this node\n\n      } catch (err) {\n        _iterator6.e(err);\n      } finally {\n        _iterator6.f();\n      }\n\n      node.cases = [];\n\n      var _iterator7 = _createForOfIteratorHelper(this.colorRange),\n          _step7;\n\n      try {\n        for (_iterator7.s(); !(_step7 = _iterator7.n()).done;) {\n          var i = _step7.value;\n\n          var _iterator8 = _createForOfIteratorHelper(this.colorRange),\n              _step8;\n\n          try {\n            for (_iterator8.s(); !(_step8 = _iterator8.n()).done;) {\n              var j = _step8.value;\n              var score = node.dp[i][j].score;\n              if (isFinite(score)) node.cases.push([i, j, score]);\n            }\n          } catch (err) {\n            _iterator8.e(err);\n          } finally {\n            _iterator8.f();\n          }\n        }\n      } catch (err) {\n        _iterator7.e(err);\n      } finally {\n        _iterator7.f();\n      }\n    }\n  }, {\n    key: \"search\",\n    value: function search(root) {\n      this.init(root);\n\n      if (!isLeaf(root)) {\n        var _iterator9 = _createForOfIteratorHelper(root.children),\n            _step9;\n\n        try {\n          for (_iterator9.s(); !(_step9 = _iterator9.n()).done;) {\n            var child = _step9.value;\n            this.search(child);\n          }\n        } catch (err) {\n          _iterator9.e(err);\n        } finally {\n          _iterator9.f();\n        }\n      }\n\n      this.updateScore(root);\n    }\n  }, {\n    key: \"init\",\n    value: function init(root) {\n      var _this2 = this;\n\n      if (!isLeaf(root)) {\n        var _iterator10 = _createForOfIteratorHelper(root.children),\n            _step10;\n\n        try {\n          for (_iterator10.s(); !(_step10 = _iterator10.n()).done;) {\n            var child = _step10.value;\n            this.init(child);\n          }\n        } catch (err) {\n          _iterator10.e(err);\n        } finally {\n          _iterator10.f();\n        }\n      } // init self\n\n\n      root.dp = fill(this.colors.length, function (_) {\n        return fill(_this2.colors.length, function (_) {\n          return {\n            score: Infinity,\n            order: [],\n            plan: []\n          };\n        });\n      });\n\n      if (isLeaf(root)) {\n        root.dp[root.color][root.color] = {\n          score: 0,\n          order: [],\n          plan: []\n        };\n        root.cases = [[root.color, root.color, 0]];\n      }\n    }\n  }]);\n\n  return Solver;\n}();\n\nexport function orderTreeNodes(root, colorFunc) {\n  // return root;\n  var colors = [];\n\n  var _iterator11 = _createForOfIteratorHelper(leaves(root)),\n      _step11;\n\n  try {\n    for (_iterator11.s(); !(_step11 = _iterator11.n()).done;) {\n      var leaf = _step11.value;\n      var color = colorFunc(leaf);\n      var index = colors.indexOf(color);\n\n      if (index < 0) {\n        colors.push(color);\n        leaf.color = colors.length - 1;\n      } else {\n        leaf.color = index;\n      }\n    }\n  } catch (err) {\n    _iterator11.e(err);\n  } finally {\n    _iterator11.f();\n  }\n\n  var solver = new Solver(colors);\n  solver.search(root);\n  var newRoot = solver.trace(root);\n  return newRoot;\n}","map":null,"metadata":{},"sourceType":"module"}