{"ast":null,"code":"function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\nimport Vue from 'vue';\nimport axios from 'axios';\nimport objectToFormData from 'object-to-formdata';\nimport AlertCenter from 'components/alert-center.vue';\nimport VApp from \"page/vapp.vue\";\nimport DropDownSelect from \"page/builtin/dropdown-select.vue\";\nimport { event } from \"crux/dist/utils\";\nimport { registerViz } from \"viz\";\nVue.component(\"VApp\", VApp); // Vue.use(BootstrapVue);\n\nVue.component(\"dropdown-select\", DropDownSelect);\nexport default {\n  data: function data() {\n    return {\n      job_id: '',\n      jobName: '',\n      all_jobs: [],\n      fields: [\"index\", \"jobName\", \"jobId\", \"created\", \"status\", \"operation\"],\n      showTable: true,\n      valid_name: null,\n      submitted: false,\n      code: false,\n      data: {\n        outputs: []\n      },\n      chosenOutput: null,\n      taskOutputs: [{\n        value: 0,\n        text: \"Demo Files\",\n        secondaryText: \"\"\n      }],\n      refreshEnd: true\n    };\n  },\n  created: function created() {\n    this.refreshJobs();\n  },\n  mounted: function mounted() {\n    window.gon.viz_mode = \"task-output\";\n  },\n  updated: function updated() {\n    if (this.submitted) {\n      event.emit(\"GMT:reset-query\", this);\n      this.updateGon(this.data.outputs[this.chosenOutput]);\n      event.emit(\"GMT:query-finished\", this);\n    }\n  },\n  methods: {\n    searchJob: function searchJob() {\n      var _this = this;\n\n      var alertCenter = this.$refs.alertCenter;\n\n      if (this.job_id.length <= 0) {\n        this.valid_name = false;\n      } else {\n        this.all_jobs.forEach(function (j) {\n          if (j.jobId === parseInt(_this.job_id)) _this.jobName = j.jobName;\n        });\n        axios.post(\"/query-app-task/\", objectToFormData({\n          'job_id': this.job_id\n        }), {\n          headers: {\n            'X-Requested-With': 'XMLHttpRequest',\n            'X-CSRF-Token': document.head.querySelector('meta[name=\"csrf-token\"]').content,\n            'Content-Type': 'multipart/form-data'\n          }\n        }).then(function (response) {\n          if (response.data.code === false) {\n            _this.submitted = false;\n            alertCenter.add('danger', \"\".concat(response.data.data));\n          } else {\n            _this.data.outputs = response.data;\n\n            _this.updateGon(_this.data.outputs[0]);\n\n            _this.taskOutputs = _this.data.outputs.map(function (x, i) {\n              return {\n                value: i,\n                text: x.name\n              };\n            });\n            _this.chosenOutput = 0;\n            _this.submitted = true;\n          }\n        })[\"catch\"](function (error) {\n          var message = error.response && error.response.status === 404 ? \"The task does not exist\" : error;\n          alertCenter.add('danger', \"\".concat(message));\n        })[\"finally\"](function () {// setTimeout(() => { alertCenter.add('danger', ''); }, 2000);\n        });\n      }\n    },\n    showAnalyses: function showAnalyses(jobId) {\n      this.job_id = jobId;\n      this.searchJob();\n    },\n    updateGon: function updateGon(output) {\n      window.gon.module_name = output.module_name;\n      window.gon.required_data = output.required_data;\n      if (!window.gon.urls) window.gon.urls = {};\n      window.gon.urls.chosen_file_paths = \"/api/analysis/\".concat(output.analysis_id, \"/chosen_file_paths\");\n      window.gon.urls.download_demo_file = \"/api/analysis/\".concat(output.analysis_id, \"/download_demo_file\");\n      registerViz(output.module_name);\n    },\n    refreshJobs: function refreshJobs() {\n      var _this2 = this;\n\n      this.refreshEnd = false;\n      axios.post(\"/query-all-tasks/\", null, {\n        headers: {\n          'X-Requested-With': 'XMLHttpRequest',\n          'X-CSRF-Token': document.head.querySelector('meta[name=\"csrf-token\"]').content,\n          'Content-Type': 'multipart/form-data'\n        }\n      }).then(function (r) {\n        _this2.all_jobs = r.data.map(function (d, index) {\n          return _objectSpread({\n            index: index\n          }, d);\n        });\n      })[\"finally\"](function () {\n        // wait 1 sec\n        setTimeout(function () {\n          _this2.refreshEnd = true;\n        }, 1000);\n      });\n    },\n    deleteJob: function deleteJob(jobId) {\n      var _this3 = this;\n\n      var alertCenter = this.$refs.alertCenter;\n      axios.post(\"/remove-task/\", objectToFormData({\n        'job_id': jobId\n      }), {\n        headers: {\n          'X-Requested-With': 'XMLHttpRequest',\n          'X-CSRF-Token': document.head.querySelector('meta[name=\"csrf-token\"]').content,\n          'Content-Type': 'multipart/form-data'\n        }\n      }).then(function (r) {\n        _this3.refreshJobs();\n      })[\"catch\"](function (error) {\n        alertCenter.add('danger', error);\n      });\n    },\n    returnQuery: function returnQuery() {\n      event.emit(\"GMT:reset-query\", this);\n      this.submitted = false;\n    },\n    token_search: function token_search(token) {\n      this.job_id = token;\n      this.searchJob();\n    }\n  },\n  components: {\n    AlertCenter: AlertCenter\n  }\n};","map":{"version":3,"sources":["job-query.vue"],"names":[],"mappings":"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","sourcesContent":["<template>\n<!-- eslint-disable max-len -->\n<div id=\"job-query\">\n    <alert-center ref=\"alertCenter\" />\n    <div>\n        <div v-if=\"!submitted\">\n            <b-card class=\"text-center query-card\">\n                <div class=\"img-icon\">\n                    <i class=\"fas fa-tasks\"></i>\n                </div>\n                <p>Find your submitted job by Job ID</p>\n                <div class=\"row justify-content-center\">\n                    <b-input-group class=\"justify-content-center\">\n                    <b-form-input\n                        v-model=\"job_id\"\n                        size=\"lg\"\n                        :state=\"valid_name\"\n                        placeholder=\"Enter your job ID\"\n                        class=\"col-md-4 text-center\"\n                    ></b-form-input>\n                    <b-input-group-append>\n                        <b-button variant=\"secondary\" size=\"lg\" @click=\"searchJob\"\n                        ><i class=\"fas fa-search\"></i> Search</b-button\n                        >\n                    </b-input-group-append>\n                    </b-input-group>\n                </div>\n\n                <div class=\"local-jobs .container\">\n                <div class = \"center-title\">\n                    <div class = \"row\">\n                        <h3 class=\"font-weight-bold .col\">Local Jobs <span v-b-tooltip.hover title=\"Only the lastest ten jobs are stored. Exceeding jobs are deleted automatically\"><i class=\"fas fa-exclamation-circle small\"></i></span></h3>\n                        <b-button variant=\"success\" class=\"btn-sm .col\" @click=\"refreshJobs()\">Refresh</b-button>\n                        <div class =\"ml-3\" v-if=\"!refreshEnd\"><i class=\"fas fa-spinner fa-spin\" style='font-size:28px'> </i> </div>\n                    </div>\n                </div>\n                    <b-table\n                        class=\"jobs-table\"\n                        hover\n                        :items=\"all_jobs\"\n                        :fields=\"fields\"\n                        v-if=\"showTable\"\n                    >\n                    <template #cell(index)=\"data\">\n                        {{ data.index + 1 }}\n                    </template>\n                    \n                    <template #cell(status)=\"data\">\n                        <b-badge\n                            pill\n                            variant=\"success\"\n                            v-if=\"data.item.status == 'finished'\"\n                            >Finished</b-badge\n                        >\n                        <span v-else-if=\"data.item.status == 'failed'\" v-b-tooltip.hover title=\"Please check the format of your file!\">\n                            <b-badge\n                                pill\n                                variant=\"danger\"\n                                >Failed\n                                <i class=\"fas fa-exclamation-circle small\"></i>\n                            </b-badge>\n                            </span>\n                        <b-badge pill variant=\"info\" v-else>Running</b-badge>\n                    </template>\n                    <template #cell(operation)=\"data\">\n                        <b-button\n                            variant=\"primary\"\n                            size=\"sm\"\n                            v-if=\"data.item.status == 'finished'\"\n                            @click=\"showAnalyses(data.item.jobId)\"\n                            >\n                        <i class=\"fas fa-search mr-1\"></i>Result</b-button\n                        >\n                        <b-button variant=\"primary\" size=\"sm\" v-else disabled>\n                        \n                        <i class=\"fas fa-search mr-1\"></i>Result</b-button>\n                        <b-button\n                            variant=\"danger\"\n                            size=\"sm\"\n                            class=\"ml-4\"\n                            @click=\"deleteJob(data.item.jobId)\"\n                        >\n                        <i class=\"fas fa-trash-alt mr-1\"></i>Delete\n                        </b-button>\n                    </template>\n                    \n                    </b-table>\n                </div>\n            </b-card>\n        </div>\n        <div v-else class=\"viz-result mb-1\">\n            <b-card no-body>\n                <b-card-header v-b-modal.modalBox class=\"border-1\">\n                    <b-button class=\"btn col-md-2\" variant = \"primary\" @click=\"returnQuery\">\n                    <i class=\"fas fa-arrow-left\"></i> Back to query\n                    </b-button>\n                    <b-button variant=\"dark\" class=\"btn col-md-4\" disabled >{{`${jobName}(${job_id})`}}\n                    </b-button>\n                    <dropdown-select v-if=\"data.outputs.length > 1\"\n                            right\n                            v-model=\"chosenOutput\"\n                            :options=\"taskOutputs\"\n                            class=\"tool-bar-el\"/>\n                    <b-button v-else variant=\"dark\" class=\"btn col-md-4\" disabled >{{data.outputs[0].name}}\n                    </b-button>\n                </b-card-header>\n                <b-card-body class=\"p-0\">\n                   <div id = \"viz-card\"> \n                        <VApp/>\n                    </div>\n                </b-card-body>\n            </b-card>\n        </div>\n    </div>\n</div>\n</template>\n\n<script>\nimport _ from 'lodash';\nimport Vue from 'vue';\nimport axios from 'axios';\nimport objectToFormData from 'object-to-formdata';\nimport AlertCenter from 'components/alert-center.vue';\nimport VApp from \"page/vapp.vue\";\nimport DropDownSelect from \"page/builtin/dropdown-select.vue\";\nimport { event } from \"crux/dist/utils\";\nimport {registerViz} from \"viz\";\n\nVue.component(\"VApp\", VApp);\n// Vue.use(BootstrapVue);\nVue.component(\"dropdown-select\", DropDownSelect);\n\nexport default {\n    data() {\n        return {\n            job_id: '',\n            jobName: '',\n            all_jobs: [],\n            fields: [\"index\", \"jobName\", \"jobId\", \"created\", \"status\", \"operation\"],\n            showTable:  true,\n            valid_name: null,\n            submitted: false,\n            code: false,\n            data: {outputs: []},\n            chosenOutput: null,\n            taskOutputs: [{value: 0, text: \"Demo Files\", secondaryText: \"\"}],\n            refreshEnd: true,\n        };\n    },\n    created() {\n           this.refreshJobs();\n        },\n    mounted(){\n        window.gon.viz_mode = \"task-output\";\n    },\n    updated(){\n        if(this.submitted) {\n            event.emit(\"GMT:reset-query\", this);\n            this.updateGon(this.data.outputs[this.chosenOutput]);\n            event.emit(\"GMT:query-finished\", this);\n        }\n    },\n    methods: {\n        searchJob() {\n            const { alertCenter } = this.$refs;\n            \n            if (this.job_id.length <= 0){\n                this.valid_name = false;\n            }else {\n                this.all_jobs.forEach(j => {\n                    if (j.jobId === parseInt(this.job_id))\n                        this.jobName = j.jobName;\n                })\n                axios.post(\n                    `/query-app-task/`,\n                    objectToFormData({'job_id': this.job_id}),\n                    {  \n                        headers: {\n                            'X-Requested-With': 'XMLHttpRequest',\n                            'X-CSRF-Token': document.head.querySelector('meta[name=\"csrf-token\"]').content,\n                            'Content-Type': 'multipart/form-data',\n                        },\n                    },\n                ).then((response) => {\n                    if (response.data.code === false) {\n                        this.submitted = false;\n                        alertCenter.add('danger', `${response.data.data}`);\n                    } else {\n                        this.data.outputs = response.data;\n                        this.updateGon(this.data.outputs[0]);\n                        this.taskOutputs = this.data.outputs.map((x, i) => ({value: i, text: x.name}));\n                        this.chosenOutput = 0;\n                        this.submitted = true;\n                    }\n                }).catch((error) => {\n                    const message = error.response && error.response.status === 404 ? \"The task does not exist\" : error;\n                    alertCenter.add('danger', `${message}`);\n                }).finally(() => {\n                    // setTimeout(() => { alertCenter.add('danger', ''); }, 2000);\n                });\n            }\n        },\n        showAnalyses(jobId) {\n            this.job_id = jobId;\n            this.searchJob();\n        },\n        updateGon(output) {\n            window.gon.module_name = output.module_name;\n            window.gon.required_data = output.required_data;\n            if (!window.gon.urls) window.gon.urls = {};\n            window.gon.urls.chosen_file_paths = `/api/analysis/${output.analysis_id}/chosen_file_paths`;\n            window.gon.urls.download_demo_file = `/api/analysis/${output.analysis_id}/download_demo_file`;\n            registerViz(output.module_name);\n        },\n        refreshJobs() {\n            this.refreshEnd = false;\n            axios.post(\n                `/query-all-tasks/`,\n                null,\n            {  \n                headers: {\n                    'X-Requested-With': 'XMLHttpRequest',\n                    'X-CSRF-Token': document.head.querySelector('meta[name=\"csrf-token\"]').content,\n                    'Content-Type': 'multipart/form-data',\n                },\n            })\n            .then(r => {\n                this.all_jobs = r.data.map((d, index) => {\n                    return  {index, ...d}\n                });\n            }).finally(() => {\n                // wait 1 sec\n                 setTimeout(() => {\n                    this.refreshEnd = true;\n                    }, 1000);\n            });\n        },\n        deleteJob(jobId){\n            const { alertCenter } = this.$refs;\n            axios.post(\n                `/remove-task/`,\n                objectToFormData({'job_id': jobId}),\n                {  \n                    headers: {\n                        'X-Requested-With': 'XMLHttpRequest',\n                        'X-CSRF-Token': document.head.querySelector('meta[name=\"csrf-token\"]').content,\n                        'Content-Type': 'multipart/form-data',\n                    },\n                })\n                .then(r => {\n                    this.refreshJobs();\n                })\n                .catch(error => {\n                    alertCenter.add('danger', error);\n                });\n        },\n        returnQuery(){\n            event.emit(\"GMT:reset-query\", this);\n            this.submitted = false;\n        },\n        token_search(token){\n            this.job_id = token;\n            this.searchJob();\n        },\n    },\n    components: {\n        AlertCenter,\n    },\n};\n</script>\n\n<style lang=\"scss\">\n#job-query {\n    min-height: 900px;\n    max-height: 1200px;\n    margin-top: 10px;\n}\n#job-query .fas.fa-tasks {\n\tfont-size: 5rem !important;\n\tmargin-right: 0px;\n}\n\n#job-query .query-card {\n    margin: 20px;\n\tpadding: 3rem;\n}\n// all jobs\n.local-jobs {\n    margin-top: 2em;\n}\n.center-title {\n    margin: auto; \n    max-width: 250px;\n}\n\n#job-query .result-card {\n    margin: 0;\n    font-size: 20px;\n}\n//result card div\n#job-query .error-info {\n    min-height: 300px;\n}\n#job-query .result-image {\n    width: 70%;\n}\n// .task{\n//     margin: 1em\n// }\n#tool-bar {\n    height:30px;\n    background:lightgrey; \n    position: relative;\n}\n#editor-conf {\n    position: absolute;\n    right: 0;\n}\n.viz-result {\n    #canvas {\n        height: 800px;\n        width: 100%;\n        overflow: scroll;\n    }\n}\n\n.col-md-12 {\n    width: 80px;\n}\n#viz-container {\n    position: relative;\n}\n#viz-card {\n    border: 1px solid #999;\n    height: 835px;\n}\n.v-editor {\n    position: absolute;\n    top: 0;\n    right: 0;\n    z-index:20;\n    transition: all 0.3s\n}\n</style>\n"],"sourceRoot":"app/javascript"},"metadata":{},"sourceType":"module"}