{"ast":null,"code":"function ownKeys(object, enumerableOnly) {\n  var keys = Object.keys(object);\n\n  if (Object.getOwnPropertySymbols) {\n    var symbols = Object.getOwnPropertySymbols(object);\n    if (enumerableOnly) symbols = symbols.filter(function (sym) {\n      return Object.getOwnPropertyDescriptor(object, sym).enumerable;\n    });\n    keys.push.apply(keys, symbols);\n  }\n\n  return keys;\n}\n\nfunction _objectSpread(target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = arguments[i] != null ? arguments[i] : {};\n\n    if (i % 2) {\n      ownKeys(Object(source), true).forEach(function (key) {\n        _defineProperty(target, key, source[key]);\n      });\n    } else if (Object.getOwnPropertyDescriptors) {\n      Object.defineProperties(target, Object.getOwnPropertyDescriptors(source));\n    } else {\n      ownKeys(Object(source)).forEach(function (key) {\n        Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));\n      });\n    }\n  }\n\n  return target;\n}\n\nfunction _defineProperty(obj, key, value) {\n  if (key in obj) {\n    Object.defineProperty(obj, key, {\n      value: value,\n      enumerable: true,\n      configurable: true,\n      writable: true\n    });\n  } else {\n    obj[key] = value;\n  }\n\n  return obj;\n}\n\nimport Vue from '../../utils/vue';\nimport { getComponentConfig } from '../../utils/config';\nimport { isNumber, isString, isUndefinedOrNull } from '../../utils/inspect';\nimport { toFloat } from '../../utils/number';\nimport { omit } from '../../utils/object';\nimport { pluckProps } from '../../utils/props';\nimport { isLink } from '../../utils/router';\nimport { BButton } from '../button/button';\nimport { BLink, props as BLinkProps } from '../link/link';\nimport { BIcon } from '../../icons/icon';\nimport { BIconPersonFill } from '../../icons/icons';\nimport normalizeSlotMixin from '../../mixins/normalize-slot'; // --- Constants ---\n\nvar NAME = 'BAvatar';\nvar CLASS_NAME = 'b-avatar';\nvar RX_NUMBER = /^[0-9]*\\.?[0-9]+$/;\nvar FONT_SIZE_SCALE = 0.4;\nvar BADGE_FONT_SIZE_SCALE = FONT_SIZE_SCALE * 0.7;\nvar DEFAULT_SIZES = {\n  sm: '1.5em',\n  md: '2.5em',\n  lg: '3.5em'\n}; // --- Props ---\n\nvar linkProps = omit(BLinkProps, ['active', 'event', 'routerTag']);\n\nvar props = _objectSpread(_objectSpread({\n  src: {\n    type: String // default: null\n\n  },\n  text: {\n    type: String // default: null\n\n  },\n  icon: {\n    type: String // default: null\n\n  },\n  alt: {\n    type: String,\n    \"default\": 'avatar'\n  },\n  variant: {\n    type: String,\n    \"default\": function _default() {\n      return getComponentConfig(NAME, 'variant');\n    }\n  },\n  size: {\n    type: [Number, String],\n    \"default\": null\n  },\n  square: {\n    type: Boolean,\n    \"default\": false\n  },\n  rounded: {\n    type: [Boolean, String],\n    \"default\": false\n  },\n  button: {\n    type: Boolean,\n    \"default\": false\n  },\n  buttonType: {\n    type: String,\n    \"default\": 'button'\n  },\n  badge: {\n    type: [Boolean, String],\n    \"default\": false\n  },\n  badgeVariant: {\n    type: String,\n    \"default\": function _default() {\n      return getComponentConfig(NAME, 'badgeVariant');\n    }\n  },\n  badgeTop: {\n    type: Boolean,\n    \"default\": false\n  },\n  badgeLeft: {\n    type: Boolean,\n    \"default\": false\n  },\n  badgeOffset: {\n    type: String,\n    \"default\": '0px'\n  }\n}, linkProps), {}, {\n  ariaLabel: {\n    type: String // default: null\n\n  }\n}); // --- Utility methods ---\n\n\nexport var computeSize = function computeSize(value) {\n  // Default to `md` size when `null`, or parse to\n  // number when value is a float-like string\n  value = isUndefinedOrNull(value) || value === '' ? 'md' : isString(value) && RX_NUMBER.test(value) ? toFloat(value, 0) : value; // Convert all numbers to pixel values\n  // Handle default sizes when `sm`, `md` or `lg`\n  // Or use value as is\n\n  return isNumber(value) ? \"\".concat(value, \"px\") : DEFAULT_SIZES[value] || value;\n}; // --- Main component ---\n// @vue/component\n\nexport var BAvatar = /*#__PURE__*/Vue.extend({\n  name: NAME,\n  mixins: [normalizeSlotMixin],\n  inject: {\n    bvAvatarGroup: {\n      \"default\": null\n    }\n  },\n  props: props,\n  data: function data() {\n    return {\n      localSrc: this.src || null\n    };\n  },\n  computed: {\n    computedSize: function computedSize() {\n      // Always use the avatar group size\n      return computeSize(this.bvAvatarGroup ? this.bvAvatarGroup.size : this.size);\n    },\n    computedVariant: function computedVariant() {\n      // Prefer avatar-group variant if provided\n      var avatarGroup = this.bvAvatarGroup;\n      return avatarGroup && avatarGroup.variant ? avatarGroup.variant : this.variant;\n    },\n    computedRounded: function computedRounded() {\n      var avatarGroup = this.bvAvatarGroup;\n      var square = avatarGroup && avatarGroup.square ? true : this.square;\n      var rounded = avatarGroup && avatarGroup.rounded ? avatarGroup.rounded : this.rounded;\n      return square ? '0' : rounded === '' ? true : rounded || 'circle';\n    },\n    fontStyle: function fontStyle() {\n      var fontSize = this.computedSize;\n      fontSize = fontSize ? \"calc(\".concat(fontSize, \" * \").concat(FONT_SIZE_SCALE, \")\") : null;\n      return fontSize ? {\n        fontSize: fontSize\n      } : {};\n    },\n    marginStyle: function marginStyle() {\n      var avatarGroup = this.bvAvatarGroup;\n      var overlapScale = avatarGroup ? avatarGroup.overlapScale : 0;\n      var size = this.computedSize;\n      var value = size && overlapScale ? \"calc(\".concat(size, \" * -\").concat(overlapScale, \")\") : null;\n      return value ? {\n        marginLeft: value,\n        marginRight: value\n      } : {};\n    },\n    badgeStyle: function badgeStyle() {\n      var size = this.computedSize,\n          badgeTop = this.badgeTop,\n          badgeLeft = this.badgeLeft,\n          badgeOffset = this.badgeOffset;\n      var offset = badgeOffset || '0px';\n      return {\n        fontSize: size ? \"calc(\".concat(size, \" * \").concat(BADGE_FONT_SIZE_SCALE, \" )\") : null,\n        top: badgeTop ? offset : null,\n        bottom: badgeTop ? null : offset,\n        left: badgeLeft ? offset : null,\n        right: badgeLeft ? null : offset\n      };\n    }\n  },\n  watch: {\n    src: function src(newSrc, oldSrc) {\n      if (newSrc !== oldSrc) {\n        this.localSrc = newSrc || null;\n      }\n    }\n  },\n  methods: {\n    onImgError: function onImgError(evt) {\n      this.localSrc = null;\n      this.$emit('img-error', evt);\n    },\n    onClick: function onClick(evt) {\n      this.$emit('click', evt);\n    }\n  },\n  render: function render(h) {\n    var _class2;\n\n    var variant = this.computedVariant,\n        disabled = this.disabled,\n        rounded = this.computedRounded,\n        icon = this.icon,\n        src = this.localSrc,\n        text = this.text,\n        fontStyle = this.fontStyle,\n        marginStyle = this.marginStyle,\n        size = this.computedSize,\n        button = this.button,\n        type = this.buttonType,\n        badge = this.badge,\n        badgeVariant = this.badgeVariant,\n        badgeStyle = this.badgeStyle;\n    var link = !button && isLink(this);\n    var tag = button ? BButton : link ? BLink : 'span';\n    var alt = this.alt || null;\n    var ariaLabel = this.ariaLabel || null;\n    var $content = null;\n\n    if (this.hasNormalizedSlot('default')) {\n      // Default slot overrides props\n      $content = h('span', {\n        staticClass: 'b-avatar-custom'\n      }, [this.normalizeSlot('default')]);\n    } else if (src) {\n      $content = h('img', {\n        style: variant ? {} : {\n          width: '100%',\n          height: '100%'\n        },\n        attrs: {\n          src: src,\n          alt: alt\n        },\n        on: {\n          error: this.onImgError\n        }\n      });\n      $content = h('span', {\n        staticClass: 'b-avatar-img'\n      }, [$content]);\n    } else if (icon) {\n      $content = h(BIcon, {\n        props: {\n          icon: icon\n        },\n        attrs: {\n          'aria-hidden': 'true',\n          alt: alt\n        }\n      });\n    } else if (text) {\n      $content = h('span', {\n        staticClass: 'b-avatar-text',\n        style: fontStyle\n      }, [h('span', text)]);\n    } else {\n      // Fallback default avatar content\n      $content = h(BIconPersonFill, {\n        attrs: {\n          'aria-hidden': 'true',\n          alt: alt\n        }\n      });\n    }\n\n    var $badge = h();\n    var hasBadgeSlot = this.hasNormalizedSlot('badge');\n\n    if (badge || badge === '' || hasBadgeSlot) {\n      var badgeText = badge === true ? '' : badge;\n      $badge = h('span', {\n        staticClass: 'b-avatar-badge',\n        \"class\": _defineProperty({}, \"badge-\".concat(badgeVariant), !!badgeVariant),\n        style: badgeStyle\n      }, [hasBadgeSlot ? this.normalizeSlot('badge') : badgeText]);\n    }\n\n    var componentData = {\n      staticClass: CLASS_NAME,\n      \"class\": (_class2 = {}, _defineProperty(_class2, \"badge-\".concat(variant), !button && variant), _defineProperty(_class2, \"rounded\", rounded === true), _defineProperty(_class2, \"rounded-\".concat(rounded), rounded && rounded !== true), _defineProperty(_class2, \"disabled\", disabled), _class2),\n      style: _objectSpread({\n        width: size,\n        height: size\n      }, marginStyle),\n      attrs: {\n        'aria-label': ariaLabel || null\n      },\n      props: button ? {\n        variant: variant,\n        disabled: disabled,\n        type: type\n      } : link ? pluckProps(linkProps, this) : {},\n      on: button || link ? {\n        click: this.onClick\n      } : {}\n    };\n    return h(tag, componentData, [$content, $badge]);\n  }\n});","map":null,"metadata":{},"sourceType":"module"}