{"ast":null,"code":"function ownKeys(object, enumerableOnly) {\n  var keys = Object.keys(object);\n\n  if (Object.getOwnPropertySymbols) {\n    var symbols = Object.getOwnPropertySymbols(object);\n    if (enumerableOnly) symbols = symbols.filter(function (sym) {\n      return Object.getOwnPropertyDescriptor(object, sym).enumerable;\n    });\n    keys.push.apply(keys, symbols);\n  }\n\n  return keys;\n}\n\nfunction _objectSpread(target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = arguments[i] != null ? arguments[i] : {};\n\n    if (i % 2) {\n      ownKeys(Object(source), true).forEach(function (key) {\n        _defineProperty(target, key, source[key]);\n      });\n    } else if (Object.getOwnPropertyDescriptors) {\n      Object.defineProperties(target, Object.getOwnPropertyDescriptors(source));\n    } else {\n      ownKeys(Object(source)).forEach(function (key) {\n        Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));\n      });\n    }\n  }\n\n  return target;\n}\n\nfunction _defineProperty(obj, key, value) {\n  if (key in obj) {\n    Object.defineProperty(obj, key, {\n      value: value,\n      enumerable: true,\n      configurable: true,\n      writable: true\n    });\n  } else {\n    obj[key] = value;\n  }\n\n  return obj;\n}\n\nimport { mergeData } from 'vue-functional-data-merge';\nimport Vue from '../../utils/vue';\nimport { omit } from '../../utils/object';\nimport { BLink, props as BLinkProps } from '../link/link'; // --- Props ---\n\nexport var props = omit(BLinkProps, ['event', 'routerTag']); // --- Main component ---\n// @vue/component\n\nexport var BNavItem = /*#__PURE__*/Vue.extend({\n  name: 'BNavItem',\n  functional: true,\n  props: _objectSpread(_objectSpread({}, props), {}, {\n    linkAttrs: {\n      type: Object,\n      \"default\": function _default() {}\n    },\n    linkClasses: {\n      type: [String, Object, Array],\n      \"default\": null\n    }\n  }),\n  render: function render(h, _ref) {\n    var props = _ref.props,\n        data = _ref.data,\n        listeners = _ref.listeners,\n        children = _ref.children; // We transfer the listeners to the link\n\n    delete data.on;\n    return h('li', mergeData(data, {\n      staticClass: 'nav-item'\n    }), [h(BLink, {\n      staticClass: 'nav-link',\n      \"class\": props.linkClasses,\n      attrs: props.linkAttrs,\n      props: props,\n      on: listeners\n    }, children)]);\n  }\n});","map":null,"metadata":{},"sourceType":"module"}