{"ast":null,"code":"function _typeof(obj) { \"@babel/helpers - typeof\"; if (typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; }; } return _typeof(obj); }\n\nfunction _slicedToArray(arr, i) { return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray(arr, i) || _nonIterableRest(); }\n\nfunction _nonIterableRest() { throw new TypeError(\"Invalid attempt to destructure non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\"); }\n\nfunction _iterableToArrayLimit(arr, i) { if (typeof Symbol === \"undefined\" || !(Symbol.iterator in Object(arr))) return; var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i[\"return\"] != null) _i[\"return\"](); } finally { if (_d) throw _e; } } return _arr; }\n\nfunction _arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }\n\nfunction _createForOfIteratorHelper(o, allowArrayLike) { var it; if (typeof Symbol === \"undefined\" || o[Symbol.iterator] == null) { if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === \"number\") { if (it) o = it; var i = 0; var F = function F() {}; return { s: F, n: function n() { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }, e: function e(_e2) { throw _e2; }, f: F }; } throw new TypeError(\"Invalid attempt to iterate non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\"); } var normalCompletion = true, didErr = false, err; return { s: function s() { it = o[Symbol.iterator](); }, n: function n() { var step = it.next(); normalCompletion = step.done; return step; }, e: function e(_e3) { didErr = true; err = _e3; }, f: function f() { try { if (!normalCompletion && it[\"return\"] != null) it[\"return\"](); } finally { if (didErr) throw err; } } }; }\n\nfunction _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === \"string\") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === \"Object\" && o.constructor) n = o.constructor.name; if (n === \"Map\" || n === \"Set\") return Array.from(o); if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }\n\nfunction _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }\n\nfunction _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }\n\nfunction _inherits(subClass, superClass) { if (typeof superClass !== \"function\" && superClass !== null) { throw new TypeError(\"Super expression must either be null or a function\"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }\n\nfunction _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }\n\nfunction _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }\n\nfunction _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === \"object\" || typeof call === \"function\")) { return call; } return _assertThisInitialized(self); }\n\nfunction _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\"); } return self; }\n\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Date.prototype.toString.call(Reflect.construct(Date, [], function () {})); return true; } catch (e) { return false; } }\n\nfunction _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }\n\nimport { getThemeColor } from \"../../color\";\nimport { canvasFill, canvasStroke } from \"../../rendering/canvas/canvas-helper\";\nimport { svgPropFillAndStroke, svgPropPassthrough } from \"../../rendering/svg/svg-helper\";\nimport { PrimitiveElement } from \"./primitive\";\nexport var Polyline = /*#__PURE__*/function (_PrimitiveElement) {\n  _inherits(Polyline, _PrimitiveElement);\n\n  var _super = _createSuper(Polyline);\n\n  function Polyline() {\n    var _this;\n\n    _classCallCheck(this, Polyline);\n\n    _this = _super.apply(this, arguments);\n    _this.positionDetached = true;\n    return _this;\n  }\n\n  _createClass(Polyline, [{\n    key: \"svgAttrs\",\n    value: function svgAttrs() {\n      var pointsStr = \"\";\n\n      var _iterator = _createForOfIteratorHelper(this.prop.points),\n          _step;\n\n      try {\n        for (_iterator.s(); !(_step = _iterator.n()).done;) {\n          var p = _step.value;\n\n          var _this$translatePoint = this.translatePoint(p[0], p[1]),\n              _this$translatePoint2 = _slicedToArray(_this$translatePoint, 2),\n              x = _this$translatePoint2[0],\n              y = _this$translatePoint2[1];\n\n          pointsStr += \"\".concat(x, \",\").concat(y, \" \");\n        }\n      } catch (err) {\n        _iterator.e(err);\n      } finally {\n        _iterator.f();\n      }\n\n      return Object.assign(Object.assign(Object.assign({}, svgPropFillAndStroke(this)), svgPropPassthrough({\n        \"shape-rendering\": \"shapeRendering\"\n      })(this)), {\n        points: pointsStr\n      });\n    }\n  }, {\n    key: \"svgTagName\",\n    value: function svgTagName() {\n      return \"polyline\";\n    }\n  }, {\n    key: \"svgTextContent\",\n    value: function svgTextContent() {\n      return null;\n    }\n  }, {\n    key: \"renderToCanvas\",\n    value: function renderToCanvas(ctx) {\n      var _this2 = this;\n\n      this.path = new Path2D();\n      this.prop.points.forEach(function (p, i) {\n        var _this2$translatePoint = _this2.translatePoint(p[0], p[1]),\n            _this2$translatePoint2 = _slicedToArray(_this2$translatePoint, 2),\n            x = _this2$translatePoint2[0],\n            y = _this2$translatePoint2[1];\n\n        if (i === 0) {\n          _this2.path.moveTo(x, y);\n        } else {\n          _this2.path.lineTo(x, y);\n        }\n      });\n      canvasFill(ctx, this);\n      canvasStroke(ctx, this);\n    }\n  }, {\n    key: \"defaultProp\",\n    value: function defaultProp() {\n      return {\n        stroke: getThemeColor(this.$v.theme, \"line\"),\n        fill: \"none\"\n      };\n    }\n  }]);\n\n  return Polyline;\n}(PrimitiveElement);","map":null,"metadata":{},"sourceType":"module"}