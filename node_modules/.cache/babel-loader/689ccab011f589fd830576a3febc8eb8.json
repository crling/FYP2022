{"ast":null,"code":"function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nfunction _slicedToArray(arr, i) { return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray(arr, i) || _nonIterableRest(); }\n\nfunction _nonIterableRest() { throw new TypeError(\"Invalid attempt to destructure non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\"); }\n\nfunction _iterableToArrayLimit(arr, i) { if (typeof Symbol === \"undefined\" || !(Symbol.iterator in Object(arr))) return; var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i[\"return\"] != null) _i[\"return\"](); } finally { if (_d) throw _e; } } return _arr; }\n\nfunction _arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }\n\nfunction _toConsumableArray(arr) { return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _unsupportedIterableToArray(arr) || _nonIterableSpread(); }\n\nfunction _nonIterableSpread() { throw new TypeError(\"Invalid attempt to spread non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\"); }\n\nfunction _iterableToArray(iter) { if (typeof Symbol !== \"undefined\" && Symbol.iterator in Object(iter)) return Array.from(iter); }\n\nfunction _arrayWithoutHoles(arr) { if (Array.isArray(arr)) return _arrayLikeToArray(arr); }\n\nfunction _createForOfIteratorHelper(o, allowArrayLike) { var it; if (typeof Symbol === \"undefined\" || o[Symbol.iterator] == null) { if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === \"number\") { if (it) o = it; var i = 0; var F = function F() {}; return { s: F, n: function n() { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }, e: function e(_e2) { throw _e2; }, f: F }; } throw new TypeError(\"Invalid attempt to iterate non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\"); } var normalCompletion = true, didErr = false, err; return { s: function s() { it = o[Symbol.iterator](); }, n: function n() { var step = it.next(); normalCompletion = step.done; return step; }, e: function e(_e3) { didErr = true; err = _e3; }, f: function f() { try { if (!normalCompletion && it[\"return\"] != null) it[\"return\"](); } finally { if (didErr) throw err; } } }; }\n\nfunction _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === \"string\") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === \"Object\" && o.constructor) n = o.constructor.name; if (n === \"Map\" || n === \"Set\") return Array.from(o); if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }\n\nfunction _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }\n\n// import { showMsgBox } from \"packs/vapp\";\nimport { copyObject } from \"utils/object\"; // import { filterSpecies, updateCommentColor, updateGensStat } from \"./data\";\n\nimport { filterSpecies, computeSortingScore } from \"./data\";\nimport { event } from \"crux/dist/utils\";\nexport var editorRef = {};\nvar conf = {\n  samplesSortBy: [\"group\"]\n};\n\nfunction updateHistoData(v, idx) {\n  var _iterator = _createForOfIteratorHelper(v.data.data),\n      _step;\n\n  try {\n    for (_iterator.s(); !(_step = _iterator.n()).done;) {\n      var h = _step.value;\n      var counter = 0;\n\n      var rev = _toConsumableArray(v.data.histoKeys[idx]).reverse();\n\n      var _iterator2 = _createForOfIteratorHelper(rev),\n          _step2;\n\n      try {\n        for (_iterator2.s(); !(_step2 = _iterator2.n()).done;) {\n          var hk = _step2.value;\n          var value = parseFloat(h[hk.rawKey]);\n          h._histo[idx][hk.key][0] = counter;\n          h._histo[idx][hk.key][1] = counter + value;\n          counter += value;\n        }\n      } catch (err) {\n        _iterator2.e(err);\n      } finally {\n        _iterator2.f();\n      }\n    }\n  } catch (err) {\n    _iterator.e(err);\n  } finally {\n    _iterator.f();\n  }\n\n  updateHistoLegendData(v);\n}\n\nfunction updateHistoLegendData(v) {\n  v.data.histoLegendData = v.data.histoKeys.map(function (h, i) {\n    return h.map(function (hk) {\n      return {\n        label: hk.key,\n        fill: v.data.colorScales.histo[i].get(hk.key)\n      };\n    });\n  });\n}\n\nvar samplesVueData = {};\nvar getters = [];\nvar sortScoreIndex = 0;\n\nfunction updateSpeciesSorting(v, keys) {\n  getters = [];\n\n  var _iterator3 = _createForOfIteratorHelper(keys),\n      _step3;\n\n  try {\n    for (_iterator3.s(); !(_step3 = _iterator3.n()).done;) {\n      var sampleSortBy = _step3.value;\n      var sOrder = sampleSortBy[0];\n      var sKey = sampleSortBy.substr(1);\n      var getter = void 0;\n\n      (function () {\n        switch (sKey) {\n          case \"id\":\n            getter = function getter(s) {\n              return s;\n            };\n\n            break;\n\n          default:\n            var s = sKey.indexOf(\"_\"); // const panel = sKey.substr(0, s);\n\n            var key = sKey.substr(s + 1);\n\n            if (key === \"age\" || key === \"BMI\") {\n              getter = function getter(s) {\n                return Number.isNaN(v.data.metaDict[s][key]) ? Number.MAX_VALUE : v.data.metaDict[s][key];\n              };\n            } else {\n              getter = function getter(s) {\n                if (!!v.data.metaDict[s]) return v.data.metaDict[s][key];else return \"*\";\n              };\n            }\n\n        }\n      })();\n\n      getters.push([getter, sOrder === \"a\"]);\n    }\n  } catch (err) {\n    _iterator3.e(err);\n  } finally {\n    _iterator3.f();\n  }\n\n  getters.push([function (s) {\n    return v.data.speciesSortingScore[s];\n  }, false]);\n  sortScoreIndex = keys.length;\n  v.data.species = sort(v.data, getters);\n  filterSpecies(v);\n  update(v);\n}\n\nfunction sort(data, getters) {\n  return data.species.sort(function (a, b) {\n    var result = 0;\n\n    var _iterator4 = _createForOfIteratorHelper(getters),\n        _step4;\n\n    try {\n      for (_iterator4.s(); !(_step4 = _iterator4.n()).done;) {\n        var getter = _step4.value;\n        result = compare(a, b, getter[0], getter[1]);\n        if (result !== 0) break;\n      }\n    } catch (err) {\n      _iterator4.e(err);\n    } finally {\n      _iterator4.f();\n    }\n\n    return result;\n  });\n}\n\nfunction selectGenes(genes, str) {\n  if (str.length === 0 || str === \"0\") return genes;\n  var result = [];\n\n  var _iterator5 = _createForOfIteratorHelper(str.split(\",\")),\n      _step5;\n\n  try {\n    for (_iterator5.s(); !(_step5 = _iterator5.n()).done;) {\n      var s = _step5.value;\n      var trimmed = s.trim();\n\n      if (trimmed.indexOf(\"-\")) {\n        var _trimmed$split$map = trimmed.split(\"-\").map(function (x) {\n          return x.length ? parseInt(x) : null;\n        }),\n            _trimmed$split$map2 = _slicedToArray(_trimmed$split$map, 2),\n            start_ = _trimmed$split$map2[0],\n            end_ = _trimmed$split$map2[1];\n\n        if (!(start_ === null || start_ > 0)) return null;\n        if (!(end_ === null || end_ > 0)) return null;\n        var start = start_ === null ? 1 : start_;\n        var end = end_ === null ? undefined : end_;\n        result.push.apply(result, _toConsumableArray(genes.slice(start - 1, end)));\n      } else {\n        var g = genes[parseInt(trimmed) - 1];\n        if (!g) return null;\n        result.push(g);\n      }\n    }\n  } catch (err) {\n    _iterator5.e(err);\n  } finally {\n    _iterator5.f();\n  }\n\n  return result;\n}\n\nfunction compare(a, b, getter, asc) {\n  var a_ = getter(a),\n      b_ = getter(b); // console.log([a_, b_]);\n\n  var va = asc ? a_ : b_;\n  var vb = asc ? b_ : a_;\n  if (va < vb) return -1;else if (va > vb) return 1;else return 0;\n}\n\nfunction update(v) {\n  v.forceRedraw = true;\n  v.run();\n}\n\nexport function applyDefaultSpeciesSort(v) {\n  getters = [];\n  getters.push([function (s) {\n    return v.data.speciesSortingScore[s];\n  }, false]);\n  getters.push([function (s) {\n    if (!!v.data.metaDict[s]) return v.data.metaDict[s][\"type\"];else return \"*\";\n  }, true]);\n  v.data.species = sort(v.data, getters);\n  filterSpecies(v);\n}\nexport function editorConfig(v) {\n  Object.assign(samplesVueData, {\n    compact: true,\n    needAutoUpdate: true,\n    title: \"Reorder species manually\",\n    array: Array.from(v.data.species),\n    callback: function callback(d) {\n      v.data.species = samplesVueData.array = d;\n      filterSpecies(v);\n      update(v);\n    }\n  });\n  var d = v.data;\n  var speciesReorderOpts = [[\"id\", \"Species Name\"]].concat(_toConsumableArray(d.metaFeatures.map(function (k) {\n    return [\"mt_\".concat(k), k, \"Meta info\"];\n  }))).flatMap(function (_ref) {\n    var _ref2 = _slicedToArray(_ref, 3),\n        k = _ref2[0],\n        name = _ref2[1],\n        p = _ref2[2];\n\n    return [{\n      value: \"a\".concat(k),\n      text: \"\".concat(p ? \"\".concat(p, \": \") : \"\").concat(name, \" \\u2191\")\n    }, {\n      value: \"d\".concat(k),\n      text: \"\".concat(p ? \"\".concat(p, \": \") : \"\").concat(name, \" \\u2193\")\n    }];\n  });\n  return {\n    sections: [{\n      id: \"general\",\n      title: \"General\",\n      layout: \"tabs\",\n      tabs: [{\n        id: \"g-common\",\n        name: \"Common\",\n        view: {\n          type: \"list\",\n          items: [// {\n          //     title: \"Types\",\n          //     type: \"select\",\n          //     options: v.data.types.map((x, i) => ({value: i, text: x})),\n          //     value: {\n          //         current: 0,\n          //         callback(x) {\n          //             v.data.chosenType = v.data.types[x];\n          //             computeSortingScore(v.data);\n          //             applyDefaultSpeciesSort(v);\n          //             filterSpecies(v);\n          //             editorRef.reorderSample.config.data.array = v.data.hist.samples;\n          //             editorRef.reorderSample.config.data.needAutoUpdate = true;\n          //             editorRef.reorderSample.update();\n          //             update(v);\n          //         },\n          //     },\n          // },\n          {\n            title: \"Bar width\",\n            type: \"input\",\n            value: {\n              current: v.data.gridW,\n              callback: function callback(x) {\n                v.data.gridW = parseInt(x);\n                v.data.mainSizeChanged = true;\n                update(v);\n              }\n            }\n          }, {\n            title: \"Strain plot height\",\n            type: \"input\",\n            value: {\n              current: v.data.plotHeight,\n              callback: function callback(x) {\n                v.data.plotHeight = parseInt(x);\n                update(v);\n              }\n            }\n          }, {\n            title: \"Label rotation angle\",\n            type: \"text\",\n            content: \"Valid range: [-90, -45] or [45, 90]\"\n          }, {\n            title: null,\n            type: \"input\",\n            value: {\n              current: v.data.labelAngle,\n              callback: function callback(x) {\n                var angle = parseInt(x);\n                if (-90 <= angle && angle <= -45 || 45 <= angle && angle <= 90) v.data.labelAngle = angle;\n                update(v);\n              }\n            }\n          }, {\n            type: \"checkbox\",\n            title: \"Italic label\",\n            value: {\n              get current() {\n                return v.data.italicLabel;\n              },\n\n              callback: function callback(value) {\n                v.data.italicLabel = value;\n                update(v);\n              }\n            }\n          }, {\n            title: \"Reorder sample\",\n            type: \"vue\",\n            component: \"reorder\",\n            ref: \"reorderSample\",\n            data: {\n              title: \"Reorder sample\",\n              array: v.data.samples,\n              callback: function callback(array) {\n                v.data.samples = array;\n                computeSortingScore(v.data);\n                getters[sortScoreIndex] = [function (s) {\n                  return v.data.speciesSortingScore[s];\n                }, false];\n                v.data.species = sort(v.data, getters);\n                filterSpecies(v);\n                update(v);\n              }\n            }\n          } // {\n          //     type: \"vue\",\n          //     component: \"color-picker\",\n          //     ref: \"naColorPicker\",\n          //     data: {\n          //         title: \"Color for N/A\",\n          //         scheme: {},\n          //         naColor: v.data.NAColor,\n          //         id: \"group\",\n          //         callback(_, naColor) {\n          //             v.data.NAColor = naColor;\n          //             update(v);\n          //         },\n          //     },\n          // },\n          ]\n        }\n      }, {\n        id: \"g-species\",\n        name: \"Species\",\n        view: {\n          type: \"list\",\n          items: [{\n            title: \"Reorder samples by\",\n            type: \"vue\",\n            component: \"reorder-species\",\n            data: {\n              options: speciesReorderOpts,\n              keys: Array.from(conf.samplesSortBy),\n              // mutTypes: Array.from(v.data.mutTypes),\n              callback: function callback(s, useDefault) {\n                if (useDefault) {\n                  applyDefaultSpeciesSort(v);\n                  update(v);\n                } else updateSpeciesSorting(v, s);\n              }\n            }\n          }, {\n            type: \"vue\",\n            component: \"reorder\",\n            title: \"Reorder species manually\",\n            data: samplesVueData\n          }, {\n            type: \"vue\",\n            component: \"filter-samples\",\n            title: \"Filter Species\",\n            ref: \"filterSpecies\",\n            data: {\n              get samples() {\n                return Array.from(v.data.species);\n              },\n\n              get defaultValue() {\n                return true;\n              },\n\n              get title() {\n                return \"Filter Species\";\n              },\n\n              callback: function callback(_, hiddenSamples) {\n                v.data.hiddenSpecies = new Set(hiddenSamples);\n                filterSpecies(v);\n                v.data.mainSizeChanged = true;\n                update(v);\n              }\n            }\n          }, {\n            type: \"vue\",\n            component: \"filter-samples\",\n            title: \"Highlight Species\",\n            ref: \"highlightSpecies\",\n            data: {\n              get samples() {\n                return Array.from(v.data.species);\n              },\n\n              get defaultValue() {\n                return false;\n              },\n\n              get title() {\n                return \"Highlight Species\";\n              },\n\n              callback: function callback(highlight, _) {\n                v.data.highlightSpecies = new Set(highlight);\n                update(v);\n              }\n            }\n          }, {\n            type: \"button\",\n            title: \"Show ordered species list\",\n            action: function action() {\n              var hidden = v.data.hiddenSpecies;\n              event.emit(\"show-msgbox\", {\n                title: \"Species List\",\n                content: v.data.species.map(function (s) {\n                  return hidden.has(s) ? \"\".concat(s, \" (hidden)\") : s;\n                }).join(\"<br>\"),\n                html: true\n              });\n            }\n          }]\n        }\n      }]\n    }, {\n      id: \"meta\",\n      title: \"Meta Panel\",\n      layout: \"tabs\",\n      tabs: [{\n        name: \"Settings\",\n        id: \"content\",\n        view: {\n          type: \"vue\",\n          component: \"meta-info\",\n          data: {\n            data: v.data.metaFeatures.map(function (k) {\n              return _objectSpread({\n                name: k\n              }, v.data.metaInfo[k]);\n            }),\n            callback: function callback(obj) {\n              var _iterator6 = _createForOfIteratorHelper(obj),\n                  _step6;\n\n              try {\n                for (_iterator6.s(); !(_step6 = _iterator6.n()).done;) {\n                  var o = _step6.value;\n                  v.data.metaInfo[o.name].update(v, o);\n                }\n              } catch (err) {\n                _iterator6.e(err);\n              } finally {\n                _iterator6.f();\n              }\n\n              update(v);\n            }\n          }\n        }\n      }, {\n        name: \"Reorder\",\n        id: \"reorder\",\n        view: {\n          type: \"vue\",\n          component: \"reorder\",\n          data: {\n            title: \"Reorder meta features\",\n            array: v.data.metaFeatures,\n            callback: function callback(array) {\n              v.data.metaFeatures = array;\n              update(v);\n            }\n          }\n        }\n      }]\n    }]\n  };\n}\n\nfunction histoPanelDef(v, h, i) {\n  return {\n    id: \"histo-\".concat(i),\n    title: \"Histogram \".concat(h[0].name),\n    layout: \"tabs\",\n    tabs: [{\n      id: \"h-settings-\".concat(i),\n      name: \"Settings\",\n      view: {\n        type: \"list\",\n        items: [{\n          title: \"Name\",\n          type: \"input\",\n          bind: {\n            object: conf,\n            path: \"histoName.#\".concat(i),\n            callback: function callback() {\n              v.data.histoName[i] = conf.histoName[i];\n              update(v);\n            }\n          }\n        }, {\n          title: \"Hidden\",\n          type: \"checkbox\",\n          bind: {\n            object: conf,\n            path: \"histoHidden.#\".concat(i),\n            callback: function callback() {\n              v.data.histoHidden[i] = conf.histoHidden[i];\n              update(v);\n            }\n          }\n        }, {\n          title: \"Display sample labels\",\n          type: \"checkbox\",\n          bind: {\n            object: conf,\n            path: \"displaySampleLabel.#\".concat(i),\n            callback: function callback() {\n              v.data.displaySampleLabel[i] = conf.displaySampleLabel[i];\n              update(v);\n            }\n          }\n        }, {\n          title: \"Max value for Y axis\",\n          type: \"input\",\n          format: \"float\",\n          bind: {\n            object: conf,\n            path: \"histoMaxValue.#\".concat(i),\n            callback: function callback() {\n              v.data.histoMaxValue[i] = parseInt(conf.histoMaxValue[i]);\n              update(v);\n            }\n          }\n        }, {\n          title: \"Y axis label\",\n          type: \"input\",\n          bind: {\n            object: conf,\n            path: \"histoLabel.#\".concat(i),\n            callback: function callback() {\n              v.data.histoLabel[i] = conf.histoLabel[i];\n              update(v);\n            }\n          }\n        }]\n      }\n    }, {\n      name: \"Data\",\n      id: \"h-data-\".concat(i),\n      view: {\n        type: \"list\",\n        items: [{\n          type: \"vue\",\n          component: \"reorder\",\n          data: {\n            title: \"Reorder groups in histogram\",\n            array: v.data.histoKeys[i].map(function (h) {\n              return h.key;\n            }),\n            callback: function callback(array) {\n              v.data.histoKeys[i] = array.map(function (x) {\n                return v.data.histoKeys[i].find(function (h) {\n                  return h.key === x;\n                });\n              });\n              updateHistoData(v, i);\n              update(v);\n            }\n          }\n        }, {\n          type: \"vue\",\n          component: \"color-picker\",\n          data: {\n            title: \"Customize colors\",\n            scheme: copyObject(v.data.colorScales.histo[i].colors),\n            id: \"histo\",\n            callback: function callback(colors) {\n              v.data.colorScales.histo[i].colors = colors;\n              updateHistoLegendData(v);\n              update(v);\n            }\n          }\n        }]\n      }\n    }]\n  };\n}\n\nexport var toolbar = [];","map":{"version":3,"sources":["/Users/wangzhenyu/Desktop/fyp_workspace/meta_platform/app/javascript/viz/fmt-overview/editor.ts"],"names":["copyObject","filterSpecies","computeSortingScore","event","editorRef","conf","samplesSortBy","updateHistoData","v","idx","data","h","counter","rev","histoKeys","reverse","hk","value","parseFloat","rawKey","_histo","key","updateHistoLegendData","histoLegendData","map","i","label","fill","colorScales","histo","get","samplesVueData","getters","sortScoreIndex","updateSpeciesSorting","keys","sampleSortBy","sOrder","sKey","substr","getter","s","indexOf","Number","isNaN","metaDict","MAX_VALUE","push","speciesSortingScore","length","species","sort","update","a","b","result","compare","selectGenes","genes","str","split","trimmed","trim","x","parseInt","start_","end_","start","end","undefined","slice","g","asc","a_","b_","va","vb","forceRedraw","run","applyDefaultSpeciesSort","editorConfig","Object","assign","compact","needAutoUpdate","title","array","Array","from","callback","d","speciesReorderOpts","metaFeatures","k","flatMap","name","p","text","sections","id","layout","tabs","view","type","items","current","gridW","mainSizeChanged","plotHeight","content","labelAngle","angle","italicLabel","component","ref","samples","options","useDefault","defaultValue","_","hiddenSamples","hiddenSpecies","Set","highlight","highlightSpecies","action","hidden","emit","has","join","html","metaInfo","obj","o","histoPanelDef","bind","object","path","histoName","histoHidden","displaySampleLabel","format","histoMaxValue","histoLabel","find","scheme","colors","toolbar"],"mappings":"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","sourcesContent":["// import { showMsgBox } from \"packs/vapp\";\nimport { EditorDef, ToolbarDef } from \"utils/editor\";\nimport { copyObject } from \"utils/object\";\n// import { filterSpecies, updateCommentColor, updateGensStat } from \"./data\";\nimport { filterSpecies, computeSortingScore, generateHistData } from \"./data\";\nimport { event } from \"crux/dist/utils\";\n\nexport const editorRef: any = {};\n\nconst conf: any = {\n    samplesSortBy: [\"group\"],\n};\n\nfunction updateHistoData(v, idx) {\n    for (const h of v.data.data) {\n        let counter = 0;\n        const rev = [...v.data.histoKeys[idx]].reverse();\n        for (const hk of rev) {\n            const value = parseFloat(h[hk.rawKey]);\n            h._histo[idx][hk.key][0] = counter;\n            h._histo[idx][hk.key][1] = counter + value;\n            counter += value;\n        }\n    }\n    updateHistoLegendData(v);\n}\n\nfunction updateHistoLegendData(v) {\n    v.data.histoLegendData = v.data.histoKeys.map((h, i) => h.map(hk => ({ label: hk.key, fill: v.data.colorScales.histo[i].get(hk.key) })));\n}\n\nconst samplesVueData: any = {};\n\nlet getters = [];\nlet sortScoreIndex = 0;\n\nfunction updateSpeciesSorting(v, keys) {\n    getters = [];\n\n    for (const sampleSortBy of keys) {\n        const sOrder = sampleSortBy[0];\n        const sKey = sampleSortBy.substr(1);\n\n        let getter: any;\n        switch (sKey) {\n            case \"id\":\n                getter = s => s;\n                break;\n            default:\n                const s = sKey.indexOf(\"_\");\n                // const panel = sKey.substr(0, s);\n                const key = sKey.substr(s + 1);\n                if (key === \"age\" || key === \"BMI\") {\n                    getter = s => Number.isNaN(v.data.metaDict[s][key]) ? Number.MAX_VALUE : v.data.metaDict[s][key];\n                } else {\n                    getter = s => {\n                        if (!!v.data.metaDict[s])\n                            return v.data.metaDict[s][key];\n                        else\n                            return \"*\";\n                    };\n                }\n        }\n        getters.push([getter, sOrder === \"a\"]);\n    }\n    getters.push([(s => v.data.speciesSortingScore[s]), false]);\n    sortScoreIndex = keys.length;\n    v.data.species = sort(v.data, getters);\n    filterSpecies(v);\n    update(v);\n}\n\nfunction sort(data: any, getters: [any, boolean][]) {\n    return data.species.sort((a, b) => {\n        let result = 0;\n        for (const getter of getters) {\n            result = compare(a, b, getter[0], getter[1]);\n            if (result !== 0) break;\n        }\n        return result;\n    });\n}\n\nfunction selectGenes(genes: any[], str: string) {\n    if (str.length === 0 || str === \"0\") return genes;\n\n    const result = [];\n    for (const s of str.split(\",\")) {\n        const trimmed = s.trim();\n        if (trimmed.indexOf(\"-\")) {\n            const [start_, end_] = trimmed.split(\"-\").map(x => (x.length ? parseInt(x) : null));\n            if (!(start_ === null || start_ > 0)) return null;\n            if (!(end_ === null || end_ > 0)) return null;\n            const start = start_ === null ? 1 : start_;\n            const end = end_ === null ? undefined : end_;\n            result.push(...genes.slice(start - 1, end));\n        } else {\n            const g = genes[parseInt(trimmed) - 1];\n            if (!g) return null;\n            result.push(g);\n        }\n    }\n\n    return result;\n}\n\nfunction compare(a: any, b: any, getter: any, asc: boolean) {\n    const a_ = getter(a),\n        b_ = getter(b);\n    // console.log([a_, b_]);\n    const va = asc ? a_ : b_;\n    const vb = asc ? b_ : a_;\n    if (va < vb) return -1;\n    else if (va > vb) return 1;\n    else return 0;\n}\n\nfunction update(v) {\n    v.forceRedraw = true;\n    v.run();\n}\nexport function applyDefaultSpeciesSort(v) {\n    getters = [];\n\n    getters.push([(s => v.data.speciesSortingScore[s]), false]);\n\n    getters.push([(s => {\n        if (!!v.data.metaDict[s])\n            return v.data.metaDict[s][\"type\"];\n        else\n            return \"*\";\n    }), true]);\n\n    v.data.species = sort(v.data, getters);\n    filterSpecies(v);\n}\n\nexport function editorConfig(v: any): EditorDef {\n\n    Object.assign(samplesVueData, {\n        compact: true,\n        needAutoUpdate: true,\n        title: \"Reorder species manually\",\n        array: Array.from(v.data.species),\n        callback(d) {\n            v.data.species = samplesVueData.array = d;\n            filterSpecies(v);\n            update(v);\n        },\n    });\n\n    const d = v.data;\n    const speciesReorderOpts = [\n        [\"id\", \"Species Name\"],\n        ...d.metaFeatures.map(k => [`mt_${k}`, k, \"Meta info\"]),\n    ]\n        .flatMap(([k, name, p]) => [\n            { value: `a${k}`, text: `${p ? `${p}: ` : \"\"}${name} ↑` },\n            { value: `d${k}`, text: `${p ? `${p}: ` : \"\"}${name} ↓` },\n        ]);\n    return {\n        sections: [\n            {\n                id: \"general\",\n                title: \"General\",\n                layout: \"tabs\",\n                tabs: [\n                    {\n                        id: \"g-common\",\n                        name: \"Common\",\n                        view: {\n                            type: \"list\",\n                            items: [\n                                // {\n                                //     title: \"Types\",\n                                //     type: \"select\",\n                                //     options: v.data.types.map((x, i) => ({value: i, text: x})),\n                                //     value: {\n                                //         current: 0,\n                                //         callback(x) {\n                                //             v.data.chosenType = v.data.types[x];\n                                //             computeSortingScore(v.data);\n                                //             applyDefaultSpeciesSort(v);\n                                //             filterSpecies(v);\n                                //             editorRef.reorderSample.config.data.array = v.data.hist.samples;\n                                //             editorRef.reorderSample.config.data.needAutoUpdate = true;\n                                //             editorRef.reorderSample.update();\n                                //             update(v);\n                                //         },\n                                //     },\n                                // },\n                                {\n                                    title: \"Bar width\",\n                                    type: \"input\",\n                                    value: {\n                                        current: v.data.gridW,\n                                        callback(x) {\n                                            v.data.gridW = parseInt(x);\n                                            v.data.mainSizeChanged = true;\n                                            update(v);\n                                        },\n                                    },\n                                },\n                                {\n                                    title: \"Strain plot height\",\n                                    type: \"input\",\n                                    value: {\n                                        current: v.data.plotHeight,\n                                        callback(x) {\n                                            v.data.plotHeight = parseInt(x);\n                                            update(v);\n                                        },\n                                    },\n                                },\n                                {\n                                    title: \"Label rotation angle\",\n                                    type: \"text\",\n                                    content: \"Valid range: [-90, -45] or [45, 90]\",\n                                },\n                                {\n                                    title: null,\n                                    type: \"input\",\n                                    value: {\n                                        current: v.data.labelAngle,\n                                        callback(x) {\n                                            const angle = parseInt(x);\n                                            if ((-90 <= angle && angle <= -45) || (45 <= angle && angle <= 90))\n                                                v.data.labelAngle = angle;\n                                            update(v);\n                                        },\n                                    },\n                                },\n                                {\n                                    type: \"checkbox\",\n                                    title: \"Italic label\",\n                                    value: {\n                                        get current() {\n                                            return v.data.italicLabel;\n                                        },\n                                        callback(value) {\n                                            v.data.italicLabel = value;\n                                            update(v);\n                                        },\n                                    },\n                                },\n                                {\n                                    title: \"Reorder sample\",\n                                    type: \"vue\",\n                                    component: \"reorder\",\n                                    ref: \"reorderSample\",\n                                    data: {\n                                        title: `Reorder sample`,\n                                        array: v.data.samples,\n                                        callback(array) {\n                                            v.data.samples = array;\n                                            computeSortingScore(v.data);\n                                            getters[sortScoreIndex] = [(s => v.data.speciesSortingScore[s]), false];\n                                            v.data.species = sort(v.data, getters);\n                                            filterSpecies(v);\n                                            update(v);\n                                        },\n                                    },\n                                },\n                                // {\n                                //     type: \"vue\",\n                                //     component: \"color-picker\",\n                                //     ref: \"naColorPicker\",\n                                //     data: {\n                                //         title: \"Color for N/A\",\n                                //         scheme: {},\n                                //         naColor: v.data.NAColor,\n                                //         id: \"group\",\n                                //         callback(_, naColor) {\n                                //             v.data.NAColor = naColor;\n                                //             update(v);\n                                //         },\n                                //     },\n                                // },\n                            ],\n                        },\n                    },\n                    {\n                        id: \"g-species\",\n                        name: \"Species\",\n                        view: {\n                            type: \"list\",\n                            items: [\n                                {\n                                    title: \"Reorder samples by\",\n                                    type: \"vue\",\n                                    component: \"reorder-species\",\n                                    data: {\n                                        options: speciesReorderOpts,\n                                        keys: Array.from(conf.samplesSortBy),\n                                        // mutTypes: Array.from(v.data.mutTypes),\n                                        callback: (s, useDefault) => {\n                                            if (useDefault) {\n                                                applyDefaultSpeciesSort(v);\n                                                update(v);\n                                            } else updateSpeciesSorting(v, s);\n                                        },\n                                    },\n                                },\n                                {\n                                    type: \"vue\",\n                                    component: \"reorder\",\n                                    title: \"Reorder species manually\",\n                                    data: samplesVueData,\n                                },\n                                {\n                                    type: \"vue\",\n                                    component: \"filter-samples\",\n                                    title: \"Filter Species\",\n                                    ref: \"filterSpecies\",\n                                    data: {\n                                        get samples() {\n                                            return Array.from(v.data.species);\n                                        },\n                                        get defaultValue() {\n                                            return true;\n                                        },\n                                        get title() {\n                                            return \"Filter Species\";\n                                        },\n                                        callback(_, hiddenSamples) {\n                                            v.data.hiddenSpecies = new Set(hiddenSamples);\n                                            filterSpecies(v);\n                                            v.data.mainSizeChanged = true;\n                                            update(v);\n                                        },\n                                    },\n                                },\n                                {\n                                    type: \"vue\",\n                                    component: \"filter-samples\",\n                                    title: \"Highlight Species\",\n                                    ref: \"highlightSpecies\",\n                                    data: {\n                                        get samples() {\n                                            return Array.from(v.data.species);\n                                        },\n                                        get defaultValue() {\n                                            return false;\n                                        },\n                                        get title() {\n                                            return \"Highlight Species\";\n                                        },\n                                        callback(highlight, _) {\n                                            v.data.highlightSpecies = new Set(highlight);\n                                            update(v);\n                                        },\n                                    },\n                                },\n                                {\n                                    type: \"button\",\n                                    title: \"Show ordered species list\",\n                                    action() {\n                                        const hidden = v.data.hiddenSpecies;\n                                        event.emit(\"show-msgbox\", {title: \"Species List\", \n                                            content: v.data.species.map(s => (hidden.has(s) ? `${s} (hidden)` : s)).join(\"<br>\"),\n                                            html: true});\n                                    },\n                                },\n                            ],\n                        },\n                    },\n                ],\n            },\n            {\n                id: \"meta\",\n                title: \"Meta Panel\",\n                layout: \"tabs\",\n                tabs: [\n                    {\n                        name: \"Settings\",\n                        id: \"content\",\n                        view: {\n                            type: \"vue\",\n                            component: \"meta-info\",\n                            data: {\n                                data: v.data.metaFeatures.map(k => ({\n                                    name: k, ...v.data.metaInfo[k],\n                                })),\n                                callback(obj) {\n                                    for (const o of obj) {\n                                        v.data.metaInfo[o.name].update(v, o);\n                                    }\n                                    update(v);\n                                },\n                            },\n                        },\n                    },\n                    {\n                        name: \"Reorder\",\n                        id: \"reorder\",\n                        view: {\n                            type: \"vue\",\n                            component: \"reorder\",\n                            data: {\n                                title: `Reorder meta features`,\n                                array:  v.data.metaFeatures,\n                                callback(array) {\n                                    v.data.metaFeatures = array;\n                                    update(v);\n                                },\n                            },\n                        },\n                    },\n                ],\n            },\n        ],\n    };\n}\n\nfunction histoPanelDef(v: any, h: any, i: number) {\n    return {\n        id: `histo-${i}`,\n        title: `Histogram ${h[0].name}`,\n        layout: \"tabs\",\n        tabs: [\n            {\n                id: `h-settings-${i}`,\n                name: \"Settings\",\n                view: {\n                    type: \"list\",\n                    items: [\n                        {\n                            title: \"Name\",\n                            type: \"input\",\n                            bind: {\n                                object: conf,\n                                path: `histoName.#${i}`,\n                                callback() {\n                                    v.data.histoName[i] = conf.histoName[i];\n                                    update(v);\n                                },\n                            },\n                        },\n                        {\n                            title: \"Hidden\",\n                            type: \"checkbox\",\n                            bind: {\n                                object: conf,\n                                path: `histoHidden.#${i}`,\n                                callback() {\n                                    v.data.histoHidden[i] = conf.histoHidden[i];\n                                    update(v);\n                                },\n                            },\n                        },\n                        {\n                            title: \"Display sample labels\",\n                            type: \"checkbox\",\n                            bind: {\n                                object: conf,\n                                path: `displaySampleLabel.#${i}`,\n                                callback() {\n                                    v.data.displaySampleLabel[i] = conf.displaySampleLabel[i];\n                                    update(v);\n                                },\n                            },\n                        },\n                        {\n                            title: \"Max value for Y axis\",\n                            type: \"input\",\n                            format: \"float\",\n                            bind: {\n                                object: conf,\n                                path: `histoMaxValue.#${i}`,\n                                callback() {\n                                    v.data.histoMaxValue[i] = parseInt(conf.histoMaxValue[i]);\n                                    update(v);\n                                },\n                            },\n                        },\n                        {\n                            title: \"Y axis label\",\n                            type: \"input\",\n                            bind: {\n                                object: conf,\n                                path: `histoLabel.#${i}`,\n                                callback() {\n                                    v.data.histoLabel[i] = conf.histoLabel[i];\n                                    update(v);\n                                },\n                            },\n                        },\n                    ],\n                },\n            },\n            {\n                name: \"Data\",\n                id: `h-data-${i}`,\n                view: {\n                    type: \"list\",\n                    items: [\n                        {\n                            type: \"vue\",\n                            component: \"reorder\",\n                            data: {\n                                title: \"Reorder groups in histogram\",\n                                array: v.data.histoKeys[i].map(h => h.key),\n                                callback(array) {\n                                    v.data.histoKeys[i] = array.map(x => v.data.histoKeys[i].find(h => h.key === x));\n                                    updateHistoData(v, i);\n                                    update(v);\n                                },\n                            },\n                        },\n                        {\n                            type: \"vue\",\n                            component: \"color-picker\",\n                            data: {\n                                title: \"Customize colors\",\n                                scheme: copyObject(v.data.colorScales.histo[i].colors),\n                                id: \"histo\",\n                                callback(colors) {\n                                    v.data.colorScales.histo[i].colors = colors;\n                                    updateHistoLegendData(v);\n                                    update(v);\n                                },\n                            },\n                        },\n                    ],\n                },\n            },\n        ],\n    };\n}\nexport const toolbar: ToolbarDef = [];\n"]},"metadata":{},"sourceType":"module"}