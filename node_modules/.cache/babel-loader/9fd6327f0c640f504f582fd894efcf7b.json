{"ast":null,"code":"function _typeof(obj) { \"@babel/helpers - typeof\"; if (typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; }; } return _typeof(obj); }\n\nfunction _templateObject() {\n  var data = _taggedTemplateLiteral([\"\\n    Component {\\n        @for (group, pos) in data {\\n            @for key in dataKeys {\\n                @let d = group[key]\\n                Component {\\n                    key = pos + key\\n                    anchor = getAnchor()\\n                    @props barOpts(d)\\n\\n                    @let dd = { data: d, key: key }\\n                    @yield children with dd\\n                }\\n            }\\n        }\\n    }\\n    \"]);\n\n  _templateObject = function _templateObject() {\n    return data;\n  };\n\n  return data;\n}\n\nfunction _taggedTemplateLiteral(strings, raw) { if (!raw) { raw = strings.slice(0); } return Object.freeze(Object.defineProperties(strings, { raw: { value: Object.freeze(raw) } })); }\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }\n\nfunction _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }\n\nfunction _inherits(subClass, superClass) { if (typeof superClass !== \"function\" && superClass !== null) { throw new TypeError(\"Super expression must either be null or a function\"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }\n\nfunction _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }\n\nfunction _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }\n\nfunction _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === \"object\" || typeof call === \"function\")) { return call; } return _assertThisInitialized(self); }\n\nfunction _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\"); } return self; }\n\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Date.prototype.toString.call(Reflect.construct(Date, [], function () {})); return true; } catch (e) { return false; } }\n\nfunction _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }\n\nimport { GeometryUnit, GeometryValue } from \"../../defs/geometry\";\nimport { template } from \"../../template/tag\";\nimport { BaseChart } from \"./base-chart\";\nimport { inheritData as _inheritData } from \"./utils/stacked\";\nexport var StackedBars = /*#__PURE__*/function (_BaseChart) {\n  _inherits(StackedBars, _BaseChart);\n\n  var _super = _createSuper(StackedBars);\n\n  function StackedBars() {\n    var _this;\n\n    _classCallCheck(this, StackedBars);\n\n    _this = _super.apply(this, arguments);\n    _this.render = template(_templateObject());\n    return _this;\n  } // @ts-ignore\n\n\n  _createClass(StackedBars, [{\n    key: \"getYPos\",\n    value: function getYPos(offset) {\n      return this.inverted ? offset : GeometryValue.create(100, GeometryUnit.Percent, -offset);\n    } // @ts-ignore\n\n  }, {\n    key: \"barOpts\",\n    value: function barOpts(d) {\n      return this.flippedOpts({\n        x: this.getX(d.pos),\n        y: this.getY(d.minValue),\n        width: this.getWidth(),\n        height: this.getHeight(d.value, d.minValue)\n      });\n    }\n  }, {\n    key: \"inheritData\",\n    value: function inheritData() {\n      _inheritData.call(this);\n    }\n  }]);\n\n  return StackedBars;\n}(BaseChart);","map":null,"metadata":{},"sourceType":"module"}