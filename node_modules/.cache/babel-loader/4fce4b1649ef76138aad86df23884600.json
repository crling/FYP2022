{"ast":null,"code":"","map":{"version":3,"sources":[],"names":[],"mappings":"","sourcesContent":["export interface EditorDef {\n  fileSelect?: { [key: string]: FileSelectConfig };\n  sections: SectionDef[];\n}\n\ninterface FileSelectConfig {\n  uploadComponent?: string;\n}\n\ninterface BaseSectionDef {\n  title: string;\n  id: string;\n  // optional: icon\n  icon?: string;\n}\n\ninterface BuiltinSectionDef extends BaseSectionDef {\n  builtin: \"files\";\n}\n\ninterface SinglePageSectionDef extends BaseSectionDef {\n  layout: \"single-page\";\n  view: ViewDef;\n}\n\ninterface TabbedSectionDef extends BaseSectionDef {\n  layout: \"tabs\";\n  tabs: TabsDef[];\n}\n\ntype SectionDef = BuiltinSectionDef | SinglePageSectionDef | TabbedSectionDef;\n\n// Views and Tabs\n\ninterface TabsDef {\n  name: string;\n  id: string;\n  view: ViewDef;\n}\n\ninterface BaseViewDef {\n  type: string;\n}\n\ninterface ListViewDef extends BaseViewDef {\n  type: \"list\";\n  items: ItemDef[];\n}\n\ntype TableCellData =\n  | undefined\n  | string\n  | number\n  | boolean\n  | { type: \"checkbox\"; checked: boolean; onChange: (n: boolean) => void }\n  | { type: \"input\"; value: string | number; onChange: (n: string) => void }\n  | {\n      type: \"select\";\n      opts: { text: string; value: string }[];\n      onChange: (n: string) => void;\n    }\n  | { type: \"button\"; content: string; onClick: () => void };\n\nexport interface TableViewDef extends BaseViewDef {\n  type: \"table\";\n  columns: string[];\n  sortableColumns?: string[];\n  ref?: string;\n  refreshOnDataLoaded?: boolean;\n  height?: number;\n  numberOfRows: () => number;\n  dataFor: (row: number, column: string) => TableCellData;\n  onClick?: (row: number, column: number, component: any) => void;\n  onSort?: (key: string, field: any, comp: any) => void;\n}\n\ninterface CustomLegacyViewDef extends BaseViewDef {\n  type: \"custom-legacy\";\n  header_html: string;\n  body_html: string;\n}\n\ninterface VueViewDef extends BaseViewDef {\n  type: \"vue\";\n  component: string;\n  ref?: string;\n  data?: any;\n}\n\nexport type ViewDef = ListViewDef | TableViewDef | CustomLegacyViewDef | VueViewDef;\n\n// Controls\n\ninterface BaseControlDef {\n  type: string;\n  title: string;\n  disabled?: boolean;\n  ref?: string;\n}\n\ninterface TextDef extends BaseControlDef {\n  type: \"text\";\n  content?: string;\n}\n\ninterface ButtonControlDef extends BaseControlDef {\n  type: \"button\";\n  variant?: string;\n  action: (e: MouseEvent) => void;\n}\n\ninterface BindableControlDef {\n  bind?:\n    | string\n    | {\n        object: any;\n        path: string;\n        callback: (value: any, oldValue: any) => void;\n      };\n  value?: {\n    current: any;\n    callback: (value: any, oldValue: any) => void;\n  };\n}\n\ninterface CheckBoxControlDef extends BaseControlDef, BindableControlDef {\n  type: \"checkbox\";\n}\n\ninterface InputControlDef extends BaseControlDef, BindableControlDef {\n  type: \"input\";\n  format?: \"int\" | \"float\";\n  layout?: \"normal\" | \"compact\";\n}\n\ninterface SelectControlDef extends BaseControlDef, BindableControlDef {\n  type: \"select\";\n  layout?: \"normal\" | \"compact\";\n  options: Array<{ value: string; text: string }>;\n}\n\ninterface VueControlDef extends BaseControlDef {\n  type: \"vue\";\n  component: string;\n  data?: any;\n}\n\nexport type ItemDef =\n  | TextDef\n  | ButtonControlDef\n  | CheckBoxControlDef\n  | InputControlDef\n  | SelectControlDef\n  | VueControlDef;\n\n// toolbar def\n\nexport type ToolbarDef = ToolbarSectionDef[];\n\ninterface ToolbarSectionDef {\n  type: \"input-group\" | \"btn-group\" | \"vue\";\n  id?: string;\n  class?: string;\n  items?: ToolbarControlDef[];\n  component?: string;\n}\n\ninterface ToolbarBaseControlDef {\n  id?: string;\n  class?: string;\n  outlet?: string;\n  type: string;\n}\n\ninterface ToolbarBtnDef extends ToolbarBaseControlDef {\n  type: \"button\";\n  name: string;\n  icon?: string;\n  pressed?: boolean;\n  callback: () => void;\n}\n\ninterface ToolbarInputDef extends ToolbarBaseControlDef {\n  type: \"input\";\n  width?: number;\n  callback?: () => void;\n  mounted?: () => void;\n}\n\ninterface ToolbarSelectDef extends ToolbarBaseControlDef {\n  type: \"select\";\n  width?: number;\n  choices: Array<{ text: string; value: string }>;\n}\n\ninterface ToolbarVueDef extends ToolbarBaseControlDef {\n  type: \"vue\";\n  component: string;\n}\n\ntype ToolbarControlDef =\n  | ToolbarBtnDef\n  | ToolbarInputDef\n  | ToolbarSelectDef\n  | ToolbarVueDef;\n"]},"metadata":{},"sourceType":"module"}