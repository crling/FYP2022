{"ast":null,"code":"function _toConsumableArray(arr) {\n  return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _unsupportedIterableToArray(arr) || _nonIterableSpread();\n}\n\nfunction _nonIterableSpread() {\n  throw new TypeError(\"Invalid attempt to spread non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\");\n}\n\nfunction _unsupportedIterableToArray(o, minLen) {\n  if (!o) return;\n  if (typeof o === \"string\") return _arrayLikeToArray(o, minLen);\n  var n = Object.prototype.toString.call(o).slice(8, -1);\n  if (n === \"Object\" && o.constructor) n = o.constructor.name;\n  if (n === \"Map\" || n === \"Set\") return Array.from(o);\n  if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen);\n}\n\nfunction _iterableToArray(iter) {\n  if (typeof Symbol !== \"undefined\" && Symbol.iterator in Object(iter)) return Array.from(iter);\n}\n\nfunction _arrayWithoutHoles(arr) {\n  if (Array.isArray(arr)) return _arrayLikeToArray(arr);\n}\n\nfunction _arrayLikeToArray(arr, len) {\n  if (len == null || len > arr.length) len = arr.length;\n\n  for (var i = 0, arr2 = new Array(len); i < len; i++) {\n    arr2[i] = arr[i];\n  }\n\n  return arr2;\n}\n\nfunction ownKeys(object, enumerableOnly) {\n  var keys = Object.keys(object);\n\n  if (Object.getOwnPropertySymbols) {\n    var symbols = Object.getOwnPropertySymbols(object);\n    if (enumerableOnly) symbols = symbols.filter(function (sym) {\n      return Object.getOwnPropertyDescriptor(object, sym).enumerable;\n    });\n    keys.push.apply(keys, symbols);\n  }\n\n  return keys;\n}\n\nfunction _objectSpread(target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = arguments[i] != null ? arguments[i] : {};\n\n    if (i % 2) {\n      ownKeys(Object(source), true).forEach(function (key) {\n        _defineProperty(target, key, source[key]);\n      });\n    } else if (Object.getOwnPropertyDescriptors) {\n      Object.defineProperties(target, Object.getOwnPropertyDescriptors(source));\n    } else {\n      ownKeys(Object(source)).forEach(function (key) {\n        Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));\n      });\n    }\n  }\n\n  return target;\n}\n\nfunction _defineProperty(obj, key, value) {\n  if (key in obj) {\n    Object.defineProperty(obj, key, {\n      value: value,\n      enumerable: true,\n      configurable: true,\n      writable: true\n    });\n  } else {\n    obj[key] = value;\n  }\n\n  return obj;\n} // Tagged input form control\n// Based loosely on https://adamwathan.me/renderless-components-in-vuejs/\n\n\nimport Vue from '../../utils/vue';\nimport KeyCodes from '../../utils/key-codes';\nimport identity from '../../utils/identity';\nimport looseEqual from '../../utils/loose-equal';\nimport { arrayIncludes, concat } from '../../utils/array';\nimport { getComponentConfig } from '../../utils/config';\nimport { attemptBlur, attemptFocus, matches, requestAF, select } from '../../utils/dom';\nimport { isEvent, isFunction, isString } from '../../utils/inspect';\nimport { escapeRegExp, toString, trim, trimLeft } from '../../utils/string';\nimport idMixin from '../../mixins/id';\nimport normalizeSlotMixin from '../../mixins/normalize-slot';\nimport { BButton } from '../button/button';\nimport { BFormInvalidFeedback } from '../form/form-invalid-feedback';\nimport { BFormText } from '../form/form-text';\nimport { BFormTag } from './form-tag'; // --- Constants ---\n\nvar NAME = 'BFormTags'; // Supported input types (for built in input)\n\nvar TYPES = ['text', 'email', 'tel', 'url', 'number']; // Pre-compiled regular expressions for performance reasons\n\nvar RX_SPACES = /[\\s\\uFEFF\\xA0]+/g; // KeyCode constants\n\nvar ENTER = KeyCodes.ENTER,\n    BACKSPACE = KeyCodes.BACKSPACE,\n    DELETE = KeyCodes.DELETE; // --- Utility methods ---\n// Escape special chars in string and replace\n// contiguous spaces with a whitespace match\n\nvar escapeRegExpChars = function escapeRegExpChars(str) {\n  return escapeRegExp(str).replace(RX_SPACES, '\\\\s');\n}; // Remove leading/trailing spaces from array of tags and remove duplicates\n\n\nvar cleanTags = function cleanTags(tags) {\n  return concat(tags).map(function (tag) {\n    return trim(toString(tag));\n  }).filter(function (tag, index, arr) {\n    return tag.length > 0 && arr.indexOf(tag) === index;\n  });\n}; // Processes an input/change event, normalizing string or event argument\n\n\nvar processEventValue = function processEventValue(evt) {\n  return isString(evt) ? evt : isEvent(evt) ? evt.target.value || '' : '';\n}; // Returns a fresh empty `tagsState` object\n\n\nvar cleanTagsState = function cleanTagsState() {\n  return {\n    all: [],\n    valid: [],\n    invalid: [],\n    duplicate: []\n  };\n}; // @vue/component\n\n\nexport var BFormTags = /*#__PURE__*/Vue.extend({\n  name: NAME,\n  mixins: [idMixin, normalizeSlotMixin],\n  model: {\n    // Even though this is the default that Vue assumes, we need\n    // to add it for the docs to reflect that this is the model\n    prop: 'value',\n    event: 'input'\n  },\n  props: {\n    inputId: {\n      type: String // default: null\n\n    },\n    placeholder: {\n      type: String,\n      \"default\": function _default() {\n        return getComponentConfig(NAME, 'placeholder');\n      }\n    },\n    disabled: {\n      type: Boolean,\n      \"default\": false\n    },\n    name: {\n      type: String // default: null\n\n    },\n    form: {\n      type: String // default: null\n\n    },\n    autofocus: {\n      type: Boolean,\n      \"default\": false\n    },\n    state: {\n      // Tri-state: `true`, `false`, `null`\n      type: Boolean,\n      \"default\": null\n    },\n    size: {\n      type: String // default: null\n\n    },\n    inputType: {\n      type: String,\n      \"default\": 'text',\n      validator: function validator(type) {\n        return arrayIncludes(TYPES, type);\n      }\n    },\n    inputClass: {\n      type: [String, Array, Object] // default: null\n\n    },\n    inputAttrs: {\n      // Additional attributes to add to the input element\n      type: Object,\n      \"default\": function _default() {\n        return {};\n      }\n    },\n    addButtonText: {\n      type: String,\n      \"default\": function _default() {\n        return getComponentConfig(NAME, 'addButtonText');\n      }\n    },\n    addButtonVariant: {\n      type: String,\n      \"default\": function _default() {\n        return getComponentConfig(NAME, 'addButtonVariant');\n      }\n    },\n    tagVariant: {\n      type: String,\n      \"default\": function _default() {\n        return getComponentConfig(NAME, 'tagVariant');\n      }\n    },\n    tagClass: {\n      type: [String, Array, Object] // default: null\n\n    },\n    tagPills: {\n      type: Boolean,\n      \"default\": false\n    },\n    tagRemoveLabel: {\n      type: String,\n      \"default\": function _default() {\n        return getComponentConfig(NAME, 'tagRemoveLabel');\n      }\n    },\n    tagRemovedLabel: {\n      type: String,\n      \"default\": function _default() {\n        return getComponentConfig(NAME, 'tagRemovedLabel');\n      }\n    },\n    tagValidator: {\n      type: Function // default: null\n\n    },\n    duplicateTagText: {\n      type: String,\n      \"default\": function _default() {\n        return getComponentConfig(NAME, 'duplicateTagText');\n      }\n    },\n    invalidTagText: {\n      type: String,\n      \"default\": function _default() {\n        return getComponentConfig(NAME, 'invalidTagText');\n      }\n    },\n    separator: {\n      // Character (or characters) that trigger adding tags\n      type: [String, Array] // default: null\n\n    },\n    removeOnDelete: {\n      // Enable deleting last tag in list when BACKSPACE is\n      // pressed and input is empty\n      type: Boolean,\n      \"default\": false\n    },\n    addOnChange: {\n      // Enable change event triggering tag addition\n      // Handy if using <select> as the input\n      type: Boolean,\n      \"default\": false\n    },\n    noAddOnEnter: {\n      // Disable ENTER key from triggering tag addition\n      type: Boolean,\n      \"default\": false\n    },\n    noOuterFocus: {\n      // Disable the focus ring on the root element\n      type: Boolean,\n      \"default\": false\n    },\n    value: {\n      // The v-model prop\n      type: Array,\n      \"default\": function _default() {\n        return [];\n      }\n    }\n  },\n  data: function data() {\n    return {\n      hasFocus: false,\n      newTag: '',\n      tags: [],\n      // Tags that were removed\n      removedTags: [],\n      // Populated when tags are parsed\n      tagsState: cleanTagsState()\n    };\n  },\n  computed: {\n    computedInputId: function computedInputId() {\n      return this.inputId || this.safeId('__input__');\n    },\n    computedInputType: function computedInputType() {\n      // We only allow certain types\n      return arrayIncludes(TYPES, this.inputType) ? this.inputType : 'text';\n    },\n    computedInputAttrs: function computedInputAttrs() {\n      return _objectSpread(_objectSpread({}, this.inputAttrs), {}, {\n        // Must have attributes\n        id: this.computedInputId,\n        value: this.newTag,\n        disabled: this.disabled || null,\n        form: this.form || null\n      });\n    },\n    computedInputHandlers: function computedInputHandlers() {\n      return {\n        input: this.onInputInput,\n        change: this.onInputChange,\n        keydown: this.onInputKeydown\n      };\n    },\n    computedSeparator: function computedSeparator() {\n      // Merge the array into a string\n      return concat(this.separator).filter(isString).filter(identity).join('');\n    },\n    computedSeparatorRegExp: function computedSeparatorRegExp() {\n      // We use a computed prop here to precompile the RegExp\n      // The RegExp is a character class RE in the form of `/[abc]+/`\n      // where a, b, and c are the valid separator characters\n      // -> `tags = str.split(/[abc]+/).filter(t => t)`\n      var separator = this.computedSeparator;\n      return separator ? new RegExp(\"[\".concat(escapeRegExpChars(separator), \"]+\")) : null;\n    },\n    computedJoiner: function computedJoiner() {\n      // When tag(s) are invalid or duplicate, we leave them\n      // in the input so that the user can see them\n      // If there are more than one tag in the input, we use the\n      // first separator character as the separator in the input\n      // We append a space if the first separator is not a space\n      var joiner = this.computedSeparator.charAt(0);\n      return joiner !== ' ' ? \"\".concat(joiner, \" \") : joiner;\n    },\n    disableAddButton: function disableAddButton() {\n      var _this = this; // If 'Add' button should be disabled\n      // If the input contains at least one tag that can\n      // be added, then the 'Add' button should be enabled\n\n\n      var newTag = trim(this.newTag);\n      return newTag === '' || !this.splitTags(newTag).some(function (t) {\n        return !arrayIncludes(_this.tags, t) && _this.validateTag(t);\n      });\n    },\n    duplicateTags: function duplicateTags() {\n      return this.tagsState.duplicate;\n    },\n    hasDuplicateTags: function hasDuplicateTags() {\n      return this.duplicateTags.length > 0;\n    },\n    invalidTags: function invalidTags() {\n      return this.tagsState.invalid;\n    },\n    hasInvalidTags: function hasInvalidTags() {\n      return this.invalidTags.length > 0;\n    }\n  },\n  watch: {\n    value: function value(newVal) {\n      this.tags = cleanTags(newVal);\n    },\n    tags: function tags(newVal, oldVal) {\n      // Update the `v-model` (if it differs from the value prop)\n      if (!looseEqual(newVal, this.value)) {\n        this.$emit('input', newVal);\n      }\n\n      if (!looseEqual(newVal, oldVal)) {\n        newVal = concat(newVal).filter(identity);\n        oldVal = concat(oldVal).filter(identity);\n        this.removedTags = oldVal.filter(function (old) {\n          return !arrayIncludes(newVal, old);\n        });\n      }\n    },\n    tagsState: function tagsState(newVal, oldVal) {\n      // Emit a tag-state event when the `tagsState` object changes\n      if (!looseEqual(newVal, oldVal)) {\n        this.$emit('tag-state', newVal.valid, newVal.invalid, newVal.duplicate);\n      }\n    }\n  },\n  created: function created() {\n    // We do this in created to make sure an input event emits\n    // if the cleaned tags are not equal to the value prop\n    this.tags = cleanTags(this.value);\n  },\n  mounted: function mounted() {\n    this.handleAutofocus();\n  },\n\n  /* istanbul ignore next */\n  activated: function activated()\n  /* istanbul ignore next */\n  {\n    this.handleAutofocus();\n  },\n  methods: {\n    addTag: function addTag(newTag) {\n      newTag = isString(newTag) ? newTag : this.newTag;\n      /* istanbul ignore next */\n\n      if (this.disabled || trim(newTag) === '') {\n        // Early exit\n        return;\n      }\n\n      var parsed = this.parseTags(newTag); // Add any new tags to the `tags` array, or if the\n      // array of `allTags` is empty, we clear the input\n\n      if (parsed.valid.length > 0 || parsed.all.length === 0) {\n        // Clear the user input element (and leave in any invalid/duplicate tag(s)\n\n        /* istanbul ignore if: full testing to be added later */\n        if (matches(this.getInput(), 'select')) {\n          // The following is needed to properly\n          // work with `<select>` elements\n          this.newTag = '';\n        } else {\n          var invalidAndDuplicates = [].concat(_toConsumableArray(parsed.invalid), _toConsumableArray(parsed.duplicate));\n          this.newTag = parsed.all.filter(function (tag) {\n            return arrayIncludes(invalidAndDuplicates, tag);\n          }).join(this.computedJoiner).concat(invalidAndDuplicates.length > 0 ? this.computedJoiner.charAt(0) : '');\n        }\n      }\n\n      if (parsed.valid.length > 0) {\n        // We add the new tags in one atomic operation\n        // to trigger reactivity once (instead of once per tag)\n        // We do this after we update the new tag input value\n        // `concat()` can be faster than array spread, when both args are arrays\n        this.tags = concat(this.tags, parsed.valid);\n      }\n\n      this.tagsState = parsed; // Attempt to re-focus the input (specifically for when using the Add\n      // button, as the button disappears after successfully adding a tag\n\n      this.focus();\n    },\n    removeTag: function removeTag(tag) {\n      var _this2 = this;\n      /* istanbul ignore next */\n\n\n      if (this.disabled) {\n        return;\n      } // TODO:\n      //   Add `onRemoveTag(tag)` user method, which if returns `false`\n      //   will prevent the tag from being removed (i.e. confirmation)\n      //   Or emit cancelable `BvEvent`\n\n\n      this.tags = this.tags.filter(function (t) {\n        return t !== tag;\n      }); // Return focus to the input (if possible)\n\n      this.$nextTick(function () {\n        _this2.focus();\n      });\n    },\n    // --- Input element event handlers ---\n    onInputInput: function onInputInput(evt) {\n      /* istanbul ignore next: hard to test composition events */\n      if (this.disabled || isEvent(evt) && evt.target.composing) {\n        // `evt.target.composing` is set by Vue (`v-model` directive)\n        // https://github.com/vuejs/vue/blob/dev/src/platforms/web/runtime/directives/model.js\n        return;\n      }\n\n      var newTag = processEventValue(evt);\n      var separatorRe = this.computedSeparatorRegExp;\n\n      if (this.newTag !== newTag) {\n        this.newTag = newTag;\n      } // We ignore leading whitespace for the following\n\n\n      newTag = trimLeft(newTag);\n\n      if (separatorRe && separatorRe.test(newTag.slice(-1))) {\n        // A trailing separator character was entered, so add the tag(s)\n        // Note: More than one tag on input event is possible via copy/paste\n        this.addTag();\n      } else {\n        // Validate (parse tags) on input event\n        this.tagsState = newTag === '' ? cleanTagsState() : this.parseTags(newTag);\n      }\n    },\n    onInputChange: function onInputChange(evt) {\n      // Change is triggered on `<input>` blur, or `<select>` selected\n      // This event is opt-in\n      if (!this.disabled && this.addOnChange) {\n        var newTag = processEventValue(evt);\n        /* istanbul ignore next */\n\n        if (this.newTag !== newTag) {\n          this.newTag = newTag;\n        }\n\n        this.addTag();\n      }\n    },\n    onInputKeydown: function onInputKeydown(evt) {\n      // Early exit\n\n      /* istanbul ignore next */\n      if (this.disabled || !isEvent(evt)) {\n        return;\n      }\n\n      var keyCode = evt.keyCode;\n      var value = evt.target.value || '';\n      /* istanbul ignore else: testing to be added later */\n\n      if (!this.noAddOnEnter && keyCode === ENTER) {\n        // Attempt to add the tag when user presses enter\n        evt.preventDefault();\n        this.addTag();\n      } else if (this.removeOnDelete && (keyCode === BACKSPACE || keyCode === DELETE) && value === '') {\n        // Remove the last tag if the user pressed backspace/delete and the input is empty\n        evt.preventDefault();\n        this.tags = this.tags.slice(0, -1);\n      }\n    },\n    // --- Wrapper event handlers ---\n    onClick: function onClick(evt) {\n      var _this3 = this;\n\n      if (!this.disabled && isEvent(evt) && evt.target === evt.currentTarget) {\n        this.$nextTick(function () {\n          _this3.focus();\n        });\n      }\n    },\n    onFocusin: function onFocusin() {\n      this.hasFocus = true;\n    },\n    onFocusout: function onFocusout() {\n      this.hasFocus = false;\n    },\n    handleAutofocus: function handleAutofocus() {\n      var _this4 = this;\n\n      this.$nextTick(function () {\n        requestAF(function () {\n          if (_this4.autofocus && !_this4.disabled) {\n            _this4.focus();\n          }\n        });\n      });\n    },\n    // --- Public methods ---\n    focus: function focus() {\n      if (!this.disabled) {\n        attemptFocus(this.getInput());\n      }\n    },\n    blur: function blur() {\n      if (!this.disabled) {\n        attemptBlur(this.getInput());\n      }\n    },\n    // --- Private methods ---\n    splitTags: function splitTags(newTag) {\n      // Split the input into an array of raw tags\n      newTag = toString(newTag);\n      var separatorRe = this.computedSeparatorRegExp; // Split the tag(s) via the optional separator\n      // Normally only a single tag is provided, but copy/paste\n      // can enter multiple tags in a single operation\n\n      return (separatorRe ? newTag.split(separatorRe) : [newTag]).map(trim).filter(identity);\n    },\n    parseTags: function parseTags(newTag) {\n      var _this5 = this; // Takes `newTag` value and parses it into `validTags`,\n      // `invalidTags`, and duplicate tags as an object\n      // Split the input into raw tags\n\n\n      var tags = this.splitTags(newTag); // Base results\n\n      var parsed = {\n        all: tags,\n        valid: [],\n        invalid: [],\n        duplicate: []\n      }; // Parse the unique tags\n\n      tags.forEach(function (tag) {\n        if (arrayIncludes(_this5.tags, tag) || arrayIncludes(parsed.valid, tag)) {\n          // Unique duplicate tags\n          if (!arrayIncludes(parsed.duplicate, tag)) {\n            parsed.duplicate.push(tag);\n          }\n        } else if (_this5.validateTag(tag)) {\n          // We only add unique/valid tags\n          parsed.valid.push(tag);\n        } else {\n          // Unique invalid tags\n          if (!arrayIncludes(parsed.invalid, tag)) {\n            parsed.invalid.push(tag);\n          }\n        }\n      });\n      return parsed;\n    },\n    validateTag: function validateTag(tag) {\n      // Call the user supplied tag validator\n      var validator = this.tagValidator;\n      return isFunction(validator) ? validator(tag) : true;\n    },\n    getInput: function getInput() {\n      // Returns the input element reference (or null if not found)\n      return select(\"#\".concat(this.computedInputId), this.$el);\n    },\n    // Default User Interface render\n    defaultRender: function defaultRender(_ref) {\n      var tags = _ref.tags,\n          addTag = _ref.addTag,\n          removeTag = _ref.removeTag,\n          inputType = _ref.inputType,\n          inputAttrs = _ref.inputAttrs,\n          inputHandlers = _ref.inputHandlers,\n          inputClass = _ref.inputClass,\n          tagClass = _ref.tagClass,\n          tagVariant = _ref.tagVariant,\n          tagPills = _ref.tagPills,\n          tagRemoveLabel = _ref.tagRemoveLabel,\n          invalidTagText = _ref.invalidTagText,\n          duplicateTagText = _ref.duplicateTagText,\n          isInvalid = _ref.isInvalid,\n          isDuplicate = _ref.isDuplicate,\n          disabled = _ref.disabled,\n          placeholder = _ref.placeholder,\n          addButtonText = _ref.addButtonText,\n          addButtonVariant = _ref.addButtonVariant,\n          disableAddButton = _ref.disableAddButton;\n      var h = this.$createElement; // Make the list of tags\n\n      var $tags = tags.map(function (tag) {\n        tag = toString(tag);\n        return h(BFormTag, {\n          key: \"li-tag__\".concat(tag),\n          staticClass: 'mt-1 mr-1',\n          \"class\": tagClass,\n          props: {\n            // `BFormTag` will auto generate an ID\n            // so we do not need to set the ID prop\n            tag: 'li',\n            title: tag,\n            disabled: disabled,\n            variant: tagVariant,\n            pill: tagPills,\n            removeLabel: tagRemoveLabel\n          },\n          on: {\n            remove: function remove() {\n              return removeTag(tag);\n            }\n          }\n        }, tag);\n      }); // Feedback IDs if needed\n\n      var invalidFeedbackId = invalidTagText && isInvalid ? this.safeId('__invalid_feedback__') : null;\n      var duplicateFeedbackId = duplicateTagText && isDuplicate ? this.safeId('__duplicate_feedback__') : null; // Compute the `aria-describedby` attribute value\n\n      var ariaDescribedby = [inputAttrs['aria-describedby'], invalidFeedbackId, duplicateFeedbackId].filter(identity).join(' '); // Input\n\n      var $input = h('input', {\n        ref: 'input',\n        // Directive needed to get `evt.target.composing` set (if needed)\n        directives: [{\n          name: 'model',\n          value: inputAttrs.value\n        }],\n        staticClass: 'b-form-tags-input w-100 flex-grow-1 p-0 m-0 bg-transparent border-0',\n        \"class\": inputClass,\n        style: {\n          outline: 0,\n          minWidth: '5rem'\n        },\n        attrs: _objectSpread(_objectSpread({}, inputAttrs), {}, {\n          'aria-describedby': ariaDescribedby || null,\n          type: inputType,\n          placeholder: placeholder || null\n        }),\n        domProps: {\n          value: inputAttrs.value\n        },\n        on: inputHandlers\n      }); // Add button\n\n      var $button = h(BButton, {\n        ref: 'button',\n        staticClass: 'b-form-tags-button py-0',\n        \"class\": {\n          // Only show the button if the tag can be added\n          // We use the `invisible` class instead of not rendering\n          // the button, so that we maintain layout to prevent\n          // the user input from jumping around\n          invisible: disableAddButton\n        },\n        style: {\n          fontSize: '90%'\n        },\n        props: {\n          variant: addButtonVariant,\n          disabled: disableAddButton\n        },\n        on: {\n          click: function click() {\n            return addTag();\n          }\n        }\n      }, [this.normalizeSlot('add-button-text') || addButtonText]); // ID of the tags+input `<ul>` list\n      // Note we could concatenate inputAttrs.id with `__TAG__LIST__`\n      // But note that the inputID may be null until after mount\n      // `safeId` returns `null`, if no user provided ID, until after\n      // mount when a unique ID is generated\n\n      var tagListId = this.safeId('__TAG__LIST__');\n      var $field = h('li', {\n        key: '__li-input__',\n        staticClass: 'flex-grow-1 mt-1',\n        attrs: {\n          role: 'none',\n          'aria-live': 'off',\n          'aria-controls': tagListId\n        }\n      }, [h('div', {\n        staticClass: 'd-flex',\n        attrs: {\n          role: 'group'\n        }\n      }, [$input, $button])]); // Wrap in an unordered list element (we use a list for accessibility)\n\n      var $ul = h('ul', {\n        key: '_tags_list_',\n        staticClass: 'list-unstyled mt-n1 mb-0 d-flex flex-wrap align-items-center',\n        attrs: {\n          id: tagListId\n        }\n      }, // `concat()` is faster than array spread when args are known to be arrays\n      concat($tags, $field)); // Assemble the feedback\n\n      var $feedback = h();\n\n      if (invalidTagText || duplicateTagText) {\n        // Add an aria live region for the invalid/duplicate tag\n        // messages if the user has not disabled the messages\n        var joiner = this.computedJoiner; // Invalid tag feedback if needed (error)\n\n        var $invalid = h();\n\n        if (invalidFeedbackId) {\n          $invalid = h(BFormInvalidFeedback, {\n            key: '_tags_invalid_feedback_',\n            props: {\n              id: invalidFeedbackId,\n              forceShow: true\n            }\n          }, [this.invalidTagText, ': ', this.invalidTags.join(joiner)]);\n        } // Duplicate tag feedback if needed (warning, not error)\n\n\n        var $duplicate = h();\n\n        if (duplicateFeedbackId) {\n          $duplicate = h(BFormText, {\n            key: '_tags_duplicate_feedback_',\n            props: {\n              id: duplicateFeedbackId\n            }\n          }, [this.duplicateTagText, ': ', this.duplicateTags.join(joiner)]);\n        }\n\n        $feedback = h('div', {\n          key: '_tags_feedback_',\n          attrs: {\n            'aria-live': 'polite',\n            'aria-atomic': 'true'\n          }\n        }, [$invalid, $duplicate]);\n      } // Return the content\n\n\n      return [$ul, $feedback];\n    }\n  },\n  render: function render(h) {\n    var _this6 = this; // Scoped slot properties\n\n\n    var scope = {\n      // Array of tags (shallow copy to prevent mutations)\n      tags: this.tags.slice(),\n      // Methods\n      removeTag: this.removeTag,\n      addTag: this.addTag,\n      // We don't include this in the attrs, as users may want to override this\n      inputType: this.computedInputType,\n      // <input> v-bind:inputAttrs\n      inputAttrs: this.computedInputAttrs,\n      // <input> v-on:inputHandlers\n      inputHandlers: this.computedInputHandlers,\n      // <input> :id=\"inputId\"\n      inputId: this.computedInputId,\n      // Invalid/Duplicate state information\n      invalidTags: this.invalidTags.slice(),\n      isInvalid: this.hasInvalidTags,\n      duplicateTags: this.duplicateTags.slice(),\n      isDuplicate: this.hasDuplicateTags,\n      // If the 'Add' button should be disabled\n      disableAddButton: this.disableAddButton,\n      // Pass-though values\n      state: this.state,\n      separator: this.separator,\n      disabled: this.disabled,\n      size: this.size,\n      placeholder: this.placeholder,\n      inputClass: this.inputClass,\n      tagRemoveLabel: this.tagRemoveLabel,\n      tagVariant: this.tagVariant,\n      tagPills: this.tagPills,\n      tagClass: this.tagClass,\n      addButtonText: this.addButtonText,\n      addButtonVariant: this.addButtonVariant,\n      invalidTagText: this.invalidTagText,\n      duplicateTagText: this.duplicateTagText\n    }; // Generate the user interface\n\n    var $content = this.normalizeSlot('default', scope) || this.defaultRender(scope); // Generate the `aria-live` region for the current value(s)\n\n    var $output = h('output', {\n      staticClass: 'sr-only',\n      attrs: {\n        id: this.safeId('_selected-tags_'),\n        role: 'status',\n        \"for\": this.computedInputId,\n        'aria-live': this.hasFocus ? 'polite' : 'off',\n        'aria-atomic': 'true',\n        'aria-relevant': 'additions text'\n      }\n    }, this.tags.join(', ')); // Removed tag live region\n\n    var $removed = h('div', {\n      staticClass: 'sr-only',\n      attrs: {\n        id: this.safeId('_removed-tags_'),\n        role: 'status',\n        'aria-live': this.hasFocus ? 'assertive' : 'off',\n        'aria-atomic': 'true'\n      }\n    }, this.removedTags.length > 0 ? \"(\".concat(this.tagRemovedLabel, \") \").concat(this.removedTags.join(', ')) : ''); // Add hidden inputs for form submission\n\n    var $hidden = h();\n\n    if (this.name && !this.disabled) {\n      // We add hidden inputs for each tag if a name is provided\n      // for native submission of forms\n      $hidden = this.tags.map(function (tag) {\n        return h('input', {\n          key: tag,\n          attrs: {\n            type: 'hidden',\n            value: tag,\n            name: _this6.name,\n            form: _this6.form || null\n          }\n        });\n      });\n    } // Return the rendered output\n\n\n    return h('div', {\n      staticClass: 'b-form-tags form-control h-auto',\n      \"class\": _defineProperty({\n        focus: this.hasFocus && !this.noOuterFocus && !this.disabled,\n        disabled: this.disabled,\n        'is-valid': this.state === true,\n        'is-invalid': this.state === false\n      }, \"form-control-\".concat(this.size), this.size),\n      attrs: {\n        id: this.safeId(),\n        role: 'group',\n        tabindex: this.disabled || this.noOuterFocus ? null : '-1',\n        'aria-describedby': this.safeId('_selected_')\n      },\n      on: {\n        focusin: this.onFocusin,\n        focusout: this.onFocusout,\n        click: this.onClick\n      }\n    }, concat($output, $removed, $content, $hidden));\n  }\n});","map":null,"metadata":{},"sourceType":"module"}