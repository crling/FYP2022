{"ast":null,"code":"function _slicedToArray(arr, i) { return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray(arr, i) || _nonIterableRest(); }\n\nfunction _nonIterableRest() { throw new TypeError(\"Invalid attempt to destructure non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\"); }\n\nfunction _iterableToArrayLimit(arr, i) { if (typeof Symbol === \"undefined\" || !(Symbol.iterator in Object(arr))) return; var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i[\"return\"] != null) _i[\"return\"](); } finally { if (_d) throw _e; } } return _arr; }\n\nfunction _arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }\n\nfunction _createForOfIteratorHelper(o, allowArrayLike) { var it; if (typeof Symbol === \"undefined\" || o[Symbol.iterator] == null) { if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === \"number\") { if (it) o = it; var i = 0; var F = function F() {}; return { s: F, n: function n() { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }, e: function e(_e2) { throw _e2; }, f: F }; } throw new TypeError(\"Invalid attempt to iterate non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\"); } var normalCompletion = true, didErr = false, err; return { s: function s() { it = o[Symbol.iterator](); }, n: function n() { var step = it.next(); normalCompletion = step.done; return step; }, e: function e(_e3) { didErr = true; err = _e3; }, f: function f() { try { if (!normalCompletion && it[\"return\"] != null) it[\"return\"](); } finally { if (didErr) throw err; } } }; }\n\nfunction _toConsumableArray(arr) { return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _unsupportedIterableToArray(arr) || _nonIterableSpread(); }\n\nfunction _nonIterableSpread() { throw new TypeError(\"Invalid attempt to spread non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\"); }\n\nfunction _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === \"string\") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === \"Object\" && o.constructor) n = o.constructor.name; if (n === \"Map\" || n === \"Set\") return Array.from(o); if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }\n\nfunction _iterableToArray(iter) { if (typeof Symbol !== \"undefined\" && Symbol.iterator in Object(iter)) return Array.from(iter); }\n\nfunction _arrayWithoutHoles(arr) { if (Array.isArray(arr)) return _arrayLikeToArray(arr); }\n\nfunction _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }\n\nfunction _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }\n\nfunction _get(target, property, receiver) { if (typeof Reflect !== \"undefined\" && Reflect.get) { _get = Reflect.get; } else { _get = function _get(target, property, receiver) { var base = _superPropBase(target, property); if (!base) return; var desc = Object.getOwnPropertyDescriptor(base, property); if (desc.get) { return desc.get.call(receiver); } return desc.value; }; } return _get(target, property, receiver || target); }\n\nfunction _superPropBase(object, property) { while (!Object.prototype.hasOwnProperty.call(object, property)) { object = _getPrototypeOf(object); if (object === null) break; } return object; }\n\nfunction _inherits(subClass, superClass) { if (typeof superClass !== \"function\" && superClass !== null) { throw new TypeError(\"Super expression must either be null or a function\"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }\n\nfunction _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }\n\nfunction _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }\n\nfunction _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === \"object\" || typeof call === \"function\")) { return call; } return _assertThisInitialized(self); }\n\nfunction _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\"); } return self; }\n\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Date.prototype.toString.call(Reflect.construct(Date, [], function () {})); return true; } catch (e) { return false; } }\n\nfunction _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }\n\nfunction _typeof(obj) { \"@babel/helpers - typeof\"; if (typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; }; } return _typeof(obj); }\n\nvar __decorate = this && this.__decorate || function (decorators, target, key, desc) {\n  var c = arguments.length,\n      r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc,\n      d;\n  if ((typeof Reflect === \"undefined\" ? \"undefined\" : _typeof(Reflect)) === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);else for (var i = decorators.length - 1; i >= 0; i--) {\n    if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n  }\n  return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\n\nimport { groupBy, uniq } from \"lodash\";\nimport { GeometryValue } from \"../../defs/geometry\";\nimport { useTemplate } from \"../../ext/decorator\";\nimport { max, min, minmax } from \"../../utils/math\";\nimport { getPaddings } from \"../chart/utils/option-padding\";\nimport { Component } from \"../component\";\n\nvar XYPlot =\n/** @class */\nfunction () {\n  var XYPlot = /*#__PURE__*/function (_Component) {\n    _inherits(XYPlot, _Component);\n\n    var _super = _createSuper(XYPlot);\n\n    function XYPlot() {\n      var _this;\n\n      _classCallCheck(this, XYPlot);\n\n      _this = _super.apply(this, arguments);\n      _this.hasMultipleData = false;\n      return _this;\n    }\n\n    _createClass(XYPlot, [{\n      key: \"defaultProp\",\n      value: function defaultProp() {\n        return Object.assign(Object.assign({}, _get(_getPrototypeOf(XYPlot.prototype), \"defaultProp\", this).call(this)), {\n          hasPadding: true,\n          margin: [0, 0]\n        });\n      }\n    }, {\n      key: \"willRender\",\n      value: function willRender() {\n        var _this2 = this;\n\n        if (this.prop.margin.find(function (x) {\n          return x > 0.1;\n        })) {\n          console.warn(\"XYPlot: margin should not exceed 0.1, use default\");\n          this._margin = [0.05, 0.05];\n        } else this._margin = this.prop.margin;\n\n        var data = this.prop.data;\n        var handler;\n        var h_ = this.prop.dataHandler || {};\n\n        if (typeof h_.value === \"function\" && typeof h_.pos === \"function\") {\n          handler = {\n            \"default\": h_\n          };\n        } else {\n          handler = h_;\n        }\n\n        if (data) {\n          var allData;\n\n          if (Array.isArray(data)) {\n            this.data = parseData(this, data, handler[\"default\"]);\n            allData = this.data.values;\n          } else if (_typeof(data) === \"object\") {\n            this.hasMultipleData = true;\n            this.data = {};\n            Object.keys(data).forEach(function (k) {\n              return _this2.data[k] = parseData(_this2, data[k], handler[k] || handler[\"default\"]);\n            }); // all data\n\n            allData = [];\n            var keys = new Set(Object.keys(this.data));\n            var stackedData = this.prop.stackedData;\n\n            if (_typeof(stackedData) === \"object\") {\n              Object.keys(stackedData).forEach(function (k) {\n                var _allData;\n\n                if (typeof k !== \"string\" || !(k in stackedData)) throw new Error(\"\".concat(k, \" is not a valid data key.\"));\n                var flatten = stackedData[k].map(function (sd) {\n                  keys[\"delete\"](sd);\n                  return _this2.data[sd].values;\n                }).flat();\n                var grouped = groupBy(flatten, \"pos\");\n\n                var gather = function gather(pos) {\n                  return grouped[pos].reduce(function (p, c) {\n                    return {\n                      pos: p.pos,\n                      value: p.value + c.value,\n                      minValue: 0\n                    };\n                  });\n                };\n\n                (_allData = allData).push.apply(_allData, _toConsumableArray(Object.keys(grouped).map(gather)));\n              });\n            }\n\n            var _iterator = _createForOfIteratorHelper(keys.entries()),\n                _step;\n\n            try {\n              for (_iterator.s(); !(_step = _iterator.n()).done;) {\n                var _allData2;\n\n                var e = _step.value;\n\n                (_allData2 = allData).push.apply(_allData2, _toConsumableArray(this.data[e[0]].values));\n              }\n            } catch (err) {\n              _iterator.e(err);\n            } finally {\n              _iterator.f();\n            }\n          } else {\n            throw new Error(\"XYPlot: data supplied must be an array or an object.\");\n          }\n\n          this.discreteCategory = \"discreteCategory\" in this.prop ? this.prop.discreteCategory : allData.length > 0 ? typeof allData[0].pos === \"string\" : false;\n          this._cRange = this.prop.categoryRange || (this.discreteCategory ? uniq(allData.map(function (d) {\n            return d.pos;\n          })) : minmax(allData, function (d) {\n            return d.pos;\n          }));\n          var minValue = min(allData, function (d) {\n            return d.minValue;\n          });\n          this._vRange = this.prop.valueRange || [minValue < 0 || this.prop.capToMinValue ? minValue : 0, max(allData, function (d) {\n            return d.value;\n          })];\n        }\n\n        this._paddings = getPaddings(this);\n        this._xScale = this.createScale(true);\n        this._yScale = this.createScale(false);\n      }\n    }, {\n      key: \"handleChildren\",\n      value: function handleChildren(children) {\n        var _iterator2 = _createForOfIteratorHelper(children),\n            _step2;\n\n        try {\n          for (_iterator2.s(); !(_step2 = _iterator2.n()).done;) {\n            var c = _step2.value;\n            if (c.tag === \"Legend\") return;\n\n            if (\"opt\" in c) {\n              var props = c.opt.props;\n              if (!(\"width\" in props)) props.width = GeometryValue.fullSize;\n              if (!(\"height\" in props)) props.height = GeometryValue.fullSize;\n            }\n          }\n        } catch (err) {\n          _iterator2.e(err);\n        } finally {\n          _iterator2.f();\n        }\n\n        return children;\n      } // API\n\n    }, {\n      key: \"stackedDataKeys\",\n      value: function stackedDataKeys(key) {\n        return this.prop.stackedData[key];\n      } // private use\n\n    }, {\n      key: \"createScale\",\n      value: function createScale(x) {\n        var size = x ? this.$geometry.width : this.$geometry.height;\n        var func = this.flipped === x ? this.createValueScale : this.createCategoryScale;\n        return func.call(this, size);\n      }\n    }, {\n      key: \"createCategoryScale\",\n      value: function createCategoryScale(size) {\n        var _this$_paddings = _slicedToArray(this._paddings, 4),\n            pt = _this$_paddings[0],\n            pr = _this$_paddings[1],\n            pb = _this$_paddings[2],\n            pl = _this$_paddings[3];\n\n        var width = this.flipped ? size - pt - pb : size - pl - pr;\n        var n = (this.hasMultipleData ? this.data[Object.keys(this.data)[0]] : this.data).values.length;\n        if (!this.prop.hasPadding) n -= 1;\n        var gap = typeof this.prop.gap === \"number\" ? this.prop.gap : width * 0.1 / n;\n        var columnSizeWithGap = (width - gap) / n;\n        this.columnWidth = columnSizeWithGap - gap;\n        var padding = this.prop.hasPadding ? (columnSizeWithGap + gap) * 0.5 : 0;\n        var domain = [padding, width - padding];\n\n        if (this.discreteCategory) {\n          var ticks = Array(n).fill(null).map(function (_, i) {\n            return i * columnSizeWithGap + domain[0];\n          });\n          return this._createScaleOrdinal(this._cRange, ticks);\n        } else {\n          var scale = this._createScale(this.prop.categoryUseLog ? \"log\" : \"linear\", true, this._cRange, domain);\n\n          return scale;\n        }\n      }\n    }, {\n      key: \"createValueScale\",\n      value: function createValueScale(size) {\n        var _this$_paddings2 = _slicedToArray(this._paddings, 4),\n            pt = _this$_paddings2[0],\n            pr = _this$_paddings2[1],\n            pb = _this$_paddings2[2],\n            pl = _this$_paddings2[3];\n\n        var width = this.flipped ? size - pl - pr : size - pt - pb;\n\n        var scale = this._createScale(this.prop.valueUseLog ? \"log\" : \"linear\", false, this._vRange, this.inverted ? [width * this._margin[1] / 2, width * (1 - this._margin[1] / 2)] : [width * (1 - this._margin[1] / 2), width * this._margin[1] / 2]);\n\n        return scale;\n      }\n    }, {\n      key: \"flipped\",\n      get: function get() {\n        return !!this.prop.flip;\n      }\n    }, {\n      key: \"inverted\",\n      get: function get() {\n        return !!this.prop.invertValueAxis;\n      }\n    }, {\n      key: \"categoryScale\",\n      get: function get() {\n        return this.flipped ? this._yScale : this._xScale;\n      }\n    }, {\n      key: \"valueScale\",\n      get: function get() {\n        return this.flipped ? this._xScale : this._yScale;\n      }\n    }, {\n      key: \"categories\",\n      get: function get() {\n        return this._cRange;\n      }\n    }]);\n\n    return XYPlot;\n  }(Component);\n\n  XYPlot = __decorate([useTemplate(\"\\nComponent {\\n    Component {\\n        @let p = _paddings\\n\\n        x = p[3]\\n        y = p[0]\\n        width = @geo(100, -p[1]-p[3])\\n        height = @geo(100, -p[0]-p[2])\\n        xScale = _xScale\\n        yScale = _yScale\\n\\n        @yield children then handleChildren\\n    }\\n}\\n\")], XYPlot);\n  return XYPlot;\n}();\n\nexport { XYPlot };\nexport function getGetter(vf) {\n  return typeof vf === \"string\" ? function (d) {\n    return d[vf];\n  } : vf;\n}\nexport function parseData(elm, data, h) {\n  h = h ? addDefaultsToDataHandler(h) : createDataHandler(data);\n  var categories = null;\n\n  if (h.categories) {\n    categories = h.categories(data);\n  }\n\n  return {\n    values: h.values(data).map(function (d, i) {\n      return {\n        pos: categories ? categories[i] : h.pos(d, i),\n        value: h.value(d, i),\n        minValue: h.min(d, i),\n        data: d\n      };\n    }),\n    raw: data\n  };\n}\n\nfunction addDefaultsToDataHandler(h) {\n  if (!h.value) h.value = function (d) {\n    return d.value;\n  };\n  if (!h.min) h.min = function (d) {\n    return 0;\n  };\n  if (!h.pos) h.pos = function (d, i) {\n    return i;\n  };\n  if (!h.values) h.values = function (d) {\n    return d;\n  };\n  return h;\n}\n\nfunction createDataHandler(data) {\n  var values = function values(d) {\n    return d;\n  };\n\n  var categories = null;\n  var v;\n\n  if (Array.isArray(data)) {\n    v = data;\n  } else {\n    values = function values(d) {\n      return d[\"values\"];\n    };\n\n    if (\"categories\" in data) {\n      categories = function categories(d) {\n        return d.categories;\n      };\n    }\n\n    v = data.values;\n    if (!Array.isArray(v)) throw new Error(\"XYPlot is unable to handle the data. Please use a customized data handler.\");\n  }\n\n  var d = v[0];\n\n  var pos = function pos(d, i) {\n    return i;\n  };\n\n  var min = function min(d, i) {\n    return 0;\n  };\n\n  var max;\n\n  if (typeof d === \"number\") {\n    max = function max(d) {\n      return d;\n    };\n  } else if (Array.isArray(d)) {\n    if (d.length === 2 && typeof d[0] === \"string\") {\n      max = function max(d) {\n        return d[1];\n      };\n\n      pos = function pos(d) {\n        return d[0];\n      };\n    } else {\n      max = function max(d) {\n        return d[d.length - 1];\n      };\n\n      min = function min(d) {\n        return d[0];\n      };\n    }\n  } else {\n    pos = function pos(d) {\n      return d.pos;\n    };\n\n    max = function max(d) {\n      return d.value;\n    };\n  }\n\n  return {\n    categories: categories,\n    values: values,\n    min: min,\n    value: max,\n    pos: pos\n  };\n}","map":null,"metadata":{},"sourceType":"module"}