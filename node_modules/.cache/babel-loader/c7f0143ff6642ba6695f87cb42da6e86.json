{"ast":null,"code":"function ownKeys(object, enumerableOnly) {\n  var keys = Object.keys(object);\n\n  if (Object.getOwnPropertySymbols) {\n    var symbols = Object.getOwnPropertySymbols(object);\n    if (enumerableOnly) symbols = symbols.filter(function (sym) {\n      return Object.getOwnPropertyDescriptor(object, sym).enumerable;\n    });\n    keys.push.apply(keys, symbols);\n  }\n\n  return keys;\n}\n\nfunction _objectSpread(target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = arguments[i] != null ? arguments[i] : {};\n\n    if (i % 2) {\n      ownKeys(Object(source), true).forEach(function (key) {\n        _defineProperty(target, key, source[key]);\n      });\n    } else if (Object.getOwnPropertyDescriptors) {\n      Object.defineProperties(target, Object.getOwnPropertyDescriptors(source));\n    } else {\n      ownKeys(Object(source)).forEach(function (key) {\n        Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));\n      });\n    }\n  }\n\n  return target;\n}\n\nfunction _defineProperty(obj, key, value) {\n  if (key in obj) {\n    Object.defineProperty(obj, key, {\n      value: value,\n      enumerable: true,\n      configurable: true,\n      writable: true\n    });\n  } else {\n    obj[key] = value;\n  }\n\n  return obj;\n}\n\nimport Vue from '../../utils/vue';\nimport { BVFormBtnLabelControl, dropdownProps } from '../../utils/bv-form-btn-label-control';\nimport { getComponentConfig } from '../../utils/config';\nimport { attemptBlur, attemptFocus } from '../../utils/dom';\nimport { isUndefinedOrNull } from '../../utils/inspect';\nimport idMixin from '../../mixins/id';\nimport { BButton } from '../button/button';\nimport { BTime } from '../time/time';\nimport { BIconClock, BIconClockFill } from '../../icons/icons';\nvar NAME = 'BFormTimepicker'; // Fallback to BTime/BFormSpinbutton prop if no value found\n\nvar getConfigFallback = function getConfigFallback(prop) {\n  return getComponentConfig(NAME, prop) || getComponentConfig('BTime', prop) || getComponentConfig('BFormSpinbutton', prop);\n}; // We create our props as a mixin so that we can control\n// where they appear in the props listing reference section\n\n\nvar propsMixin = {\n  props: _objectSpread({\n    value: {\n      type: String,\n      \"default\": ''\n    },\n    resetValue: {\n      type: String,\n      \"default\": ''\n    },\n    placeholder: {\n      type: String // Defaults to `labelNoTime` from BTime context\n      // default: null\n\n    },\n    size: {\n      type: String // default: null\n\n    },\n    disabled: {\n      type: Boolean,\n      \"default\": false\n    },\n    readonly: {\n      type: Boolean,\n      \"default\": false\n    },\n    required: {\n      // If true adds the `aria-required` attribute\n      type: Boolean,\n      \"default\": false\n    },\n    name: {\n      type: String // default: null\n\n    },\n    form: {\n      type: String // default: null\n\n    },\n    state: {\n      // Tri-state prop: `true`, `false` or `null`\n      type: Boolean,\n      \"default\": null\n    },\n    hour12: {\n      // Tri-state prop: `true` => 12 hour, `false` => 24 hour, `null` => auto\n      type: Boolean,\n      \"default\": null\n    },\n    locale: {\n      type: [String, Array] // default: null\n\n    },\n    showSeconds: {\n      type: Boolean,\n      \"default\": false\n    },\n    hideHeader: {\n      type: Boolean,\n      \"default\": false\n    },\n    secondsStep: {\n      type: [Number, String],\n      \"default\": 1\n    },\n    minutesStep: {\n      type: [Number, String],\n      \"default\": 1\n    },\n    buttonOnly: {\n      type: Boolean,\n      \"default\": false\n    },\n    buttonVariant: {\n      // Applicable in button only mode\n      type: String,\n      \"default\": 'secondary'\n    },\n    nowButton: {\n      type: Boolean,\n      \"default\": false\n    },\n    labelNowButton: {\n      type: String,\n      \"default\": function _default() {\n        return getComponentConfig(NAME, 'labelNowButton');\n      }\n    },\n    nowButtonVariant: {\n      type: String,\n      \"default\": 'outline-primary'\n    },\n    resetButton: {\n      type: Boolean,\n      \"default\": false\n    },\n    labelResetButton: {\n      type: String,\n      \"default\": function _default() {\n        return getComponentConfig(NAME, 'labelResetButton');\n      }\n    },\n    resetButtonVariant: {\n      type: String,\n      \"default\": 'outline-danger'\n    },\n    noCloseButton: {\n      type: Boolean,\n      \"default\": false\n    },\n    labelCloseButton: {\n      type: String,\n      \"default\": function _default() {\n        return getComponentConfig(NAME, 'labelCloseButton');\n      }\n    },\n    closeButtonVariant: {\n      type: String,\n      \"default\": 'outline-secondary'\n    },\n    // Labels\n    // These fallback to BTime values\n    labelSelected: {\n      type: String,\n      \"default\": function _default() {\n        return getConfigFallback('labelSelected');\n      }\n    },\n    labelNoTimeSelected: {\n      type: String,\n      \"default\": function _default() {\n        return getConfigFallback('labelNoTimeSelected');\n      }\n    },\n    labelHours: {\n      type: String,\n      \"default\": function _default() {\n        return getConfigFallback('labelHours');\n      }\n    },\n    labelMinutes: {\n      type: String,\n      \"default\": function _default() {\n        return getConfigFallback('labelMinutes');\n      }\n    },\n    labelSeconds: {\n      type: String,\n      \"default\": function _default() {\n        return getConfigFallback('labelSeconds');\n      }\n    },\n    labelAmpm: {\n      type: String,\n      \"default\": function _default() {\n        return getConfigFallback('labelAmpm');\n      }\n    },\n    labelAm: {\n      type: String,\n      \"default\": function _default() {\n        return getConfigFallback('labelAm');\n      }\n    },\n    labelPm: {\n      type: String,\n      \"default\": function _default() {\n        return getConfigFallback('labelPm');\n      }\n    },\n    // These pick BTime or BFormSpinbutton global config if no BFormTimepicker global config\n    labelIncrement: {\n      type: String,\n      \"default\": function _default() {\n        return getConfigFallback('labelIncrement');\n      }\n    },\n    labelDecrement: {\n      type: String,\n      \"default\": function _default() {\n        return getConfigFallback('labelDecrement');\n      }\n    },\n    // extra dropdown stuff\n    menuClass: {\n      type: [String, Array, Object] // default: null\n\n    }\n  }, dropdownProps)\n}; // --- BFormDate component ---\n// @vue/component\n\nexport var BFormTimepicker = /*#__PURE__*/Vue.extend({\n  name: NAME,\n  // The mixins order determines the order of appearance in the props reference section\n  mixins: [idMixin, propsMixin],\n  model: {\n    prop: 'value',\n    event: 'input'\n  },\n  data: function data() {\n    return {\n      // We always use `HH:mm:ss` value internally\n      localHMS: this.value || '',\n      // Context data from BTime\n      localLocale: null,\n      isRTL: false,\n      formattedValue: '',\n      // If the menu is opened\n      isVisible: false\n    };\n  },\n  computed: {\n    computedLang: function computedLang() {\n      return (this.localLocale || '').replace(/-u-.*$/i, '') || null;\n    },\n    timeProps: function timeProps() {\n      // Props we pass to BTime\n      // Use self for better minification, as `this` won't\n      // minimize and we reference it many times below\n      var self = this;\n      return {\n        hidden: !self.isVisible,\n        value: self.localHMS,\n        // Passthrough props\n        readonly: self.readonly,\n        disabled: self.disabled,\n        locale: self.locale,\n        hour12: self.hour12,\n        hideHeader: self.hideHeader,\n        showSeconds: self.showSeconds,\n        secondsStep: self.secondsStep,\n        minutesStep: self.minutesStep,\n        labelNoTimeSelected: self.labelNoTimeSelected,\n        labelSelected: self.labelSelected,\n        labelHours: self.labelHours,\n        labelMinutes: self.labelMinutes,\n        labelSeconds: self.labelSeconds,\n        labelAmpm: self.labelAmpm,\n        labelAm: self.labelAm,\n        labelPm: self.labelPm,\n        labelIncrement: self.labelIncrement,\n        labelDecrement: self.labelDecrement\n      };\n    }\n  },\n  watch: {\n    value: function value(newVal) {\n      this.localHMS = newVal || '';\n    },\n    localHMS: function localHMS(newVal) {\n      // We only update the v-model value when the timepicker\n      // is open, to prevent cursor jumps when bound to a\n      // text input in button only mode\n      if (this.isVisible) {\n        this.$emit('input', newVal || '');\n      }\n    }\n  },\n  methods: {\n    // Public methods\n    focus: function focus() {\n      if (!this.disabled) {\n        attemptFocus(this.$refs.control);\n      }\n    },\n    blur: function blur() {\n      if (!this.disabled) {\n        attemptBlur(this.$refs.control);\n      }\n    },\n    // Private methods\n    setAndClose: function setAndClose(value) {\n      var _this = this;\n\n      this.localHMS = value;\n      this.$nextTick(function () {\n        _this.$refs.control.hide(true);\n      });\n    },\n    onInput: function onInput(hms) {\n      if (this.localHMS !== hms) {\n        this.localHMS = hms;\n      }\n    },\n    onContext: function onContext(ctx) {\n      var isRTL = ctx.isRTL,\n          locale = ctx.locale,\n          value = ctx.value,\n          formatted = ctx.formatted;\n      this.isRTL = isRTL;\n      this.localLocale = locale;\n      this.formattedValue = formatted;\n      this.localHMS = value || ''; // Re-emit the context event\n\n      this.$emit('context', ctx);\n    },\n    onNowButton: function onNowButton() {\n      var now = new Date();\n      var hours = now.getHours();\n      var minutes = now.getMinutes();\n      var seconds = this.showSeconds ? now.getSeconds() : 0;\n      var value = [hours, minutes, seconds].map(function (v) {\n        return \"00\".concat(v || '').slice(-2);\n      }).join(':');\n      this.setAndClose(value);\n    },\n    onResetButton: function onResetButton() {\n      this.setAndClose(this.resetValue);\n    },\n    onCloseButton: function onCloseButton() {\n      this.$refs.control.hide(true);\n    },\n    onShow: function onShow() {\n      this.isVisible = true;\n    },\n    onShown: function onShown() {\n      var _this2 = this;\n\n      this.$nextTick(function () {\n        attemptFocus(_this2.$refs.time);\n\n        _this2.$emit('shown');\n      });\n    },\n    onHidden: function onHidden() {\n      this.isVisible = false;\n      this.$emit('hidden');\n    },\n    // Render function helpers\n    defaultButtonFn: function defaultButtonFn(_ref) {\n      var isHovered = _ref.isHovered,\n          hasFocus = _ref.hasFocus;\n      return this.$createElement(isHovered || hasFocus ? BIconClockFill : BIconClock, {\n        attrs: {\n          'aria-hidden': 'true'\n        }\n      });\n    }\n  },\n  render: function render(h) {\n    var localHMS = this.localHMS,\n        disabled = this.disabled,\n        readonly = this.readonly;\n    var placeholder = isUndefinedOrNull(this.placeholder) ? this.labelNoTimeSelected : this.placeholder; // Footer buttons\n\n    var $footer = [];\n\n    if (this.nowButton) {\n      var label = this.labelNowButton;\n      $footer.push(h(BButton, {\n        key: 'now-btn',\n        props: {\n          size: 'sm',\n          disabled: disabled || readonly,\n          variant: this.nowButtonVariant\n        },\n        attrs: {\n          'aria-label': label || null\n        },\n        on: {\n          click: this.onNowButton\n        }\n      }, label));\n    }\n\n    if (this.resetButton) {\n      if ($footer.length > 0) {\n        // Add a \"spacer\" between buttons ('&nbsp;')\n        $footer.push(h('span', \"\\xA0\"));\n      }\n\n      var _label = this.labelResetButton;\n      $footer.push(h(BButton, {\n        key: 'reset-btn',\n        props: {\n          size: 'sm',\n          disabled: disabled || readonly,\n          variant: this.resetButtonVariant\n        },\n        attrs: {\n          'aria-label': _label || null\n        },\n        on: {\n          click: this.onResetButton\n        }\n      }, _label));\n    }\n\n    if (!this.noCloseButton) {\n      if ($footer.length > 0) {\n        // Add a \"spacer\" between buttons ('&nbsp;')\n        $footer.push(h('span', \"\\xA0\"));\n      }\n\n      var _label2 = this.labelCloseButton;\n      $footer.push(h(BButton, {\n        key: 'close-btn',\n        props: {\n          size: 'sm',\n          disabled: disabled,\n          variant: this.closeButtonVariant\n        },\n        attrs: {\n          'aria-label': _label2 || null\n        },\n        on: {\n          click: this.onCloseButton\n        }\n      }, _label2));\n    }\n\n    if ($footer.length > 0) {\n      $footer = [h('div', {\n        staticClass: 'b-form-date-controls d-flex flex-wrap',\n        \"class\": {\n          'justify-content-between': $footer.length > 1,\n          'justify-content-end': $footer.length < 2\n        }\n      }, $footer)];\n    }\n\n    var $time = h(BTime, {\n      ref: 'time',\n      staticClass: 'b-form-time-control',\n      props: this.timeProps,\n      on: {\n        input: this.onInput,\n        context: this.onContext\n      }\n    }, $footer);\n    return h(BVFormBtnLabelControl, {\n      ref: 'control',\n      staticClass: 'b-form-timepicker',\n      props: _objectSpread(_objectSpread({}, this.$props), {}, {\n        // Overridden / computed props\n        id: this.safeId(),\n        rtl: this.isRTL,\n        lang: this.computedLang,\n        value: localHMS || '',\n        formattedValue: localHMS ? this.formattedValue : '',\n        placeholder: placeholder || ''\n      }),\n      on: {\n        show: this.onShow,\n        shown: this.onShown,\n        hidden: this.onHidden\n      },\n      scopedSlots: {\n        'button-content': this.$scopedSlots['button-content'] || this.defaultButtonFn\n      }\n    }, [$time]);\n  }\n});","map":null,"metadata":{},"sourceType":"module"}