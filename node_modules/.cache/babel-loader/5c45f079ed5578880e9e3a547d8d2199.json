{"ast":null,"code":"function _slicedToArray(arr, i) { return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray(arr, i) || _nonIterableRest(); }\n\nfunction _nonIterableRest() { throw new TypeError(\"Invalid attempt to destructure non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\"); }\n\nfunction _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === \"string\") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === \"Object\" && o.constructor) n = o.constructor.name; if (n === \"Map\" || n === \"Set\") return Array.from(o); if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }\n\nfunction _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }\n\nfunction _iterableToArrayLimit(arr, i) { if (typeof Symbol === \"undefined\" || !(Symbol.iterator in Object(arr))) return; var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i[\"return\"] != null) _i[\"return\"](); } finally { if (_d) throw _e; } } return _arr; }\n\nfunction _arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }\n\nimport { Matrix } from \"./matrix\";\nexport default function (el, event) {\n  if (\"_m_x\" in event) {\n    var dpi = window.devicePixelRatio;\n    var point = {\n      x: event._m_x / dpi,\n      y: event._m_y / dpi\n    };\n    var m = compose(el);\n    transformPoint(point, m.inverse());\n    return [point.x, point.y];\n  }\n\n  while (!el.vnode) {\n    el = el.children[0];\n  }\n\n  var node = el.vnode.elm;\n  var svg = node.ownerSVGElement || node;\n\n  if (svg.createSVGPoint) {\n    var _point = svg.createSVGPoint();\n\n    _point.x = event.clientX;\n    _point.y = event.clientY;\n    _point = _point.matrixTransform(node.getScreenCTM().inverse());\n    return [_point.x, _point.y];\n  }\n\n  var rect = node.getBoundingClientRect();\n  return [event.clientX - rect.left - node.clientLeft, event.clientY - rect.top - node.clientTop];\n}\n\nfunction compose(el) {\n  if (!el) return new Matrix();\n  var m = compose(el.parent);\n\n  if (el.$_cachedTransform) {\n    var _el$$_cachedTransform = _slicedToArray(el.$_cachedTransform, 3),\n        x = _el$$_cachedTransform[0],\n        y = _el$$_cachedTransform[1],\n        r = _el$$_cachedTransform[2];\n\n    if (x !== 0 || y !== 0) m = m.transform(Matrix.translate(x, y));\n    if (r !== 0) m = m.transform(Matrix.rotate(r));\n  }\n\n  return m;\n}\n\nfunction transformPoint(point, m) {\n  var x = m.a * point.x + m.c * point.y + m.e;\n  var y = m.b * point.x + m.d * point.y + m.f;\n  point.x = x;\n  point.y = y;\n}","map":null,"metadata":{},"sourceType":"module"}