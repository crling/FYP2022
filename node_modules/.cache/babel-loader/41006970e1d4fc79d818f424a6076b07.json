{"ast":null,"code":"function _toConsumableArray(arr) {\n  return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _unsupportedIterableToArray(arr) || _nonIterableSpread();\n}\n\nfunction _nonIterableSpread() {\n  throw new TypeError(\"Invalid attempt to spread non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\");\n}\n\nfunction _unsupportedIterableToArray(o, minLen) {\n  if (!o) return;\n  if (typeof o === \"string\") return _arrayLikeToArray(o, minLen);\n  var n = Object.prototype.toString.call(o).slice(8, -1);\n  if (n === \"Object\" && o.constructor) n = o.constructor.name;\n  if (n === \"Map\" || n === \"Set\") return Array.from(o);\n  if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen);\n}\n\nfunction _iterableToArray(iter) {\n  if (typeof Symbol !== \"undefined\" && Symbol.iterator in Object(iter)) return Array.from(iter);\n}\n\nfunction _arrayWithoutHoles(arr) {\n  if (Array.isArray(arr)) return _arrayLikeToArray(arr);\n}\n\nfunction _arrayLikeToArray(arr, len) {\n  if (len == null || len > arr.length) len = arr.length;\n\n  for (var i = 0, arr2 = new Array(len); i < len; i++) {\n    arr2[i] = arr[i];\n  }\n\n  return arr2;\n}\n\nfunction ownKeys(object, enumerableOnly) {\n  var keys = Object.keys(object);\n\n  if (Object.getOwnPropertySymbols) {\n    var symbols = Object.getOwnPropertySymbols(object);\n    if (enumerableOnly) symbols = symbols.filter(function (sym) {\n      return Object.getOwnPropertyDescriptor(object, sym).enumerable;\n    });\n    keys.push.apply(keys, symbols);\n  }\n\n  return keys;\n}\n\nfunction _objectSpread(target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = arguments[i] != null ? arguments[i] : {};\n\n    if (i % 2) {\n      ownKeys(Object(source), true).forEach(function (key) {\n        _defineProperty(target, key, source[key]);\n      });\n    } else if (Object.getOwnPropertyDescriptors) {\n      Object.defineProperties(target, Object.getOwnPropertyDescriptors(source));\n    } else {\n      ownKeys(Object(source)).forEach(function (key) {\n        Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));\n      });\n    }\n  }\n\n  return target;\n}\n\nfunction _defineProperty(obj, key, value) {\n  if (key in obj) {\n    Object.defineProperty(obj, key, {\n      value: value,\n      enumerable: true,\n      configurable: true,\n      writable: true\n    });\n  } else {\n    obj[key] = value;\n  }\n\n  return obj;\n}\n\nimport Vue from '../../utils/vue';\nimport { concat } from '../../utils/array';\nimport { getComponentConfig } from '../../utils/config';\nimport { attemptBlur, attemptFocus } from '../../utils/dom';\nimport { isBoolean, isEvent, isFunction, isUndefined } from '../../utils/inspect';\nimport { pluckProps } from '../../utils/props';\nimport { computeHref, computeRel, computeTag, isRouterLink as _isRouterLink } from '../../utils/router';\nimport attrsMixin from '../../mixins/attrs';\nimport listenersMixin from '../../mixins/listeners';\nimport normalizeSlotMixin from '../../mixins/normalize-slot'; // --- Constants ---\n\nvar NAME = 'BLink'; // --- Props ---\n// <router-link> specific props\n\nexport var routerLinkProps = {\n  to: {\n    type: [String, Object],\n    \"default\": null\n  },\n  append: {\n    type: Boolean,\n    \"default\": false\n  },\n  replace: {\n    type: Boolean,\n    \"default\": false\n  },\n  event: {\n    type: [String, Array],\n    \"default\": 'click'\n  },\n  activeClass: {\n    type: String // default: undefined\n\n  },\n  exact: {\n    type: Boolean,\n    \"default\": false\n  },\n  exactActiveClass: {\n    type: String // default: undefined\n\n  },\n  routerTag: {\n    type: String,\n    \"default\": 'a'\n  }\n}; // <nuxt-link> specific props\n\nexport var nuxtLinkProps = {\n  prefetch: {\n    type: Boolean,\n    // Must be `null` to fall back to the value defined in the\n    // `nuxt.config.js` configuration file for `router.prefetchLinks`\n    // We convert `null` to `undefined`, so that Nuxt.js will use the\n    // compiled default. Vue treats `undefined` as default of `false`\n    // for Boolean props, so we must set it as `null` here to be a\n    // true tri-state prop\n    \"default\": null\n  },\n  noPrefetch: {\n    type: Boolean,\n    \"default\": false\n  }\n};\nexport var props = _objectSpread(_objectSpread(_objectSpread({\n  href: {\n    type: String,\n    \"default\": null\n  },\n  rel: {\n    type: String,\n    // Must be `null` if no value provided\n    \"default\": null\n  },\n  target: {\n    type: String,\n    \"default\": '_self'\n  },\n  active: {\n    type: Boolean,\n    \"default\": false\n  },\n  disabled: {\n    type: Boolean,\n    \"default\": false\n  }\n}, routerLinkProps), nuxtLinkProps), {}, {\n  // To support 3rd party router links based on `<router-link>` (i.e. `g-link` for Gridsome)\n  // Default is to auto choose between `<router-link>` and `<nuxt-link>`\n  // Gridsome doesn't provide a mechanism to auto detect and has caveats\n  // such as not supporting FQDN URLs or hash only URLs\n  routerComponentName: {\n    type: String,\n    \"default\": function _default() {\n      return getComponentConfig(NAME, 'routerComponentName');\n    }\n  }\n}); // --- Main component ---\n// @vue/component\n\nexport var BLink = /*#__PURE__*/Vue.extend({\n  name: 'BLink',\n  // Mixin order is important!\n  mixins: [attrsMixin, listenersMixin, normalizeSlotMixin],\n  inheritAttrs: false,\n  props: props,\n  computed: {\n    computedTag: function computedTag() {\n      // We don't pass `this` as the first arg as we need reactivity of the props\n      var to = this.to,\n          disabled = this.disabled,\n          routerComponentName = this.routerComponentName;\n      return computeTag({\n        to: to,\n        disabled: disabled,\n        routerComponentName: routerComponentName\n      }, this);\n    },\n    isRouterLink: function isRouterLink() {\n      return _isRouterLink(this.computedTag);\n    },\n    computedRel: function computedRel() {\n      // We don't pass `this` as the first arg as we need reactivity of the props\n      return computeRel({\n        target: this.target,\n        rel: this.rel\n      });\n    },\n    computedHref: function computedHref() {\n      // We don't pass `this` as the first arg as we need reactivity of the props\n      return computeHref({\n        to: this.to,\n        href: this.href\n      }, this.computedTag);\n    },\n    computedProps: function computedProps() {\n      var prefetch = this.prefetch;\n      return this.isRouterLink ? _objectSpread(_objectSpread({}, pluckProps(_objectSpread(_objectSpread({}, routerLinkProps), nuxtLinkProps), this)), {}, {\n        // Coerce `prefetch` value `null` to be `undefined`\n        prefetch: isBoolean(prefetch) ? prefetch : undefined,\n        // Pass `router-tag` as `tag` prop\n        tag: this.routerTag\n      }) : {};\n    },\n    computedAttrs: function computedAttrs() {\n      var bvAttrs = this.bvAttrs,\n          href = this.computedHref,\n          rel = this.computedRel,\n          disabled = this.disabled,\n          target = this.target,\n          routerTag = this.routerTag,\n          isRouterLink = this.isRouterLink;\n      return _objectSpread(_objectSpread(_objectSpread(_objectSpread({}, bvAttrs), href ? {\n        href: href\n      } : {}), isRouterLink && routerTag !== 'a' && routerTag !== 'area' ? {} : {\n        rel: rel,\n        target: target\n      }), {}, {\n        tabindex: disabled ? '-1' : isUndefined(bvAttrs.tabindex) ? null : bvAttrs.tabindex,\n        'aria-disabled': disabled ? 'true' : null\n      });\n    },\n    computedListeners: function computedListeners() {\n      return _objectSpread(_objectSpread({}, this.bvListeners), {}, {\n        // We want to overwrite any click handler since our callback\n        // will invoke the user supplied handler(s) if `!this.disabled`\n        click: this.onClick\n      });\n    }\n  },\n  methods: {\n    onClick: function onClick(evt) {\n      var _arguments = arguments;\n      var evtIsEvent = isEvent(evt);\n      var isRouterLink = this.isRouterLink;\n      var suppliedHandler = this.bvListeners.click;\n\n      if (evtIsEvent && this.disabled) {\n        // Stop event from bubbling up\n        evt.stopPropagation(); // Kill the event loop attached to this specific `EventTarget`\n        // Needed to prevent `vue-router` for doing its thing\n\n        evt.stopImmediatePropagation();\n      } else {\n        /* istanbul ignore next: difficult to test, but we know it works */\n        if (isRouterLink && evt.currentTarget.__vue__) {\n          // Router links do not emit instance `click` events, so we\n          // add in an `$emit('click', evt)` on its Vue instance\n          evt.currentTarget.__vue__.$emit('click', evt);\n        } // Call the suppliedHandler(s), if any provided\n\n\n        concat(suppliedHandler).filter(function (h) {\n          return isFunction(h);\n        }).forEach(function (handler) {\n          handler.apply(void 0, _toConsumableArray(_arguments));\n        }); // Emit the global `$root` click event\n\n        this.$root.$emit('clicked::link', evt);\n      } // Stop scroll-to-top behavior or navigation on\n      // regular links when href is just '#'\n\n\n      if (evtIsEvent && (this.disabled || !isRouterLink && this.computedHref === '#')) {\n        evt.preventDefault();\n      }\n    },\n    focus: function focus() {\n      attemptFocus(this.$el);\n    },\n    blur: function blur() {\n      attemptBlur(this.$el);\n    }\n  },\n  render: function render(h) {\n    var active = this.active,\n        disabled = this.disabled;\n    return h(this.computedTag, _defineProperty({\n      \"class\": {\n        active: active,\n        disabled: disabled\n      },\n      attrs: this.computedAttrs,\n      props: this.computedProps\n    }, this.isRouterLink ? 'nativeOn' : 'on', this.computedListeners), this.normalizeSlot('default'));\n  }\n});","map":null,"metadata":{},"sourceType":"module"}