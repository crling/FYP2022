{"ast":null,"code":"function _toConsumableArray(arr) { return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _unsupportedIterableToArray(arr) || _nonIterableSpread(); }\n\nfunction _nonIterableSpread() { throw new TypeError(\"Invalid attempt to spread non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\"); }\n\nfunction _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === \"string\") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === \"Object\" && o.constructor) n = o.constructor.name; if (n === \"Map\" || n === \"Set\") return Array.from(o); if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }\n\nfunction _iterableToArray(iter) { if (typeof Symbol !== \"undefined\" && Symbol.iterator in Object(iter)) return Array.from(iter); }\n\nfunction _arrayWithoutHoles(arr) { if (Array.isArray(arr)) return _arrayLikeToArray(arr); }\n\nfunction _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }\n\nfunction _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }\n\nimport { interpolateRgb } from \"d3-interpolate\";\nimport { scaleLinear, scaleLog, scaleQuantize, scaleThreshold } from \"d3-scale\";\nexport var ColorSchemeGradient = /*#__PURE__*/function () {\n  function ColorSchemeGradient(startColor, endColor, options) {\n    _classCallCheck(this, ColorSchemeGradient);\n\n    this.startColor = startColor;\n    this.endColor = endColor;\n    this.type = \"linear\";\n    this.scale = interpolateRgb(startColor, endColor);\n\n    if (options) {\n      this.type = options.type;\n\n      switch (options.type) {\n        case \"linear\":\n          this.numberScale = scaleLinear().range([0, 1]).domain(options.domain).clamp(true);\n          break;\n\n        case \"log\":\n          this.numberScale = scaleLog().range([0, 1]).domain(options.domain).clamp(true);\n          if (options.base) this.numberScale.base(options.base);\n          break;\n\n        case \"threshold\":\n          var l1 = options.thresholds.length + +options.minDistinct + +options.maxDistinct;\n          var q1 = 1 / l1;\n          this.colors = Array.from(Array(l1 + 1)).map(function (_, i) {\n            return i * q1;\n          });\n          var bounds = [].concat(_toConsumableArray(options.minDistinct ? [options.domain[0] + Number.EPSILON] : []), _toConsumableArray(options.thresholds), _toConsumableArray(options.maxDistinct ? [options.domain[1] - Number.EPSILON] : []));\n          this.bounds = [options.domain[0]].concat(bounds).concat([options.domain[1]]);\n          this.numberScale = scaleThreshold().range(this.colors).domain(bounds);\n          break;\n\n        case \"quantize\":\n          var l2 = options.groups - 1;\n          var q2 = 1 / l2;\n          this.colors = Array.from(Array(l2 + 1)).map(function (_, i) {\n            return i * q2;\n          });\n          var range = options.domain[1] - options.domain[0];\n          this.bounds = this.colors.map(function (d) {\n            return options.domain[0] + d * range;\n          });\n          this.numberScale = scaleQuantize().range(this.colors).domain(options.domain);\n          break;\n      }\n    }\n  }\n\n  _createClass(ColorSchemeGradient, [{\n    key: \"get\",\n    value: function get(c) {\n      return this.scale(this.numberScale ? this.numberScale(c) : c);\n    }\n  }, {\n    key: \"legendData\",\n    value: function legendData() {\n      var _this = this;\n\n      var b = this.bounds;\n\n      switch (this.type) {\n        case \"linear\":\n        case \"log\":\n          return {};\n\n        case \"threshold\":\n        case \"quantize\":\n          return this.colors.map(function (d, i) {\n            return {\n              range: [b[i], b[i + 1]],\n              label: i === b.length - 1 ? \">=\".concat(b[i]) : \"[\".concat(b[i], \", \").concat(b[i + 1], \")\"),\n              fill: _this.scale(d)\n            };\n          });\n      }\n    }\n  }], [{\n    key: \"create\",\n    value: function create(s, e, options) {\n      return new ColorSchemeGradient(s, e, options);\n    }\n  }]);\n\n  return ColorSchemeGradient;\n}();","map":null,"metadata":{},"sourceType":"module"}