{"ast":null,"code":"import { getLinkColor, main } from \"./data\";\nexport var editorRef = {};\nexport var conf = {\n  min: 0.00,\n  treeDepth: 0,\n  level: 7,\n  nameOption: 2,\n  isRadical: false,\n  displayCircularTree: false,\n  distinctNodeOnly: false,\n  depthSelectOption: [{\n    value: \"0\",\n    text: \"Root\"\n  }, {\n    value: \"1\",\n    text: \"Kingdom\"\n  }, {\n    value: \"2\",\n    text: \"Phylum\"\n  }, {\n    value: \"3\",\n    text: \"Class\"\n  }, {\n    value: \"4\",\n    text: \"Order\"\n  } // { value: \"5\", text: \"Family\"},\n  // { value: \"6\", text: \"Genus\"},\n  ]\n};\nexport function editorConfig(v) {\n  conf.treeDepth = v.data.tree.dataOpt.treeDepth;\n  conf.displayCircularTree = v.data.tree.dataOpt.isRadical;\n  conf.isRadical = v.data.tree.dataOpt.isRadical;\n  conf.min = v.data.tree.dataOpt.min;\n  return {\n    sections: [{\n      id: \"settings\",\n      title: \"Settings\",\n      layout: \"single-page\",\n      view: {\n        type: \"list\",\n        items: [{\n          title: \"Classification Rank\",\n          type: \"select\",\n          ref: \"depthSelect\",\n          options: conf.depthSelectOption,\n          bind: {\n            object: conf,\n            path: \"treeDepth\",\n            callback: function callback() {\n              v.data.tree.dataOpt.treeDepth = parseInt(conf.treeDepth);\n              v.data.tree.library.color_dict = getLinkColor(v.data.tree.allNodes, v.data.tree.dataOpt.treeDepth);\n              v.run();\n            }\n          }\n        }, {\n          title: \"Leaves Level\",\n          type: \"select\",\n          ref: \"levelSelect\",\n          options: [{\n            value: \"1\",\n            text: \"Kingdom\"\n          }, {\n            value: \"2\",\n            text: \"Phylum\"\n          }, {\n            value: \"3\",\n            text: \"Class\"\n          }, {\n            value: \"4\",\n            text: \"Order\"\n          }, {\n            value: \"5\",\n            text: \"Family\"\n          }, {\n            value: \"6\",\n            text: \"Genus\"\n          }, {\n            value: \"7\",\n            text: \"Species\"\n          }],\n          bind: {\n            object: conf,\n            path: \"level\",\n            callback: function callback() {\n              v.data.tree.dataOpt.level = parseInt(conf.level);\n              editorRef.depthSelect.config.options = conf.depthSelectOption.slice(0, v.data.tree.dataOpt.level);\n\n              if (parseInt(conf.treeDepth) >= parseInt(conf.level)) {\n                editorRef.depthSelect.value = parseInt(conf.level) - 1;\n              }\n\n              v.data.tree.dataOpt.maxTextLength = 0;\n              v.data.tree = main(v.data.tree._data); // updateBranchZIndex(v);\n\n              if (v.data.tree.leaves.length < 20) {\n                v.data.tree.dataOpt.isRadical = conf.displayCircularTree;\n                editorRef.circularChecked.config.disabled = false;\n              } else {\n                v.data.tree.dataOpt.isRadical = true;\n                editorRef.circularChecked.value = true;\n                editorRef.circularChecked.config.disabled = true;\n              }\n\n              v.run();\n            }\n          }\n        }, {\n          title: \"Name Display\",\n          type: \"select\",\n          ref: \"showNameSelect\",\n          disabled: conf.distinctNodeOnly,\n          options: [{\n            value: \"1\",\n            text: \"Show All Name\"\n          }, {\n            value: \"2\",\n            text: \"Highlight Distinct Name\"\n          }, {\n            value: \"3\",\n            text: \"Show No Name\"\n          }],\n          bind: {\n            object: conf,\n            path: \"nameOption\",\n            callback: function callback() {\n              switch (parseInt(conf.nameOption)) {\n                case 1:\n                  v.data.tree.dataOpt.showAllNodeName = true;\n                  v.data.tree.dataOpt.showDistinctNodeName = false;\n                  break;\n\n                case 2:\n                  v.data.tree.dataOpt.showAllNodeName = true;\n                  v.data.tree.dataOpt.showDistinctNodeName = true;\n                  break;\n\n                case 3:\n                  v.data.tree.dataOpt.showAllNodeName = false;\n                  v.data.tree.dataOpt.showDistinctNodeName = false;\n                  break;\n              }\n\n              v.run();\n            }\n          }\n        }, {\n          title: \"Show Distinct Node Only\",\n          type: \"checkbox\",\n          ref: \"distinctNodeOnly\",\n          bind: {\n            object: conf,\n            path: \"distinctNodeOnly\",\n            callback: function callback() {\n              v.data.tree.dataOpt.distinctNodeOnly = conf.distinctNodeOnly;\n              v.data.tree = main(v.data.tree._data); // updateBranchZIndex(v);\n\n              if (conf.distinctNodeOnly) {\n                editorRef.showNameSelect.value = 2;\n                editorRef.showNameSelect.config.disabled = true;\n              } else {\n                editorRef.showNameSelect.value = 2;\n                editorRef.showNameSelect.config.disabled = false;\n              }\n\n              if (v.data.tree.leaves.length < 20) {\n                v.data.tree.dataOpt.isRadical = conf.displayCircularTree;\n                editorRef.circularChecked.config.disabled = false;\n              } else {\n                v.data.tree.dataOpt.isRadical = true;\n                editorRef.circularChecked.value = true;\n                editorRef.circularChecked.config.disabled = true;\n              }\n\n              v.run();\n            }\n          }\n        }, {\n          title: \"Display Radical Tree\",\n          type: \"checkbox\",\n          ref: \"circularChecked\",\n          disabled: conf.isRadical,\n          bind: {\n            object: conf,\n            path: \"displayCircularTree\",\n            callback: function callback() {\n              if (v.data.tree.leaves.length < 20) {\n                v.data.tree.dataOpt.isRadical = conf.displayCircularTree;\n              } else {\n                this.config.disabled = true;\n              }\n\n              v.run();\n            }\n          }\n        }, {\n          title: \"Q Value (0 - 0.5)\",\n          type: \"input\",\n          format: \"float\",\n\n          get value() {\n            return {\n              current: parseFloat(v.data.tree.dataOpt.maxQvalue),\n              callback: function callback(val) {\n                if (val < 0 || val > 0.5) {\n                  window.alert(\"Invalid value. The value should stay positive and not exceed 0.5.\");\n                  this.value = conf.min;\n                } else {\n                  v.data.tree.dataOpt.maxQvalue = val;\n                  v.data.tree = main(v.data.tree._data); // updateBranchZIndex(v);\n                }\n\n                v.run();\n              }\n            };\n          }\n\n        }]\n      }\n    }]\n  };\n}","map":{"version":3,"sources":["/Users/wangzhenyu/Desktop/fyp_workspace/meta_platform/app/javascript/viz/tree/editor.ts"],"names":["getLinkColor","main","editorRef","conf","min","treeDepth","level","nameOption","isRadical","displayCircularTree","distinctNodeOnly","depthSelectOption","value","text","editorConfig","v","data","tree","dataOpt","sections","id","title","layout","view","type","items","ref","options","bind","object","path","callback","parseInt","library","color_dict","allNodes","run","depthSelect","config","slice","maxTextLength","_data","leaves","length","circularChecked","disabled","showAllNodeName","showDistinctNodeName","showNameSelect","format","current","parseFloat","maxQvalue","val","window","alert"],"mappings":"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","sourcesContent":["import { EditorDef } from \"utils/editor\";\nimport { getLinkColor, main, updateBranchZIndex } from \"./data\";\n\nexport const editorRef: any = {};\n\nexport const conf = {\n    min: 0.00,\n    treeDepth: 0,\n    level: 7,\n    nameOption: 2,\n    isRadical: false,\n    displayCircularTree: false,\n    distinctNodeOnly: false,\n    depthSelectOption: [\n        { value: \"0\", text: \"Root\"},\n        { value: \"1\", text: \"Kingdom\"},\n        { value: \"2\", text: \"Phylum\"},\n        { value: \"3\", text: \"Class\"},\n        { value: \"4\", text: \"Order\"},\n        // { value: \"5\", text: \"Family\"},\n        // { value: \"6\", text: \"Genus\"},\n    ],\n} as any;\n\nexport function editorConfig(v: any): EditorDef {\n\n    conf.treeDepth = v.data.tree.dataOpt.treeDepth;\n    conf.displayCircularTree = v.data.tree.dataOpt.isRadical;\n    conf.isRadical = v.data.tree.dataOpt.isRadical;\n    conf.min = v.data.tree.dataOpt.min;\n\n    return {\n        sections: [\n            {\n                id: \"settings\",\n                title: \"Settings\",\n                layout: \"single-page\",\n                view: {\n                    type: \"list\",\n                    items: [\n                        {\n                            title: \"Classification Rank\",\n                            type: \"select\",\n                            ref: \"depthSelect\",\n                            options: conf.depthSelectOption,\n                            bind: {\n                                object: conf,\n                                path: \"treeDepth\",\n                                callback() {\n                                    v.data.tree.dataOpt.treeDepth = parseInt(conf.treeDepth);\n                                    v.data.tree.library.color_dict = getLinkColor(v.data.tree.allNodes, v.data.tree.dataOpt.treeDepth);\n                                    v.run();\n                                },\n                            },\n                        },\n                        {\n                            title: \"Leaves Level\",\n                            type: \"select\",\n                            ref: \"levelSelect\",\n                            options: [\n                                { value: \"1\", text: \"Kingdom\"},\n                                { value: \"2\", text: \"Phylum\"},\n                                { value: \"3\", text: \"Class\"},\n                                { value: \"4\", text: \"Order\"},\n                                { value: \"5\", text: \"Family\"},\n                                { value: \"6\", text: \"Genus\"},\n                                { value: \"7\", text: \"Species\"},\n                            ],\n                            bind: {\n                                object: conf,\n                                path: \"level\",\n                                callback() {\n                                    v.data.tree.dataOpt.level = parseInt(conf.level);\n\n                                    editorRef.depthSelect.config.options = conf.depthSelectOption.slice(0, v.data.tree.dataOpt.level);\n                                    if (parseInt(conf.treeDepth) >= parseInt(conf.level)) {\n                                        editorRef.depthSelect.value = parseInt(conf.level) - 1;\n                                    }\n\n                                    v.data.tree.dataOpt.maxTextLength = 0;\n                                    v.data.tree = main(v.data.tree._data);\n                                    // updateBranchZIndex(v);\n                                    if (v.data.tree.leaves.length < 20) {\n                                        v.data.tree.dataOpt.isRadical = conf.displayCircularTree;\n                                        editorRef.circularChecked.config.disabled = false;\n                                    } else {\n                                        v.data.tree.dataOpt.isRadical = true;\n                                        editorRef.circularChecked.value = true;\n                                        editorRef.circularChecked.config.disabled = true;\n                                    }\n\n                                    v.run();\n                                },\n                            },\n                        },\n                        {\n                            title: \"Name Display\",\n                            type: \"select\",\n                            ref: \"showNameSelect\",\n                            disabled: conf.distinctNodeOnly,\n                            options: [\n                                { value: \"1\", text: \"Show All Name\"},\n                                { value: \"2\", text: \"Highlight Distinct Name\"},\n                                { value: \"3\", text: \"Show No Name\"},\n                            ],\n                            bind: {\n                                object: conf,\n                                path: \"nameOption\",\n                                callback() {\n                                    switch (parseInt(conf.nameOption)) {\n                                        case 1:\n                                            v.data.tree.dataOpt.showAllNodeName = true;\n                                            v.data.tree.dataOpt.showDistinctNodeName = false;\n                                            break;\n                                        case 2:\n                                            v.data.tree.dataOpt.showAllNodeName = true;\n                                            v.data.tree.dataOpt.showDistinctNodeName = true;\n                                            break;\n                                        case 3:\n                                            v.data.tree.dataOpt.showAllNodeName = false;\n                                            v.data.tree.dataOpt.showDistinctNodeName = false;\n                                            break;\n                                    }\n                                    v.run();\n                                },\n                            },\n                        },\n                        {\n                            title: \"Show Distinct Node Only\",\n                            type: \"checkbox\",\n                            ref: \"distinctNodeOnly\",\n                            bind: {\n                                object: conf,\n                                path: \"distinctNodeOnly\",\n                                callback() {\n                                    v.data.tree.dataOpt.distinctNodeOnly = conf.distinctNodeOnly;\n                                    v.data.tree = main(v.data.tree._data);\n                                    // updateBranchZIndex(v);\n\n                                    if (conf.distinctNodeOnly) {\n                                        editorRef.showNameSelect.value = 2;\n                                        editorRef.showNameSelect.config.disabled = true;\n                                    } else {\n                                        editorRef.showNameSelect.value = 2;\n                                        editorRef.showNameSelect.config.disabled = false;\n                                    }\n\n                                    if (v.data.tree.leaves.length < 20) {\n                                        v.data.tree.dataOpt.isRadical = conf.displayCircularTree;\n                                        editorRef.circularChecked.config.disabled = false;\n                                    } else {\n                                        v.data.tree.dataOpt.isRadical = true;\n                                        editorRef.circularChecked.value = true;\n                                        editorRef.circularChecked.config.disabled = true;\n                                    }\n\n                                    v.run();\n                                },\n                            },\n                        },\n                        {\n                            title: \"Display Radical Tree\",\n                            type: \"checkbox\",\n                            ref: \"circularChecked\",\n                            disabled: conf.isRadical,\n                            bind: {\n                                object: conf,\n                                path: \"displayCircularTree\",\n                                callback() {\n                                    if (v.data.tree.leaves.length < 20) {\n                                        v.data.tree.dataOpt.isRadical = conf.displayCircularTree;\n                                    } else {\n                                        this.config.disabled = true;\n                                    }\n                                    v.run();\n                                },\n                            },\n                        },\n                        {\n                            title: `Q Value (0 - 0.5)`,\n                            type: \"input\",\n                            format: \"float\",\n                            get value() {\n                                return {\n                                    current: parseFloat(v.data.tree.dataOpt.maxQvalue),\n                                    callback(val) {\n                                        if (val < 0 || val > 0.5) {\n                                            window.alert\n                                            (`Invalid value. The value should stay positive and not exceed 0.5.`);\n                                            this.value = conf.min;\n                                        } else {\n                                            v.data.tree.dataOpt.maxQvalue = val;\n                                            v.data.tree = main(v.data.tree._data);\n                                            // updateBranchZIndex(v);\n                                        }\n                                        v.run();\n                                    },\n                                };\n                            },\n                        },\n                    ],\n                },\n            },\n        ],\n    };\n}\n"]},"metadata":{},"sourceType":"module"}