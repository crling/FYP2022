{"ast":null,"code":"var _dec, _dec2, _class, _class2, _descriptor, _temp;\n\nfunction _createForOfIteratorHelper(o, allowArrayLike) { var it; if (typeof Symbol === \"undefined\" || o[Symbol.iterator] == null) { if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === \"number\") { if (it) o = it; var i = 0; var F = function F() {}; return { s: F, n: function n() { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }, e: function e(_e) { throw _e; }, f: F }; } throw new TypeError(\"Invalid attempt to iterate non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\"); } var normalCompletion = true, didErr = false, err; return { s: function s() { it = o[Symbol.iterator](); }, n: function n() { var step = it.next(); normalCompletion = step.done; return step; }, e: function e(_e2) { didErr = true; err = _e2; }, f: function f() { try { if (!normalCompletion && it[\"return\"] != null) it[\"return\"](); } finally { if (didErr) throw err; } } }; }\n\nfunction _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === \"string\") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === \"Object\" && o.constructor) n = o.constructor.name; if (n === \"Map\" || n === \"Set\") return Array.from(o); if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }\n\nfunction _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nfunction _initializerDefineProperty(target, property, descriptor, context) { if (!descriptor) return; Object.defineProperty(target, property, { enumerable: descriptor.enumerable, configurable: descriptor.configurable, writable: descriptor.writable, value: descriptor.initializer ? descriptor.initializer.call(context) : void 0 }); }\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }\n\nfunction _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }\n\nfunction _inherits(subClass, superClass) { if (typeof superClass !== \"function\" && superClass !== null) { throw new TypeError(\"Super expression must either be null or a function\"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }\n\nfunction _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }\n\nfunction _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }\n\nfunction _possibleConstructorReturn(self, call) { if (call && (typeof call === \"object\" || typeof call === \"function\")) { return call; } return _assertThisInitialized(self); }\n\nfunction _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\"); } return self; }\n\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Date.prototype.toString.call(Reflect.construct(Date, [], function () {})); return true; } catch (e) { return false; } }\n\nfunction _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }\n\nfunction _applyDecoratedDescriptor(target, property, decorators, descriptor, context) { var desc = {}; Object.keys(descriptor).forEach(function (key) { desc[key] = descriptor[key]; }); desc.enumerable = !!desc.enumerable; desc.configurable = !!desc.configurable; if ('value' in desc || desc.initializer) { desc.writable = true; } desc = decorators.slice().reverse().reduce(function (desc, decorator) { return decorator(target, property, desc) || desc; }, desc); if (context && desc.initializer !== void 0) { desc.value = desc.initializer ? desc.initializer.call(context) : void 0; desc.initializer = undefined; } if (desc.initializer === void 0) { Object.defineProperty(target, property, desc); desc = null; } return desc; }\n\nfunction _initializerWarningHelper(descriptor, context) { throw new Error('Decorating class property failed. Please ensure that ' + 'proposal-class-properties is enabled and runs after the decorators transform.'); }\n\nimport * as randomstring from \"randomstring\";\nimport Vue from \"vue\";\nimport Component from \"vue-class-component\";\nimport { Prop } from \"vue-property-decorator\";\nimport DropdownSelect from \"./dropdown-select.vue\";\nimport axios from \"axios\";\nimport * as _ from \"lodash\";\nimport * as _filesize from \"filesize\";\n\nfunction axiosConfig() {\n  var multipart = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : false;\n  var config = {\n    headers: {\n      \"X-Requested-With\": \"XMLHttpRequest\",\n      \"X-CSRF-Token\": document.head.querySelector('meta[name=\"csrf-token\"]').content\n    }\n  };\n\n  if (multipart) {\n    config.headers[\"Content-Type\"] = \"'multipart/form-data'\";\n  }\n\n  return config;\n}\n\nvar SectionFiles = (_dec = Component({\n  name: \"section-files\",\n  components: {\n    DropdownSelect: DropdownSelect\n  }\n}), _dec2 = Prop({\n  \"default\": {}\n}), _dec(_class = (_class2 = (_temp = /*#__PURE__*/function (_Vue) {\n  _inherits(SectionFiles, _Vue);\n\n  var _super = _createSuper(SectionFiles);\n\n  function SectionFiles() {\n    var _this;\n\n    _classCallCheck(this, SectionFiles);\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    _this = _super.call.apply(_super, [this].concat(args));\n\n    _initializerDefineProperty(_this, \"data\", _descriptor, _assertThisInitialized(_this));\n\n    _this.config = {};\n    _this.ooo = {};\n    _this.fileKeys = [];\n    _this.filesForUpload = {};\n    _this.newFileNames = {};\n    _this.showNewFileNamePopup = false;\n    _this.uploadingFiles = false;\n    _this.filesToBeDeleted = [];\n    _this.filesChosen = {};\n    _this.applyingChosenFiles = false;\n    _this.newFileSetName = \"New file set\";\n    _this.fileSets = [];\n    _this.creatingNewFileSet = false;\n    _this.applyingFileSet = false;\n    _this.showSaveFileSetPopup = false;\n    _this.fmHasNoPendingChanges = true;\n    _this.fmApplyingChanges = false;\n    _this.uploadComponent = {};\n    _this._fileById = void 0;\n    _this._fileKeyByName = void 0;\n    _this._appliedFiles = void 0;\n    return _this;\n  }\n\n  _createClass(SectionFiles, [{\n    key: \"created\",\n    value: function created() {\n      this.refreshFileList();\n      this._fileById = {};\n      this._appliedFiles = {};\n      this._fileKeyByName = {};\n      if (!!this.data.config) this.config = this.data.config;\n    }\n  }, {\n    key: \"downloadURL\",\n    value: function downloadURL(file, output) {\n      return \"\".concat(window.gon.urls.create_file, \"/\").concat(file.id, \"?dl=1\").concat(output ? \"&output=\".concat(output) : \"\");\n    }\n  }, {\n    key: \"filesize\",\n    value: function filesize() {\n      return _filesize.apply(this, arguments);\n    }\n  }, {\n    key: \"parseDate\",\n    value: function parseDate(dateString) {\n      var pad = function pad(n) {\n        return \"0\".concat(n).slice(-2);\n      };\n\n      var date = new Date(dateString);\n      return \"\".concat(date.getFullYear(), \"-\").concat(date.getMonth() + 1, \"-\").concat(date.getDate(), \" \").concat(pad(date.getHours()), \":\").concat(pad(date.getMinutes()));\n    }\n  }, {\n    key: \"fileSelectOptions\",\n    value: function fileSelectOptions(key) {\n      var _this2 = this;\n\n      var allFiles = this.fileKeys.find(function (k) {\n        return k.dataType === key;\n      });\n\n      if (!allFiles) {\n        return [];\n      }\n\n      var result = allFiles.files.map(function (f) {\n        return {\n          value: f.id,\n          text: f.name,\n          secondaryText: _this2.parseDate(f.created_at)\n        };\n      });\n\n      if (allFiles.optional) {\n        result.push({\n          value: \"null\",\n          text: \"(None)\",\n          secondaryText: \"\"\n        });\n      }\n\n      return result;\n    }\n  }, {\n    key: \"willBeDeleted\",\n    value: function willBeDeleted(file) {\n      return _.includes(this.filesToBeDeleted, file.id);\n    }\n  }, {\n    key: \"markAsDeleted\",\n    value: function markAsDeleted(file) {\n      if (_.includes(this.filesToBeDeleted, file.id)) {\n        this.filesToBeDeleted = _.reject(this.filesToBeDeleted, function (x) {\n          return x === file.id;\n        });\n      } else {\n        this.filesToBeDeleted.push(file.id);\n      }\n\n      this.fmHasNoPendingChanges = this.filesToBeDeleted.length === 0;\n    }\n  }, {\n    key: \"tryUploadFiles\",\n    value: function tryUploadFiles() {\n      var _this3 = this;\n\n      this.newFileNames = {};\n\n      _.forOwn(this.filesForUpload, function (file, key) {\n        // debugger;\n        var filename = file.name;\n\n        if (_this3._fileKeyByName[key].files.some(function (f) {\n          return f.filename === filename;\n        })) {\n          var pos = filename.lastIndexOf(\".\");\n          var baseName = filename.substring(0, pos);\n          var ext = filename.substring(pos);\n          _this3.newFileNames[key] = \"\".concat(baseName, \"_\").concat(randomstring.generate(6));\n        }\n      });\n\n      if (Object.keys(this.newFileNames).length > 0) {\n        this.showNewFileNamePopup = true;\n      } else {\n        this.uploadFiles();\n      }\n    }\n  }, {\n    key: \"uploadFiles\",\n    value: function uploadFiles() {\n      var _this4 = this;\n\n      this.uploadingFiles = true;\n      this.showNewFileNamePopup = false;\n      var formData = new FormData();\n\n      _.forOwn(this.filesForUpload, function (file, key) {\n        formData.append(\"_f_\".concat(key), file);\n        formData.append(\"_fn_\".concat(key), _this4.newFileNames[key] ? _this4.newFileNames[key] + file.name.substring(file.name.lastIndexOf(\".\")) : file.name); // TODO what is keyConf?\n\n        var keyConf = _this4.config[key];\n\n        if (keyConf && keyConf.uploadComponent) {\n          var metadata = _this4.$refs[\"uploadComponent_\".concat(key)][0].metadata();\n\n          formData.append(\"_m_\".concat(key), JSON.stringify(metadata));\n        }\n      });\n\n      axios.post(window.gon.urls.create_file, formData, axiosConfig(true)).then(function (response) {\n        _this4.uploadingFiles = false;\n        _this4.filesForUpload = {};\n        _this4.newFileNames = {};\n\n        _this4.$refs.formFiles.forEach(function (ff) {\n          return ff.selectedFile = null;\n        });\n\n        _this4.refreshFileList();\n\n        _.forOwn(response.data.files, function (file, fkey) {\n          _this4.filesChosen[fkey] = file.id;\n        });\n\n        _this4.applyChosenFiles();\n      });\n    }\n  }, {\n    key: \"applyChosenFiles\",\n    value: function applyChosenFiles() {\n      var _this5 = this;\n\n      var isFileSet = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : false;\n      var fileSet = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;\n\n      // debugger;\n      if (isFileSet) {\n        fileSet.files.forEach(function (f) {\n          var file = _this5._fileById[f.id];\n          _this5.filesChosen[file.file_key] = f.id;\n        });\n        this.applyingFileSet = true;\n      } else {\n        this.applyingChosenFiles = true;\n      }\n\n      var data = {};\n\n      _.forOwn(this.filesChosen, function (fid, fkey) {\n        return data[\"_f_\".concat(fkey)] = fid;\n      });\n\n      axios.post(window.gon.urls.chosen_files, data, axiosConfig()).then(function (response) {\n        // the post api call is to update chosen data list, n\n        // ot directly returned\n        if (response.data.status === \"ok\") {\n          _this5.refreshFileList();\n        } else {\n          window.alert(response.data.error);\n        }\n      })[\"catch\"](function (reason) {\n        window.alert(reason);\n      }).then(function () {\n        // if (isFileSet) {\n        //     this.applyingFileSet = false;\n        //     (this.$refs.fsModal as any).hide();\n        // } else {\n        //     this.applyingChosenFiles = false;\n        // }\n        _this5.applyingChosenFiles = false;\n        location.reload();\n      });\n    }\n  }, {\n    key: \"resetChosenFiles\",\n    value: function resetChosenFiles() {\n      this.filesChosen = _.clone(this._appliedFiles);\n    }\n  }, {\n    key: \"createFileSet\",\n    value: function createFileSet() {\n      var _this6 = this;\n\n      var data = {\n        name: this.newFileSetName,\n        file_ids: _.values(this.filesChosen)\n      };\n      axios.post(window.gon.urls.file_sets, data, axiosConfig()).then(function (response) {\n        if (response.data.status === \"ok\") {\n          _this6.refreshFileList();\n        } else {\n          window.alert(response.data.error);\n        }\n      })[\"catch\"](function (reason) {\n        window.alert(reason);\n      }).then(function () {\n        _this6.creatingNewFileSet = false;\n        _this6.showSaveFileSetPopup = false;\n      });\n    }\n  }, {\n    key: \"deleteFileSet\",\n    value: function deleteFileSet(setId) {\n      var _this7 = this;\n\n      if (!window.confirm(\"Are you sure?\")) {\n        return;\n      }\n\n      axios[\"delete\"](window.gon.urls.delete_file_set.replace(\"_id_\", setId), axiosConfig()).then(function (response) {\n        _this7.refreshFileList();\n      })[\"catch\"](function (reason) {\n        window.alert(reason);\n      });\n    }\n  }, {\n    key: \"fmApplyChanges\",\n    value: function fmApplyChanges() {\n      var _this8 = this;\n\n      // debugger;\n      this.fmApplyingChanges = true;\n      var chosenSet = new Set(Object.values(this.filesChosen));\n      var deletedChosenFile = this.filesToBeDeleted.some(function (f) {\n        return chosenSet.has(f);\n      });\n      axios.post(window.gon.urls.batch_delete_files, {\n        file_ids: this.filesToBeDeleted\n      }, axiosConfig()).then(function (response) {\n        _this8.fmApplyingChanges = false;\n\n        _this8.$refs.fmModal.hide();\n\n        _this8.refreshFileList();\n\n        if (deletedChosenFile) {\n          location.reload();\n        }\n      })[\"catch\"](function (reason) {\n        window.alert(reason);\n        _this8.fmApplyingChanges = false;\n      });\n    }\n  }, {\n    key: \"refreshFileList\",\n    value: function refreshFileList() {\n      var _this9 = this;\n\n      var fileSetsContaining = function fileSetsContaining(file, sets) {\n        return sets.filter(function (fs) {\n          return _.includes(fs.files.map(function (x) {\n            return x.id;\n          }), file.id);\n        }).map(function (fs) {\n          return fs.name;\n        });\n      };\n\n      axios.all([axios.get(window.gon.urls.all_files), axios.get(window.gon.urls.chosen_files)]).then(axios.spread(function (allFilesData, chosen) {\n        var allFiles = allFilesData.data;\n        _this9.fileKeys = [];\n        allFiles.forEach(function (f) {\n          var fk = {\n            fileIndex: f.id,\n            fileName: f.name,\n            dataType: f.dataType,\n            optional: f.optional,\n            multiple: f.multiple,\n            files: f.files\n          };\n\n          _this9.fileKeys.push(fk);\n        });\n        _this9._fileKeyByName = _.keyBy(_this9.fileKeys, \"dataType\");\n        _this9._fileById = {};\n        allFiles.forEach(function (fkey) {\n          fkey.files.forEach(function (f) {\n            _this9._fileById[f.id] = _objectSpread(_objectSpread({}, f), {}, {\n              file_key: fkey.dataType // description: fkey.desc,\n              // belongs_to_sets: fileSetsContaining(f, fileSets),\n\n            });\n          });\n        });\n        var chosenFiles = chosen.data;\n        _this9._appliedFiles = chosenFiles.chosen;\n\n        _this9.resetChosenFiles();\n\n        var needsUpload = false;\n\n        if (!chosenFiles.use_demo) {\n          var _iterator = _createForOfIteratorHelper(allFiles),\n              _step;\n\n          try {\n            for (_iterator.s(); !(_step = _iterator.n()).done;) {\n              var f = _step.value;\n              if (f.optional) continue; // debugger;\n\n              if (f.files.length === 0) {\n                needsUpload = {\n                  noData: true\n                };\n                break;\n              } else {\n                var chosenFileId = _this9.filesChosen[f.data_type];\n\n                if (chosen === null) {\n                  needsUpload = {\n                    noSelectedData: true\n                  };\n                  break;\n                }\n\n                var file = _this9._fileById[chosenFileId]; // const status = file.status;\n                // if (status === \"running\") {\n                //     needsUpload = { taskRunning: true };\n                // } else if (status === \"error\") {\n                //     needsUpload = { taskError: true, jobid: file.jobid };\n                // }\n              }\n            }\n          } catch (err) {\n            _iterator.e(err);\n          } finally {\n            _iterator.f();\n          }\n        }\n\n        _this9.$root.$emit(\"file_loaded\", needsUpload);\n      }));\n    }\n  }, {\n    key: \"requiredFilesChosen\",\n    get: function get() {\n      var _this10 = this;\n\n      return _.omitBy(this.filesChosen, function (v, k) {\n        _this10._fileKeyByName[k].optional;\n      });\n    }\n  }, {\n    key: \"cannotUpload\",\n    get: function get() {\n      var _this11 = this;\n\n      // enable when at least one file exists.\n      return this.uploadingFiles || !Object.keys(this.filesForUpload).reduce(function (a, c) {\n        return a || !!_this11.filesForUpload[c];\n      }, false);\n    }\n  }, {\n    key: \"cannotApplyChosenFiles\",\n    get: function get() {\n      var _this12 = this;\n\n      var files = this.requiredFilesChosen; // all file input should has value\n      // and is different from currently applied files\n\n      return _.includes(_.values(files), null) || _.reduce(this.filesChosen, function (r, v, k) {\n        return r && v === _this12._appliedFiles[k];\n      }, true);\n    }\n  }, {\n    key: \"cannotCreateFileSet\",\n    get: function get() {\n      var files = this.requiredFilesChosen;\n\n      if (_.includes(_.values(files), null)) {\n        return true;\n      } // cannot create file set if there's already a same one.\n\n\n      var isSameArray = function isSameArray(superset, subset) {\n        return _.difference(subset, superset).length === 0;\n      };\n\n      return !!_.find(this.fileSets, function (fs) {\n        return isSameArray(fs.files.map(function (f) {\n          return f.id;\n        }), _.values(files));\n      });\n    }\n  }, {\n    key: \"validChosenFiles\",\n    get: function get() {\n      var _this13 = this;\n\n      return Object.values(this.filesChosen).filter(function (fid) {\n        return fid >= 0 && _this13._fileById[fid];\n      });\n    }\n  }]);\n\n  return SectionFiles;\n}(Vue), _temp), (_descriptor = _applyDecoratedDescriptor(_class2.prototype, \"data\", [_dec2], {\n  configurable: true,\n  enumerable: true,\n  writable: true,\n  initializer: null\n})), _class2)) || _class);\nexport { SectionFiles as default };","map":{"version":3,"sources":["section-files.vue"],"names":[],"mappings":"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","sourcesContent":["<template>\n    <div>\n        <!-- File modal -->\n\n        \n        <b-modal size=\"lg\" id=\"fmModal\" ref=\"fmModal\" title=\"Manage Files\">\n            <b-container fluid>\n                <template v-for=\"key in fileKeys\">\n                    <b-card no-body :key=\"key.fileIndex\" class=\"mt-2 mb-2\">\n                        <b-card-header header-tag=\"header\" role=\"tab\">\n                            <b-link\n                                v-b-toggle=\"`collapse-manageFile-${key.fileIndex}`\"\n                            >{{ key.fileName }}</b-link>\n                        </b-card-header>\n                        <b-collapse visible :id=\"`collapse-manageFile-${key.fileIndex}`\">\n                            <b-card-body v-if=\"key.files.length === 0\">\n                                <p class=\"card-text\">No available files.</p>\n                            </b-card-body>\n                            <b-list-group flush v-else>\n                                <b-list-group-item\n                                    v-for=\"file in key.files\"\n                                    :key=\"file.id\"\n                                    :variant=\"willBeDeleted(file) ? 'danger' : ''\"\n                                >\n                                \n                                    <div>\n                                        <div>\n                                            <i class=\"fa fa-file-excel\" v-if=\"willBeDeleted(file)\"></i>\n                                            <i class=\"fa fa-file\" v-else></i>\n                                            {{ file.name }}\n                                            <span\n                                                class=\"badge badge-success\"\n                                            >Processed</span>\n                                            <!--\n                                            <span\n                                                class=\"ml-1 small text-muted\"\n                                            >{{ filesize(file.size) }}</span>\n                                            -->\n                                        </div>\n                                        \n                                        <div\n                                            class=\"d-flex justify-content-between align-items-end action-container\"\n                                                >\n                                            <div style=\"padding-left:1.25rem\">\n                                                <div>\n                                                    <span\n                                                        class=\"text-muted small\"\n                                                    >Uploaded at {{ parseDate(file.created_at) }}</span>\n                                                </div>\n                                                <!--\n                                                <div v-if=\"file.assoc.length\">\n                                                    <span class=\"small\">Processed files:</span>\n                                                    <a\n                                                        v-for=\"k in file.assoc\"\n                                                        :key=\"k\"\n                                                        :href=\"downloadURL(file, k)\"\n                                                        class=\"assoc-link\"\n                                                        target=\"_blank\"\n                                                    >\n                                                        <i class=\"fas fa-link\"></i>\n                                                        {{ k }}\n                                                    </a>\n                                                </div>\n                                                -->\n                                            </div>\n                                            <div class=\"d-flex\">\n                                                <b-link\n                                                    :href=\"downloadURL(file)\"\n                                                    target=\"_blank\"\n                                                    class=\"action-btn left\"\n                                                >\n                                                    <i class=\"fa fa-download\"></i>Download\n                                                </b-link>\n                                                <template>\n                                                    <b-link\n                                                        class=\"action-btn right\"\n                                                        @click=\"markAsDeleted(file)\"\n                                                    >\n                                                        <i class=\"fa fa-trash\"></i>\n                                                        {{ willBeDeleted(file) ? \"Cancel Mark\" : \"Mark as Deleted\" }}\n                                                    </b-link>\n                                                </template>\n                                            </div>\n                                        </div>\n                                        \n                                    </div>\n                                \n                              <!--      <div class=\"mt-1\" v-if=\"Object.keys(file.metadata).length\">\n                                        Metadata:\n                                        <code>{{ JSON.stringify(file.metadata) }}</code>\n                                    </div> -->\n                                </b-list-group-item>\n                            </b-list-group>\n                        </b-collapse>\n                    </b-card>\n                </template>\n            </b-container>\n            <div slot=\"modal-footer\" class=\"w-100\">\n                <b-btn\n                    :disabled=\"fmHasNoPendingChanges\"\n                    class=\"float-right\"\n                    variant=\"primary\"\n                    @click=\"fmApplyChanges\"\n                >\n                    <i class=\"fa fa-circle-notch fa-spin\" v-if=\"fmApplyingChanges\"></i>\n                    <i class=\"fa fa-check\" v-else></i>\n                    Apply Changes\n                </b-btn>\n            </div>\n        </b-modal>\n        \n        <!-- File set modal -->\n        <!--\n        <b-modal hide-footer size=\"lg\" id=\"fsModal\" ref=\"fsModal\" title=\"Manage File Sets\">\n            <b-container fluid>\n                <div v-if=\"!fileSets.length\">No file set.</div>\n                <template v-for=\"set in fileSets\">\n                    <b-card no-body :key=\"set.id\" class=\"mt-2 mb-2\">\n                        <b-card-header\n                            header-tag=\"header\"\n                            role=\"tab\"\n                            class=\"d-flex justify-content-between\"\n                        >\n                            <div>\n                                <b-link v-b-toggle=\"`collapse-manageFile-${set.id}`\">\n                                    <i class=\"fa fa-copy\"></i>\n                                    {{ set.name }}\n                                </b-link>\n                            </div>\n                            <div>\n                                <b-link class=\"mr-2\" @click=\"applyChosenFiles(true, set)\">\n                                    <i class=\"fa fa-check\"></i>Apply\n                                </b-link>\n                                <b-link variant=\"danger\" @click=\"deleteFileSet(set.id)\">\n                                    <i class=\"fa fa-trash\"></i>Delete\n                                </b-link>\n                            </div>\n                        </b-card-header>\n                        <b-collapse visible :id=\"`collapse-manageFile-${set.id}`\">\n                            <b-list-group flush>\n                                <b-list-group-item\n                                    v-for=\"file in set.files\"\n                                    :key=\"file.id\"\n                                    class=\"d-flex justify-content-between\"\n                                >\n                                    <div>\n                                        <i class=\"fa fa-file\"></i>\n                                        <b-badge\n                                            variant=\"primary\"\n                                        >{{ _fileById[file.id].description }}</b-badge>\n                                        {{ _fileById[file.id].filename }}\n                                        <span\n                                            class=\"ml-1 text-muted\"\n                                        >{{ filesize(_fileById[file.id].size) }}</span>\n                                    </div>\n                                    <div>\n                                        <span\n                                            class=\"mr-1 text-muted\"\n                                        >Uploaded at {{ parseDate(_fileById[file.id].created_at) }}</span>\n                                    </div>\n                                </b-list-group-item>\n                            </b-list-group>\n                        </b-collapse>\n                    </b-card>\n                </template>\n            </b-container>\n        </b-modal>\n        -->\n\n\n        <b-popover\n            id=\"renamePopover\"\n            target=\"uploadBtn\"\n            placement=\"left\"\n            boundary=\"viewport\"\n            disabled\n            :show.sync=\"showNewFileNamePopup\"\n            title=\"Duplicated file name\"\n        >\n            <div\n                class=\"mb-2\"\n            >It's not recomended to re-upload a file with duplicated name. We have generated a new filename for you, or you can enter another filename.</div>\n            <div v-for=\"(name, key) in newFileNames\" :key=\"key\">\n                {{ filesForUpload[key].name }}:\n                <b-form-input size=\"sm\" v-model=\"newFileNames[key]\" class=\"mb-2\" />\n            </div>\n            <b-btn block size=\"sm\" variant=\"primary\" @click=\"uploadFiles\">Continue</b-btn>\n        </b-popover>\n        <b-card-body>\n            <b-btn block size=\"sm\" v-b-modal.fmModal>\n                <i class=\"fa fa-sliders-h\"></i>Manage Files\n            </b-btn>\n        </b-card-body>\n        <b-tabs card no-fade>\n            <b-tab title=\"Upload\" active>\n                <template v-for=\"key in fileKeys\">\n                    <div :key=\"key.dataType + '-desc'\" class=\"mb-1\">\n                        {{ key.fileName }}:\n                        <span\n                            v-if=\"key.optional\"\n                            class=\"text-muted\"\n                        >(Optional)</span>\n                    </div>\n                    <b-form-file\n                        :key=\"key.dataType + '-finput'\"\n                        ref=\"formFiles\"\n                        class=\"mb-2\"\n                        v-model=\"filesForUpload[key.dataType]\"\n                        :state=\"Boolean(filesForUpload[key.dataType])\"\n                        placeholder=\"Choose a file...\"\n                    />\n                    <component\n                        :key=\"key.dataType\"\n                        :ref=\"`uploadComponent_${key.dataType}`\"\n                        v-if=\"config[key.dataType] && config[key.dataType].uploadComponent\"\n                        :is=\"config[key.dataType].uploadComponent\"\n                    />\n                </template>\n                <b-btn\n                    id=\"uploadBtn\"\n                    block\n                    size=\"sm\"\n                    variant=\"primary\"\n                    :disabled=\"cannotUpload\"\n                    @click=\"tryUploadFiles\"\n                >\n                    <i class=\"fa fa-circle-notch fa-spin\" v-if=\"uploadingFiles\"></i>\n                    <i class=\"fa fa-upload\" v-else></i>\n                    Upload\n                </b-btn>\n            </b-tab>\n            <b-tab title=\"Choose\">\n                <template v-for=\"key in fileKeys\">\n                    <div :key=\"key.dataType + '-desc'\" class=\"mb-1\">\n                        {{ key.fileName }}:\n                        <span\n                            v-if=\"key.optional\"\n                            class=\"text-muted\"\n                        >(Optional)</span>\n                    </div>\n                    <dropdown-select\n                        :key=\"key.dataType + '-fselect'\"\n                        right\n                        v-model=\"filesChosen[key.dataType]\"\n                        :options=\"fileSelectOptions(key.dataType)\"\n                        size=\"sm\"\n                        class=\"mb-2 sel-file btn-block\"\n                    />\n                </template>\n                <div class=\"row m-0 no-gutters\">\n                    <div class=\"col-4\">\n                        <b-btn size=\"sm\" @click=\"resetChosenFiles\">\n                            <i class=\"fa fa-redo\"></i>Reset\n                        </b-btn>\n                    </div>\n                    <div class=\"col-8\">\n                        <b-btn\n                            block\n                            size=\"sm\"\n                            variant=\"primary\"\n                            :disabled=\"cannotApplyChosenFiles\"\n                            @click=\"applyChosenFiles(false)\"\n                        >\n                            <i class=\"fa fa-circle-notch fa-spin\" v-if=\"applyingChosenFiles\"></i>\n                            <i class=\"fa fa-check\" v-else></i>\n                            Apply\n                        </b-btn>\n                    </div>\n                </div>\n            </b-tab>\n\n    <!--            \n            <b-tab title=\"File Sets\">\n                <b-btn\n                    block\n                    size=\"sm\"\n                    id=\"saveCurrentFileAsSet\"\n                    :disabled=\"cannotCreateFileSet\"\n                    class=\"mb-1\"\n                >Save current files as file set</b-btn>\n                <b-popover\n                    target=\"saveCurrentFileAsSet\"\n                    :container=\"null\"\n                    boundary=\"window\"\n                    placement=\"left\"\n                    title=\"New File Set\"\n                    triggers=\"click\"\n                    :show.sync=\"showSaveFileSetPopup\"\n                >\n                    <div class=\"mb-1\">Please enter a name for the new file set:</div>\n                    <b-form-input size=\"sm\" v-model=\"newFileSetName\" class=\"mb-2\" />\n                    <b-btn block size=\"sm\" variant=\"primary\" @click=\"createFileSet\">\n                        <i class=\"fa fa-circle-notch fa-spin\" v-if=\"creatingNewFileSet\"></i>\n                        <i class=\"fa fa-check\" v-else></i>\n                        Save\n                    </b-btn>\n                </b-popover>\n                <small\n                    class=\"text-muted form-text mb-2\"\n                    v-if=\"cannotCreateFileSet\"\n                >You haven't chosen some required files, or there is already such a file set.</small>\n                <small class=\"text-muted form-text mb-2\" v-else>\n                    This will save current applied files as a new fileset:\n                    <div v-for=\"fid in validChosenFiles\" :key=\"fid\">- {{ _fileById[fid].filename }}</div>\n                </small>\n                <b-btn block size=\"sm\" class=\"mb-1\" v-b-modal.fsModal>Apply or Manage file sets</b-btn>\n                <small class=\"text-muted form-text\">Apply an existing file set, or manage them.</small>\n            </b-tab>\n    -->\n        </b-tabs>\n        <div class=\"px-2 py-1 text-muted small\">\n            We will not access your files without permission from you. Your file will be deleted entirely if you have been inactive for 24 hours.\n            <a\n                href=\"/privacy-policy\"\n                target=\"_blank\"\n            >Privacy Policy</a>\n        </div>\n    </div>\n</template>\n\n<script lang=\"ts\">\nimport * as randomstring from \"randomstring\";\nimport Vue from \"vue\";\nimport Component from \"vue-class-component\";\nimport { Prop } from \"vue-property-decorator\";\n\nimport DropdownSelect from \"./dropdown-select.vue\";\n\nimport axios from \"axios\";\nimport * as _ from \"lodash\";\n\nimport * as filesize from \"filesize\";\n\nfunction axiosConfig(multipart: boolean = false) {\n    const config = {\n        headers: {\n            \"X-Requested-With\": \"XMLHttpRequest\",\n            \"X-CSRF-Token\": document.head.querySelector<HTMLMetaElement>('meta[name=\"csrf-token\"]').content,\n        },\n    };\n    if (multipart) {\n        config.headers[\"Content-Type\"] = \"'multipart/form-data'\";\n    }\n    return config;\n}\n\ninterface FileInfo {\n    filename: string;\n    file_key?: string;\n    description?: string;\n    belongs_to_sets?: string[];\n    id: number;\n    url: string;\n    size: number;\n    created_at: string;\n    status: string;\n    jobid: number;\n    genome_ref?: string;\n    metadata: { [key: string]: string };\n}\n\n// interface FileKey {\n//     name: string;\n//     description: string;\n//     optional: boolean;\n//     multiple: boolean;\n//     files: FileInfo[];\n// }\n\ninterface FileKey {\n    fileIndex: Integer;\n    fileName: string;\n    dataType: string;\n    optional: boolean;\n    multiple: boolean;\n    files: FileInfo[];\n}\n\ninterface FileSet {\n    id: number;\n    name: string;\n    files: Array<{ id: number }>;\n}\n\n@Component({\n    name: \"section-files\",\n    components: { DropdownSelect },\n})\n\nexport default class SectionFiles extends Vue {\n    @Prop({ default: {}}) public data: {};\n\n    private config = {};\n    public ooo = {};\n    public fileKeys: FileKey[] = [];\n    public filesForUpload: Record<string, File> = {};\n    public newFileNames: Record<string, string> = {};\n    public showNewFileNamePopup = false;\n    public uploadingFiles = false;\n    public filesToBeDeleted: number[] = [];\n    public filesChosen: Record<string, number> = {};\n    public applyingChosenFiles = false;\n    public newFileSetName = \"New file set\";\n    public fileSets: FileSet[] = [];\n    public creatingNewFileSet = false;\n    public applyingFileSet = false;\n    public showSaveFileSetPopup = false;\n    public fmHasNoPendingChanges = true;\n    public fmApplyingChanges = false;\n\n    public uploadComponent = {};\n\n    private _fileById: { [key: number]: FileInfo };\n    private _fileKeyByName: { [key: string]: FileKey };\n    private _appliedFiles: { [key: string]: number };\n\n    public created() {\n        this.refreshFileList();\n        this._fileById = {};\n        this._appliedFiles = {};\n        this._fileKeyByName = {};\n        if (!!this.data.config) this.config = this.data.config;\n    }\n\n    get requiredFilesChosen() {\n        return _.omitBy(this.filesChosen, (v, k) => {           \n            this._fileKeyByName[k].optional\n        });\n    }\n\n    get cannotUpload() {\n        // enable when at least one file exists.\n        return this.uploadingFiles || !Object.keys(this.filesForUpload).reduce((a, c) => a || !!this.filesForUpload[c], false);\n    }\n\n    get cannotApplyChosenFiles() {\n        const files = this.requiredFilesChosen;\n\n        // all file input should has value\n        // and is different from currently applied files\n        return _.includes(_.values(files), null) || _.reduce(this.filesChosen, (r, v, k) => r && v === this._appliedFiles[k], true);\n    }\n\n    get cannotCreateFileSet() {\n        const files = this.requiredFilesChosen;\n        if (_.includes(_.values(files), null)) {\n            return true;\n        }\n        // cannot create file set if there's already a same one.\n        const isSameArray = (superset, subset) => _.difference(subset, superset).length === 0;\n        return !!_.find(this.fileSets, fs =>\n            isSameArray(\n                fs.files.map(f => f.id),\n                _.values(files),\n            ),\n        );\n    }\n\n    get validChosenFiles() {\n        return Object.values(this.filesChosen).filter(fid => fid >= 0 && this._fileById[fid]);\n    }\n\n    public downloadURL(file: FileInfo, output?: string) {\n        return `${window.gon.urls.create_file}/${file.id}?dl=1${output ? `&output=${output}` : \"\"}`;\n    }\n\n    public filesize(): string {\n        return filesize.apply(this, arguments);\n    }\n\n    public parseDate(dateString): string {\n        const pad = n => `0${n}`.slice(-2);\n        const date = new Date(dateString);\n        return `${date.getFullYear()}-${date.getMonth() + 1}-${date.getDate()} ${pad(date.getHours())}:${pad(date.getMinutes())}`;\n    }\n\n    public fileSelectOptions(key) {\n        const allFiles = this.fileKeys.find(k => k.dataType === key);\n        if (!allFiles) {\n            return [];\n        }\n        const result = allFiles.files\n            .map(f => ({\n                value: f.id,\n                text: f.name,\n                secondaryText: this.parseDate(f.created_at),\n            }));\n\n        if (allFiles.optional) {\n            result.push({\n                value: \"null\" as any,\n                text: \"(None)\",\n                secondaryText: \"\",\n            });\n        }\n        return result;\n    }\n\n    public willBeDeleted(file) {\n        return _.includes(this.filesToBeDeleted, file.id);\n    }\n\n    public markAsDeleted(file) {\n        if (_.includes(this.filesToBeDeleted, file.id)) {\n            this.filesToBeDeleted = _.reject(this.filesToBeDeleted, x => x === file.id);\n        } else {\n            this.filesToBeDeleted.push(file.id);\n        }\n        this.fmHasNoPendingChanges = this.filesToBeDeleted.length === 0;\n    }\n\n    public tryUploadFiles() {\n        \n        this.newFileNames = {};\n        _.forOwn(this.filesForUpload, (file, key) => {\n            // debugger;\n            const filename = file.name;\n            if (this._fileKeyByName[key].files.some(f => f.filename === filename)) {\n                const pos = filename.lastIndexOf(\".\");\n                const baseName = filename.substring(0, pos);\n                const ext = filename.substring(pos);\n                this.newFileNames[key] = `${baseName}_${randomstring.generate(6)}`;\n            }\n        });\n        if (Object.keys(this.newFileNames).length > 0) {\n            this.showNewFileNamePopup = true;\n        } else {\n            this.uploadFiles();\n        }\n    }\n\n    public uploadFiles() {\n        this.uploadingFiles = true;\n        this.showNewFileNamePopup = false;\n        const formData: FormData = new FormData();\n        _.forOwn(this.filesForUpload, (file, key) => {\n            formData.append(`_f_${key}`, file);\n            formData.append(`_fn_${key}`, this.newFileNames[key] ? this.newFileNames[key] + file.name.substring(file.name.lastIndexOf(\".\")) : file.name);\n            \n            // TODO what is keyConf?\n            const keyConf = (this.config as any)[key];\n            \n            if (keyConf && keyConf.uploadComponent) {\n                const metadata = (this.$refs[`uploadComponent_${key}`][0] as any).metadata();\n                formData.append(`_m_${key}`, JSON.stringify(metadata));\n            }\n        });\n        axios.post(window.gon.urls.create_file, formData, axiosConfig(true)).then(response => {\n            this.uploadingFiles = false;\n            this.filesForUpload = {};\n            this.newFileNames = {};\n            (this.$refs.formFiles as any[]).forEach(ff => (ff.selectedFile = null));\n            \n            this.refreshFileList();\n            _.forOwn(response.data.files, (file, fkey) => {\n                this.filesChosen[fkey] = file.id;\n            });\n            this.applyChosenFiles();\n        });\n    }\n\n    public applyChosenFiles(isFileSet: boolean = false, fileSet = null) {\n        // debugger;\n        if (isFileSet) {\n            fileSet.files.forEach(f => {\n                const file = this._fileById[f.id];\n                this.filesChosen[file.file_key] = f.id;\n            });\n            this.applyingFileSet = true;\n        } else {\n            this.applyingChosenFiles = true;\n        }\n        const data = {};\n        _.forOwn(this.filesChosen, (fid, fkey) => data[`_f_${fkey}`] = fid);\n        \n        axios\n            .post(window.gon.urls.chosen_files, data, axiosConfig())\n            .then(response => { // the post api call is to update chosen data list, n\n            // ot directly returned\n                if (response.data.status === \"ok\") {\n                    this.refreshFileList();\n                } else {\n                    window.alert(response.data.error);\n                }\n            })\n            .catch(reason => {\n                window.alert(reason);\n            })\n            .then(() => {\n                // if (isFileSet) {\n                //     this.applyingFileSet = false;\n                //     (this.$refs.fsModal as any).hide();\n                // } else {\n                //     this.applyingChosenFiles = false;\n                // }\n                this.applyingChosenFiles = false;\n                location.reload();\n            });\n    }\n\n    public resetChosenFiles() {\n        this.filesChosen = _.clone(this._appliedFiles);\n    }\n\n    public createFileSet() {\n        const data = {\n            name: this.newFileSetName,\n            file_ids: _.values(this.filesChosen),\n        };\n        axios\n            .post(window.gon.urls.file_sets, data, axiosConfig())\n            .then(response => {\n                if (response.data.status === \"ok\") {\n                    this.refreshFileList();\n                } else {\n                    window.alert(response.data.error);\n                }\n            })\n            .catch(reason => {\n                window.alert(reason);\n            })\n            .then(() => {\n                this.creatingNewFileSet = false;\n                this.showSaveFileSetPopup = false;\n            });\n    }\n\n    public deleteFileSet(setId) {\n        if (!window.confirm(\"Are you sure?\")) {\n            return;\n        }\n        axios\n            .delete(window.gon.urls.delete_file_set.replace(\"_id_\", setId), axiosConfig())\n            .then(response => {\n                this.refreshFileList();\n            })\n            .catch(reason => {\n                window.alert(reason);\n            });\n    }\n\n    public fmApplyChanges() {\n        // debugger;\n        this.fmApplyingChanges = true;\n        const chosenSet = new Set(Object.values(this.filesChosen));\n        const deletedChosenFile = this.filesToBeDeleted.some(f => chosenSet.has(f));\n        axios\n            .post(window.gon.urls.batch_delete_files, { file_ids: this.filesToBeDeleted }, axiosConfig())\n            .then(response => {\n                this.fmApplyingChanges = false;\n                (this.$refs.fmModal as any).hide();\n                this.refreshFileList();\n                if (deletedChosenFile) {\n                    location.reload();\n                }\n            })\n            .catch(reason => {\n                window.alert(reason);\n                this.fmApplyingChanges = false;\n            });\n    }\n\n    public refreshFileList() {\n        const fileSetsContaining = (file: FileInfo, sets: FileSet[]): string[] => {\n            return sets\n                .filter(fs =>\n                    _.includes(\n                        fs.files.map(x => x.id),\n                        file.id,\n                    ),\n                )\n                .map(fs => fs.name);\n        };\n\n        axios.all([axios.get(window.gon.urls.all_files), axios.get(window.gon.urls.chosen_files)]).then(\n            axios.spread((allFilesData, chosen) => {\n                const allFiles = allFilesData.data;\n                this.fileKeys = []\n                allFiles.forEach(f => {\n                    const fk: FileKey = {\n                        fileIndex: f.id,\n                        fileName: f.name,\n                        dataType: f.dataType,\n                        optional: f.optional,\n                        multiple: f.multiple,\n                        files: f.files,\n                    };\n                    this.fileKeys.push(fk);\n                })\n\n                this._fileKeyByName = _.keyBy(this.fileKeys, \"dataType\");\n                \n                this._fileById = {};\n                allFiles.forEach(fkey => {\n                    fkey.files.forEach(f => {\n                        this._fileById[f.id] = {\n                            ...f,\n                            file_key: fkey.dataType,\n                            // description: fkey.desc,\n                            // belongs_to_sets: fileSetsContaining(f, fileSets),\n                        };\n                    });\n                });\n                \n                const chosenFiles = chosen.data;\n                \n                this._appliedFiles = chosenFiles.chosen;\n                this.resetChosenFiles();\n\n                let needsUpload: any = false;\n                if (!chosenFiles.use_demo) {\n                    for (const f of allFiles) {\n                        if (f.optional) continue;\n                        // debugger;\n                        if (f.files.length === 0) {\n                            needsUpload = { noData: true };\n                            break;\n                        } else {\n                            const chosenFileId = this.filesChosen[f.data_type];\n                            if (chosen === null) {\n                                needsUpload = { noSelectedData: true };\n                                break;\n                            }\n                            const file = this._fileById[chosenFileId];\n                            // const status = file.status;\n                            // if (status === \"running\") {\n                            //     needsUpload = { taskRunning: true };\n                            // } else if (status === \"error\") {\n                            //     needsUpload = { taskError: true, jobid: file.jobid };\n                            // }\n                        }\n                    }\n                }\n                this.$root.$emit(\"file_loaded\", needsUpload);\n            }),\n        );\n    }\n}\n</script>\n\n<style lang=\"scss\" scoped>\n    .fa {\n        margin-right: 0.1rem;\n    }\n        \n    .sel-file {\n        max-width: 100;\n    }\n    .action-container {\n        padding-top: 0.25rem;\n    }\n    .action-btn{\n        background: #00c6ff;\n        color: #fff;\n        font-size: 90%;\n        padding: 4px 12px;\n        display: block;\n    }\n        \n    .action-btn .left{\n        border-radius: 12px 0 0 12px;\n        margin-right: 1px;\n    }\n        \n    .action-btn .right{\n        border-radius: 0 12px 12px 0;\n    }\n        \n    .assoc-link{ \n        font-size: 80%;\n        background: rgba(255,255,255,.2);\n        padding: 2px 4px;\n        border-radius: 4px;\n        color: #fff;\n        margin-right: 0.5rem;\n    }\n        \n    .assoc-link :hover{\n        text-decoration: none;\n        background: rgba(255,255,255,.3);\n    }\n        \n</style>\n"],"sourceRoot":"app/javascript/page/builtin"},"metadata":{},"sourceType":"module"}