{"ast":null,"code":"import { copyObject } from \"utils/object\";\n\nfunction run(v) {\n  v.forceRedraw = true;\n  v.run();\n}\n\nexport var editorRef = {};\nexport var generateImmuneConfig = function generateImmuneConfig(v) {\n  return {\n    id: \"setting-bc\",\n    title: \"test content settings\",\n    layout: \"single-page\",\n    view: {\n      type: \"list\",\n      items: [{\n        type: \"vue\",\n        title: \"\",\n        component: \"color-picker\",\n        data: {\n          title: \"Customize colors\",\n          scheme: copyObject(v.data.colors),\n          id: \"pwcolor\",\n          callback: function callback(colors) {\n            v.data.colors = colors;\n            run(v);\n          }\n        }\n      }]\n    }\n  };\n};\nexport var generateGridConfig = function generateGridConfig(v) {\n  return {\n    id: \"plot-st\",\n    title: \"Plot Settings\",\n    layout: \"single-page\",\n    view: {\n      type: \"list\",\n      items: [{\n        title: \"plot width\",\n        type: \"input\",\n        value: {\n          current: v.data.plotSize[1],\n          callback: function callback(d) {\n            v.data.plotSize[1] = parseFloat(d);\n            v.forceRedraw = true;\n            v.run();\n          }\n        }\n      }, {\n        title: \"plot height\",\n        type: \"input\",\n        value: {\n          current: v.data.plotSize[0],\n          callback: function callback(d) {\n            v.data.plotSize[0] = parseFloat(d);\n            v.forceRedraw = true;\n            v.run();\n          }\n        }\n      }, {\n        title: \"label font size\",\n        type: \"input\",\n        value: {\n          current: v.data.labelFontSize,\n          callback: function callback(d) {\n            v.data.labelFontSize = parseFloat(d);\n            v.forceRedraw = true;\n            v.run();\n          }\n        }\n      }, {\n        title: \"tick font size\",\n        type: \"input\",\n        value: {\n          current: v.data.tickFontSize,\n          callback: function callback(d) {\n            v.data.tickFontSize = parseFloat(d);\n            v.forceRedraw = true;\n            v.run();\n          }\n        }\n      }, {\n        title: \"rotate x axis labels\",\n        type: \"checkbox\",\n        value: {\n          current: v.data.xAxisRotated,\n          callback: function callback(d) {\n            v.data.xAxisRotated = d;\n            v.forceRedraw = true;\n            v.run();\n          }\n        }\n      }]\n    }\n  };\n}; //生成对应的配置文件\n//与index.ts连接\n\nexport function editorConfig(v) {\n  return {\n    sections: [{\n      id: \"data\",\n      title: \"edit Data\",\n      layout: \"tabs\",\n      tabs: [{\n        id: \"gData\",\n        name: \"General\",\n        view: {\n          type: \"list\",\n          items: [{\n            title: \"Range Lower Bound\",\n            type: \"input\",\n            ref: \"lowerBound\",\n            value: {\n              //current: v.data.data.valueRange[0],\n              current: v.data.valueRanges[0],\n              callback: function callback(d) {\n                v.data.valueRanges[0] = parseFloat(d);\n                run(v);\n              }\n            }\n          }, {\n            title: \"Range Upper Bound\",\n            type: \"input\",\n            ref: \"upperBound\",\n            value: {\n              current: v.data.valueRanges[1],\n              callback: function callback(d) {\n                v.data.valueRanges[1] = parseFloat(d);\n                run(v);\n              }\n            }\n          }]\n        }\n      }]\n    }, generateGridConfig(v), generateImmuneConfig(v)]\n  };\n}","map":{"version":3,"sources":["/Users/wangzhenyu/Desktop/fyp_workspace/meta_platform/app/javascript/viz/immuneBar/editor.ts"],"names":["copyObject","run","v","forceRedraw","editorRef","generateImmuneConfig","id","title","layout","view","type","items","component","data","scheme","colors","callback","generateGridConfig","value","current","plotSize","d","parseFloat","labelFontSize","tickFontSize","xAxisRotated","editorConfig","sections","tabs","name","ref","valueRanges"],"mappings":"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","sourcesContent":["import { generateGridPlotConfig } from \"oviz-components/grid-plot\";\nimport { EditorDef } from \"utils/editor\";\nimport { copyObject } from \"utils/object\";\n\nfunction run(v) {\n    v.forceRedraw = true;\n    v.run();\n}\nexport const editorRef = {} as any;\n\nexport const generateImmuneConfig = (v): any => (            {\n    id: \"setting-bc\",\n    title: \"test content settings\",\n    layout: \"single-page\",\n    view: {\n        type: \"list\",\n        items: [\n            {\n                type: \"vue\",\n                title: \"\",\n                component: \"color-picker\",\n                data: {\n                    title: \"Customize colors\",\n                    scheme: copyObject(v.data.colors),\n                    id: \"pwcolor\",\n                    callback(colors) {\n                        v.data.colors = colors;\n                        run(v);\n                    },\n                    \n                },\n            },\n        ],\n    },\n});\n\nexport const generateGridConfig = (v):any =>  ({\n    id: \"plot-st\",\n    title: \"Plot Settings\",\n    layout: \"single-page\",\n    view: {\n        type: \"list\",\n        items: [\n            {\n                title: \"plot width\",\n                type: \"input\",\n                value: {\n                    current: v.data.plotSize[1],\n                    callback(d) {\n                        v.data.plotSize[1] = parseFloat(d);\n                        v.forceRedraw = true;\n                        v.run();\n                    },\n                },\n            },\n            {\n                title: \"plot height\",\n                type: \"input\",\n                value: {\n                    current: v.data.plotSize[0],\n                    callback(d) {\n                        v.data.plotSize[0] = parseFloat(d);\n                        v.forceRedraw = true;\n                        v.run();\n                    },\n                },\n            },\n            {\n                title: \"label font size\",\n                type: \"input\",\n                value: {\n                    current: v.data.labelFontSize,\n                    callback(d) {\n                        v.data.labelFontSize = parseFloat(d);\n                        v.forceRedraw = true;\n                        v.run();\n                    },\n                },\n            },\n            {\n                title: \"tick font size\",\n                type: \"input\",\n                value: {\n                    current: v.data.tickFontSize,\n                    callback(d) {\n                        v.data.tickFontSize = parseFloat(d);\n                        v.forceRedraw = true;\n                        v.run();\n                    },\n                },\n            },\n            {\n                title: \"rotate x axis labels\",\n                type: \"checkbox\",\n                value: {\n                    current: v.data.xAxisRotated,\n                    callback(d) {\n                        v.data.xAxisRotated = d;\n                        v.forceRedraw = true;\n                        v.run();\n                    },\n                },\n            },\n        ],\n    },\n});\n\n\n//生成对应的配置文件\n//与index.ts连接\nexport function editorConfig(v): EditorDef {\n    return {\n        sections: [\n            {\n                id: \"data\",\n                title: \"edit Data\",\n                layout: \"tabs\",\n                tabs: [\n                    {\n                        id: \"gData\",\n                        name: \"General\",\n                        view: {\n                            type: \"list\",\n                            items: [\n                            {\n                                title: \"Range Lower Bound\",\n                                type: \"input\",\n                                ref: \"lowerBound\",\n                                value: {\n                                    //current: v.data.data.valueRange[0],\n                                    current: v.data.valueRanges[0],\n                                    callback(d) {\n                                        v.data.valueRanges[0] = parseFloat(d);\n                                        run(v);\n                                    },\n                                },\n                            },\n                            {\n                                title: \"Range Upper Bound\",\n                                type: \"input\",\n                                ref: \"upperBound\",\n                                value: {\n                                    current: v.data.valueRanges[1],\n                                    callback(d) {\n                                        v.data.valueRanges[1] = parseFloat(d);\n                                        run(v);\n                                    },\n                                },\n                            },                               \n                            ],\n                        },\n                    },\n                ],\n            },\n            generateGridConfig(v),\n            generateImmuneConfig(v),\n        ],\n    };\n}\n\n"]},"metadata":{},"sourceType":"module"}