{"ast":null,"code":"function _typeof(obj) { \"@babel/helpers - typeof\"; if (typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; }; } return _typeof(obj); }\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }\n\nfunction _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }\n\nexport var GEOMETRY_LITERAL = new RegExp(/(\\d[\\.\\d]*|\\((.+?)\\))%(?:(\\+|\\-)(\\d[\\.\\d]*|\\((.+?)\\)))?/);\nexport var GeometryUnit;\n\n(function (GeometryUnit) {\n  GeometryUnit[GeometryUnit[\"Pixel\"] = 0] = \"Pixel\";\n  GeometryUnit[GeometryUnit[\"Percent\"] = 1] = \"Percent\";\n})(GeometryUnit || (GeometryUnit = {}));\n\nexport var GeometryValue = /*#__PURE__*/function () {\n  function GeometryValue() {\n    _classCallCheck(this, GeometryValue);\n\n    this.value = 0;\n    this.unit = GeometryUnit.Pixel;\n    this.offset = 0;\n  }\n\n  _createClass(GeometryValue, null, [{\n    key: \"parse\",\n    value: function parse(def) {\n      if (typeof def === \"number\") {\n        return GeometryValue.create(def);\n      } else if (typeof def === \"string\") {\n        if (def.length === 0) {\n          return null;\n        }\n\n        if (def.match(/^-?[\\d\\.]+$/)) {\n          // is a number\n          return GeometryValue.create(parseFloat(def));\n        }\n\n        var matches = def.match(/^(-?\\d+(\\.\\d+)?)%( ?[+|-] ?\\d+(\\.\\d+)?)?$/);\n\n        if (matches === null) {\n          throw new Error(\"Geometry value \".concat(def, \" has wrong format\"));\n        }\n\n        return GeometryValue.create(parseFloat(matches[1]), GeometryUnit.Percent, matches[3] ? parseFloat(matches[3]) : 0);\n      }\n\n      return null;\n    }\n  }, {\n    key: \"create\",\n    value: function create() {\n      var value = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 0;\n      var unit = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : GeometryUnit.Pixel;\n      var offset = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 0;\n      return {\n        value: value,\n        unit: unit,\n        offset: offset\n      };\n    }\n  }, {\n    key: \"cal\",\n    value: function cal(val, parentSize) {\n      if (val.unit === GeometryUnit.Percent) {\n        return val.value * 0.01 * parentSize + val.offset;\n      } else {\n        return val.value + val.offset;\n      }\n    }\n  }, {\n    key: \"auto\",\n    get: function get() {\n      return {\n        value: 0,\n        unit: GeometryUnit.Pixel,\n        offset: 0,\n        _auto: true\n      };\n    }\n  }, {\n    key: \"zero\",\n    get: function get() {\n      return {\n        value: 0,\n        unit: GeometryUnit.Pixel,\n        offset: 0\n      };\n    }\n  }, {\n    key: \"fullSize\",\n    get: function get() {\n      return {\n        value: 100,\n        unit: GeometryUnit.Percent,\n        offset: 0\n      };\n    }\n  }]);\n\n  return GeometryValue;\n}();\nexport function isFixed(geo) {\n  return !(_typeof(geo) === \"object\" && geo.unit === GeometryUnit.Percent);\n}\nexport function offset(val, offset) {\n  if (typeof val === \"number\") return val + offset;else {\n    val.offset += offset;\n    return val;\n  }\n}","map":null,"metadata":{},"sourceType":"module"}