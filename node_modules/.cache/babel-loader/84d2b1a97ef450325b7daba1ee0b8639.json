{"ast":null,"code":"function _slicedToArray(arr, i) { return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray(arr, i) || _nonIterableRest(); }\n\nfunction _nonIterableRest() { throw new TypeError(\"Invalid attempt to destructure non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\"); }\n\nfunction _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === \"string\") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === \"Object\" && o.constructor) n = o.constructor.name; if (n === \"Map\" || n === \"Set\") return Array.from(o); if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }\n\nfunction _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }\n\nfunction _iterableToArrayLimit(arr, i) { if (typeof Symbol === \"undefined\" || !(Symbol.iterator in Object(arr))) return; var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i[\"return\"] != null) _i[\"return\"](); } finally { if (_d) throw _e; } } return _arr; }\n\nfunction _arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }\n\nvar tooltip;\nvar tStyle = {};\nvar conf = {\n  moveWithCursor: true,\n  xAnchor: \"left\",\n  yAnchor: \"bottom\",\n  xOffset: 0,\n  yOffset: 0\n};\nvar shown = false;\nexport function config(c) {\n  if (\"moveWithCursor\" in c) conf.moveWithCursor = c.moveWithCursor;\n  if (\"xOffset\" in c) conf.xOffset = c.xOffset;\n  if (\"yOffset\" in c) conf.yOffset = c.yOffset;\n  if (\"xAnchor\" in c) conf.xAnchor = c.xAnchor;\n  if (\"yAnchor\" in c) conf.yAnchor = c.yAnchor;\n}\nexport function style() {\n  var s = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n  if (!tooltip) return;\n  Object.keys(s).forEach(function (k) {\n    return tStyle[k] = s[k];\n  });\n  tooltip.setAttribute(\"style\", Object.entries(tStyle).map(function (_ref) {\n    var _ref2 = _slicedToArray(_ref, 2),\n        k = _ref2[0],\n        v = _ref2[1];\n\n    return \"\".concat(k, \":\").concat(v);\n  }).join(\";\"));\n}\nvar willShow = false;\nvar willHide = false;\nvar disabled = false;\nexport function show(html) {\n  var _arguments = arguments;\n  if (disabled) return;\n  if (!tooltip) create();\n  tooltip.innerHTML = html;\n\n  if (willHide) {\n    willHide = false;\n  } else {\n    style({\n      display: \"inline-block\",\n      visibility: \"hidden\"\n    });\n  }\n\n  willShow = true;\n  setTimeout(function () {\n    delete tStyle.visibility;\n    if (!willShow) return;\n    var x, y;\n\n    if (_arguments[1] instanceof Event) {\n      x = _arguments[1].clientX;\n      y = _arguments[1].clientY;\n    } else {\n      x = _arguments[1];\n      y = _arguments[2];\n    }\n\n    move(x, y);\n    style({\n      display: \"inline-block\"\n    });\n    shown = true;\n    willShow = false;\n  }, 0);\n}\nexport function disable() {\n  disabled = true;\n  hide();\n}\nexport function enable() {\n  disabled = false;\n}\nexport function hide() {\n  if (!tooltip) return;\n  shown = false;\n  willHide = true;\n  willShow = false;\n  setTimeout(function () {\n    if (!willHide) return;\n    delete tStyle.top;\n    delete tStyle.left;\n    style({\n      display: \"none\"\n    });\n    willHide = false;\n  }, 5);\n}\nexport function move(x, y) {\n  if (!tooltip) return;\n\n  var _tooltip$getBoundingC = tooltip.getBoundingClientRect(),\n      width = _tooltip$getBoundingC.width,\n      height = _tooltip$getBoundingC.height;\n\n  if (conf.xAnchor !== \"left\" || conf.yAnchor !== \"top\") {\n    switch (conf.xAnchor) {\n      case \"right\":\n        x -= width;\n        break;\n\n      case \"center\":\n        x -= width / 2;\n        break;\n    }\n\n    switch (conf.yAnchor) {\n      case \"bottom\":\n        y -= height;\n        break;\n\n      case \"middle\":\n        y -= height / 2;\n        break;\n    }\n  }\n\n  var x_ = x + conf.xOffset;\n\n  if (x_ + width > window.innerWidth) {\n    x_ = window.innerWidth - width;\n  }\n\n  style({\n    top: \"\".concat(y + conf.yOffset, \"px\"),\n    left: \"\".concat(x_, \"px\")\n  });\n}\n\nfunction create() {\n  createTooltip();\n\n  for (var _i2 = 0, _arr2 = [\"turbolinks:load\", \"DOMContentLoaded\"]; _i2 < _arr2.length; _i2++) {\n    var ev = _arr2[_i2];\n    document.addEventListener(ev, function () {\n      if (!document.body.contains(tooltip)) {\n        createTooltip();\n        return;\n      }\n    });\n  }\n}\n\nfunction createTooltip() {\n  addTooltipCSS();\n  tooltip = document.createElement(\"div\");\n  tooltip.className = \"_oviz-tooltip\";\n  document.body.appendChild(tooltip);\n\n  if (conf.moveWithCursor) {\n    document.body.addEventListener(\"mousemove\", mousemoved);\n  }\n}\n\nvar tooltipCSS;\n\nfunction addTooltipCSS() {\n  if (tooltipCSS) return;\n  tooltipCSS = document.createElement(\"style\");\n  tooltipCSS.innerHTML = \"\\n    ._oviz-tooltip {\\n        display: none;\\n        position: fixed;\\n        background: rgba(0,0,0,.75);\\n        color: #fff;\\n        padding: 4px;\\n        transition: top 0.01s, left 0.01s;\\n        border-radius: 3px;\\n        font-size: 11px;\\n        font-family: Arial;\\n        pointer-events: none;\\n    }\";\n  document.head.appendChild(tooltipCSS);\n}\n\nfunction mousemoved(ev) {\n  if (!shown) return;\n  move(ev.clientX, ev.clientY);\n}","map":null,"metadata":{},"sourceType":"module"}