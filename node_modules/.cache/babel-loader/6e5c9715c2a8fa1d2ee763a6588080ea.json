{"ast":null,"code":"function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport IS_NODE from \"./is-node\";\nimport measureTextOffline from \"./measure-text-offline\";\nvar testTextElm;\nvar testCanvasContext;\nvar useSVG = false;\nvar textSize = 12;\nvar textFont = \"Arial\";\n\nvar cachedWidth = _defineProperty({}, textFont, _defineProperty({}, textSize, {}));\n\nvar cachedHeight = {};\nexport function setMeasurementMethod(method) {\n  useSVG = method === \"svg\";\n}\nexport function setFont(font) {\n  textFont = font;\n}\nexport function measuredTextSize(text) {\n  var size = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : textSize;\n  var family = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : \"Arial\";\n  if (text.length === 0) return {\n    width: 0,\n    height: 0\n  };\n\n  if (!(family in cachedWidth)) {\n    cachedWidth[family] = {};\n  }\n\n  var cachedFamilyWidth = cachedWidth[family];\n\n  if (cachedFamilyWidth[size]) {\n    var _width = cachedFamilyWidth[size][text];\n\n    if (typeof _width === \"number\") {\n      return {\n        width: _width,\n        height: cachedHeight[size]\n      };\n    }\n  } else {\n    cachedFamilyWidth[size] = {};\n  } // measure\n\n\n  var width;\n  var fontChanged = false;\n\n  if (size !== textSize) {\n    textSize = size;\n    fontChanged = true;\n  }\n\n  if (family !== textFont) {\n    textFont = family;\n    fontChanged = true;\n  }\n\n  if (IS_NODE) {\n    width = measureTextOffline(text, {\n      size: size\n    });\n\n    if (!cachedHeight[size]) {\n      cachedHeight[size] = measureTextOffline(\"m\", {\n        size: size\n      });\n    }\n  } else if (useSVG) {\n    if (!testTextElm) testTextElm = createTestText(); // update size\n\n    if (fontChanged) {\n      testTextElm.setAttribute(\"font-size\", textSize);\n      testTextElm.setAttribute(\"font-family\", textFont);\n    } // measure width\n\n\n    testTextElm.textContent = text;\n    width = testTextElm.getComputedTextLength(); // measure height\n\n    if (!cachedHeight[size]) {\n      testTextElm.textContent = \"m\";\n      cachedHeight[size] = testTextElm.getComputedTextLength();\n    }\n  } else {\n    if (!testCanvasContext) testCanvasContext = createTestCanvasContext(); // updtae size\n\n    if (fontChanged) {\n      testCanvasContext.font = \"\".concat(textSize, \"px \").concat(textFont);\n    } // measure width\n\n\n    width = testCanvasContext.measureText(text).width; // measure height\n\n    if (!cachedHeight[size]) {\n      cachedHeight[size] = testCanvasContext.measureText(\"m\").width;\n    }\n  }\n\n  cachedFamilyWidth[size][text] = width;\n  return {\n    width: width,\n    height: cachedHeight[size]\n  };\n}\n\nfunction createTestText() {\n  var svg = document.createElementNS(\"http://www.w3.org/2000/svg\", \"svg\");\n  svg.setAttribute(\"width\", 0);\n  svg.setAttribute(\"height\", 0);\n  document.body.appendChild(svg);\n  var text = document.createElementNS(\"http://www.w3.org/2000/svg\", \"text\");\n  text.setAttribute(\"font-family\", textFont);\n  text.setAttribute(\"font-size\", textSize);\n  text.setAttribute(\"visibility\", \"hidden\");\n  svg.append(text);\n  return text;\n}\n\nfunction createTestCanvasContext() {\n  var canvas = document.createElement(\"canvas\");\n  canvas.setAttribute(\"style\", \"display: none\");\n  var ctx = canvas.getContext(\"2d\");\n  ctx.font = \"\".concat(textSize, \"px \").concat(textFont);\n  document.body.append(canvas);\n  return ctx;\n}","map":null,"metadata":{},"sourceType":"module"}