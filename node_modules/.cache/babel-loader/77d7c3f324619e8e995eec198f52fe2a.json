{"ast":null,"code":"import Vue from '../../utils/vue';\nimport KeyCodes from '../../utils/key-codes';\nimport noop from '../../utils/noop';\nimport observeDom from '../../utils/observe-dom';\nimport { getComponentConfig } from '../../utils/config';\nimport { addClass, getActiveElement, reflow, removeClass, selectAll, setAttr } from '../../utils/dom';\nimport { isBrowser, hasTouchSupport, hasPointerEventSupport } from '../../utils/env';\nimport { EVENT_OPTIONS_NO_CAPTURE, eventOn, eventOff } from '../../utils/events';\nimport { isUndefined } from '../../utils/inspect';\nimport { mathAbs, mathFloor, mathMax, mathMin } from '../../utils/math';\nimport { toInteger } from '../../utils/number';\nimport idMixin from '../../mixins/id';\nimport normalizeSlotMixin from '../../mixins/normalize-slot';\nvar NAME = 'BCarousel'; // Slide directional classes\n\nvar DIRECTION = {\n  next: {\n    dirClass: 'carousel-item-left',\n    overlayClass: 'carousel-item-next'\n  },\n  prev: {\n    dirClass: 'carousel-item-right',\n    overlayClass: 'carousel-item-prev'\n  }\n}; // Fallback Transition duration (with a little buffer) in ms\n\nvar TRANS_DURATION = 600 + 50; // Time for mouse compat events to fire after touch\n\nvar TOUCH_EVENT_COMPAT_WAIT = 500; // Number of pixels to consider touch move a swipe\n\nvar SWIPE_THRESHOLD = 40; // PointerEvent pointer types\n\nvar PointerType = {\n  TOUCH: 'touch',\n  PEN: 'pen'\n}; // Transition Event names\n\nvar TransitionEndEvents = {\n  WebkitTransition: 'webkitTransitionEnd',\n  MozTransition: 'transitionend',\n  OTransition: 'otransitionend oTransitionEnd',\n  transition: 'transitionend'\n}; // Return the browser specific transitionEnd event name\n\nvar getTransitionEndEvent = function getTransitionEndEvent(el) {\n  for (var name in TransitionEndEvents) {\n    if (!isUndefined(el.style[name])) {\n      return TransitionEndEvents[name];\n    }\n  } // Fallback\n\n  /* istanbul ignore next */\n\n\n  return null;\n}; // @vue/component\n\n\nexport var BCarousel = /*#__PURE__*/Vue.extend({\n  name: NAME,\n  mixins: [idMixin, normalizeSlotMixin],\n  provide: function provide() {\n    return {\n      bvCarousel: this\n    };\n  },\n  model: {\n    prop: 'value',\n    event: 'input'\n  },\n  props: {\n    labelPrev: {\n      type: String,\n      \"default\": function _default() {\n        return getComponentConfig(NAME, 'labelPrev');\n      }\n    },\n    labelNext: {\n      type: String,\n      \"default\": function _default() {\n        return getComponentConfig(NAME, 'labelNext');\n      }\n    },\n    labelGotoSlide: {\n      type: String,\n      \"default\": function _default() {\n        return getComponentConfig(NAME, 'labelGotoSlide');\n      }\n    },\n    labelIndicators: {\n      type: String,\n      \"default\": function _default() {\n        return getComponentConfig(NAME, 'labelIndicators');\n      }\n    },\n    interval: {\n      type: Number,\n      \"default\": 5000\n    },\n    indicators: {\n      type: Boolean,\n      \"default\": false\n    },\n    controls: {\n      type: Boolean,\n      \"default\": false\n    },\n    noAnimation: {\n      // Disable slide/fade animation\n      type: Boolean,\n      \"default\": false\n    },\n    fade: {\n      // Enable cross-fade animation instead of slide animation\n      type: Boolean,\n      \"default\": false\n    },\n    noWrap: {\n      // Disable wrapping/looping when start/end is reached\n      type: Boolean,\n      \"default\": false\n    },\n    noTouch: {\n      // Sniffed by carousel-slide\n      type: Boolean,\n      \"default\": false\n    },\n    noHoverPause: {\n      // Disable pause on hover\n      type: Boolean,\n      \"default\": false\n    },\n    imgWidth: {\n      // Sniffed by carousel-slide\n      type: [Number, String] // default: undefined\n\n    },\n    imgHeight: {\n      // Sniffed by carousel-slide\n      type: [Number, String] // default: undefined\n\n    },\n    background: {\n      type: String // default: undefined\n\n    },\n    value: {\n      type: Number,\n      \"default\": 0\n    }\n  },\n  data: function data() {\n    return {\n      index: this.value || 0,\n      isSliding: false,\n      transitionEndEvent: null,\n      slides: [],\n      direction: null,\n      isPaused: !(toInteger(this.interval, 0) > 0),\n      // Touch event handling values\n      touchStartX: 0,\n      touchDeltaX: 0\n    };\n  },\n  computed: {\n    numSlides: function numSlides() {\n      return this.slides.length;\n    }\n  },\n  watch: {\n    value: function value(newVal, oldVal) {\n      if (newVal !== oldVal) {\n        this.setSlide(toInteger(newVal, 0));\n      }\n    },\n    interval: function interval(newVal, oldVal) {\n      if (newVal === oldVal) {\n        /* istanbul ignore next */\n        return;\n      }\n\n      if (!newVal) {\n        // Pausing slide show\n        this.pause(false);\n      } else {\n        // Restarting or Changing interval\n        this.pause(true);\n        this.start(false);\n      }\n    },\n    isPaused: function isPaused(newVal, oldVal) {\n      if (newVal !== oldVal) {\n        this.$emit(newVal ? 'paused' : 'unpaused');\n      }\n    },\n    index: function index(to, from) {\n      if (to === from || this.isSliding) {\n        /* istanbul ignore next */\n        return;\n      }\n\n      this.doSlide(to, from);\n    }\n  },\n  created: function created() {\n    // Create private non-reactive props\n    this.$_interval = null;\n    this.$_animationTimeout = null;\n    this.$_touchTimeout = null;\n    this.$_observer = null; // Set initial paused state\n\n    this.isPaused = !(toInteger(this.interval, 0) > 0);\n  },\n  mounted: function mounted() {\n    // Cache current browser transitionend event name\n    this.transitionEndEvent = getTransitionEndEvent(this.$el) || null; // Get all slides\n\n    this.updateSlides(); // Observe child changes so we can update slide list\n\n    this.setObserver(true);\n  },\n  beforeDestroy: function beforeDestroy() {\n    this.clearInterval();\n    this.clearAnimationTimeout();\n    this.clearTouchTimeout();\n    this.setObserver(false);\n  },\n  methods: {\n    clearInterval: function (_clearInterval) {\n      function clearInterval() {\n        return _clearInterval.apply(this, arguments);\n      }\n\n      clearInterval.toString = function () {\n        return _clearInterval.toString();\n      };\n\n      return clearInterval;\n    }(function () {\n      clearInterval(this.$_interval);\n      this.$_interval = null;\n    }),\n    clearAnimationTimeout: function clearAnimationTimeout() {\n      clearTimeout(this.$_animationTimeout);\n      this.$_animationTimeout = null;\n    },\n    clearTouchTimeout: function clearTouchTimeout() {\n      clearTimeout(this.$_touchTimeout);\n      this.$_touchTimeout = null;\n    },\n    setObserver: function setObserver() {\n      var on = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : false;\n      this.$_observer && this.$_observer.disconnect();\n      this.$_observer = null;\n\n      if (on) {\n        this.$_observer = observeDom(this.$refs.inner, this.updateSlides.bind(this), {\n          subtree: false,\n          childList: true,\n          attributes: true,\n          attributeFilter: ['id']\n        });\n      }\n    },\n    // Set slide\n    setSlide: function setSlide(slide) {\n      var _this = this;\n\n      var direction = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null; // Don't animate when page is not visible\n\n      /* istanbul ignore if: difficult to test */\n\n      if (isBrowser && document.visibilityState && document.hidden) {\n        return;\n      }\n\n      var noWrap = this.noWrap;\n      var numSlides = this.numSlides; // Make sure we have an integer (you never know!)\n\n      slide = mathFloor(slide); // Don't do anything if nothing to slide to\n\n      if (numSlides === 0) {\n        return;\n      } // Don't change slide while transitioning, wait until transition is done\n\n\n      if (this.isSliding) {\n        // Schedule slide after sliding complete\n        this.$once('sliding-end', function () {\n          return _this.setSlide(slide, direction);\n        });\n        return;\n      }\n\n      this.direction = direction; // Set new slide index\n      // Wrap around if necessary (if no-wrap not enabled)\n\n      this.index = slide >= numSlides ? noWrap ? numSlides - 1 : 0 : slide < 0 ? noWrap ? 0 : numSlides - 1 : slide; // Ensure the v-model is synched up if no-wrap is enabled\n      // and user tried to slide pass either ends\n\n      if (noWrap && this.index !== slide && this.index !== this.value) {\n        this.$emit('input', this.index);\n      }\n    },\n    // Previous slide\n    prev: function prev() {\n      this.setSlide(this.index - 1, 'prev');\n    },\n    // Next slide\n    next: function next() {\n      this.setSlide(this.index + 1, 'next');\n    },\n    // Pause auto rotation\n    pause: function pause(evt) {\n      if (!evt) {\n        this.isPaused = true;\n      }\n\n      this.clearInterval();\n    },\n    // Start auto rotate slides\n    start: function start(evt) {\n      if (!evt) {\n        this.isPaused = false;\n      }\n      /* istanbul ignore next: most likely will never happen, but just in case */\n\n\n      this.clearInterval(); // Don't start if no interval, or less than 2 slides\n\n      if (this.interval && this.numSlides > 1) {\n        this.$_interval = setInterval(this.next, mathMax(1000, this.interval));\n      }\n    },\n    // Restart auto rotate slides when focus/hover leaves the carousel\n\n    /* istanbul ignore next */\n    restart: function restart()\n    /* istanbul ignore next: difficult to test */\n    {\n      if (!this.$el.contains(getActiveElement())) {\n        this.start();\n      }\n    },\n    doSlide: function doSlide(to, from) {\n      var _this2 = this;\n\n      var isCycling = Boolean(this.interval); // Determine sliding direction\n\n      var direction = this.calcDirection(this.direction, from, to);\n      var overlayClass = direction.overlayClass;\n      var dirClass = direction.dirClass; // Determine current and next slides\n\n      var currentSlide = this.slides[from];\n      var nextSlide = this.slides[to]; // Don't do anything if there aren't any slides to slide to\n\n      if (!currentSlide || !nextSlide) {\n        /* istanbul ignore next */\n        return;\n      } // Start animating\n\n\n      this.isSliding = true;\n\n      if (isCycling) {\n        this.pause(false);\n      }\n\n      this.$emit('sliding-start', to); // Update v-model\n\n      this.$emit('input', this.index);\n\n      if (this.noAnimation) {\n        addClass(nextSlide, 'active');\n        removeClass(currentSlide, 'active');\n        this.isSliding = false; // Notify ourselves that we're done sliding (slid)\n\n        this.$nextTick(function () {\n          return _this2.$emit('sliding-end', to);\n        });\n      } else {\n        addClass(nextSlide, overlayClass); // Trigger a reflow of next slide\n\n        reflow(nextSlide);\n        addClass(currentSlide, dirClass);\n        addClass(nextSlide, dirClass); // Transition End handler\n\n        var called = false;\n        /* istanbul ignore next: difficult to test */\n\n        var onceTransEnd = function onceTransEnd() {\n          if (called) {\n            return;\n          }\n\n          called = true;\n          /* istanbul ignore if: transition events cant be tested in JSDOM */\n\n          if (_this2.transitionEndEvent) {\n            var events = _this2.transitionEndEvent.split(/\\s+/);\n\n            events.forEach(function (evt) {\n              return eventOff(currentSlide, evt, onceTransEnd, EVENT_OPTIONS_NO_CAPTURE);\n            });\n          }\n\n          _this2.clearAnimationTimeout();\n\n          removeClass(nextSlide, dirClass);\n          removeClass(nextSlide, overlayClass);\n          addClass(nextSlide, 'active');\n          removeClass(currentSlide, 'active');\n          removeClass(currentSlide, dirClass);\n          removeClass(currentSlide, overlayClass);\n          setAttr(currentSlide, 'aria-current', 'false');\n          setAttr(nextSlide, 'aria-current', 'true');\n          setAttr(currentSlide, 'aria-hidden', 'true');\n          setAttr(nextSlide, 'aria-hidden', 'false');\n          _this2.isSliding = false;\n          _this2.direction = null; // Notify ourselves that we're done sliding (slid)\n\n          _this2.$nextTick(function () {\n            return _this2.$emit('sliding-end', to);\n          });\n        }; // Set up transitionend handler\n\n        /* istanbul ignore if: transition events cant be tested in JSDOM */\n\n\n        if (this.transitionEndEvent) {\n          var events = this.transitionEndEvent.split(/\\s+/);\n          events.forEach(function (event) {\n            return eventOn(currentSlide, event, onceTransEnd, EVENT_OPTIONS_NO_CAPTURE);\n          });\n        } // Fallback to setTimeout()\n\n\n        this.$_animationTimeout = setTimeout(onceTransEnd, TRANS_DURATION);\n      }\n\n      if (isCycling) {\n        this.start(false);\n      }\n    },\n    // Update slide list\n    updateSlides: function updateSlides() {\n      this.pause(true); // Get all slides as DOM elements\n\n      this.slides = selectAll('.carousel-item', this.$refs.inner);\n      var numSlides = this.slides.length; // Keep slide number in range\n\n      var index = mathMax(0, mathMin(mathFloor(this.index), numSlides - 1));\n      this.slides.forEach(function (slide, idx) {\n        var n = idx + 1;\n\n        if (idx === index) {\n          addClass(slide, 'active');\n          setAttr(slide, 'aria-current', 'true');\n        } else {\n          removeClass(slide, 'active');\n          setAttr(slide, 'aria-current', 'false');\n        }\n\n        setAttr(slide, 'aria-posinset', String(n));\n        setAttr(slide, 'aria-setsize', String(numSlides));\n      }); // Set slide as active\n\n      this.setSlide(index);\n      this.start(this.isPaused);\n    },\n    calcDirection: function calcDirection() {\n      var direction = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : null;\n      var curIndex = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;\n      var nextIndex = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 0;\n\n      if (!direction) {\n        return nextIndex > curIndex ? DIRECTION.next : DIRECTION.prev;\n      }\n\n      return DIRECTION[direction];\n    },\n    handleClick: function handleClick(evt, fn) {\n      var keyCode = evt.keyCode;\n\n      if (evt.type === 'click' || keyCode === KeyCodes.SPACE || keyCode === KeyCodes.ENTER) {\n        evt.preventDefault();\n        evt.stopPropagation();\n        fn();\n      }\n    },\n\n    /* istanbul ignore next */\n    handleSwipe: function handleSwipe()\n    /* istanbul ignore next: JSDOM doesn't support touch events */\n    {\n      var absDeltaX = mathAbs(this.touchDeltaX);\n\n      if (absDeltaX <= SWIPE_THRESHOLD) {\n        return;\n      }\n\n      var direction = absDeltaX / this.touchDeltaX; // Reset touch delta X\n      // https://github.com/twbs/bootstrap/pull/28558\n\n      this.touchDeltaX = 0;\n\n      if (direction > 0) {\n        // Swipe left\n        this.prev();\n      } else if (direction < 0) {\n        // Swipe right\n        this.next();\n      }\n    },\n\n    /* istanbul ignore next */\n    touchStart: function touchStart(evt)\n    /* istanbul ignore next: JSDOM doesn't support touch events */\n    {\n      if (hasPointerEventSupport && PointerType[evt.pointerType.toUpperCase()]) {\n        this.touchStartX = evt.clientX;\n      } else if (!hasPointerEventSupport) {\n        this.touchStartX = evt.touches[0].clientX;\n      }\n    },\n\n    /* istanbul ignore next */\n    touchMove: function touchMove(evt)\n    /* istanbul ignore next: JSDOM doesn't support touch events */\n    {\n      // Ensure swiping with one touch and not pinching\n      if (evt.touches && evt.touches.length > 1) {\n        this.touchDeltaX = 0;\n      } else {\n        this.touchDeltaX = evt.touches[0].clientX - this.touchStartX;\n      }\n    },\n\n    /* istanbul ignore next */\n    touchEnd: function touchEnd(evt)\n    /* istanbul ignore next: JSDOM doesn't support touch events */\n    {\n      if (hasPointerEventSupport && PointerType[evt.pointerType.toUpperCase()]) {\n        this.touchDeltaX = evt.clientX - this.touchStartX;\n      }\n\n      this.handleSwipe(); // If it's a touch-enabled device, mouseenter/leave are fired as\n      // part of the mouse compatibility events on first tap - the carousel\n      // would stop cycling until user tapped out of it;\n      // here, we listen for touchend, explicitly pause the carousel\n      // (as if it's the second time we tap on it, mouseenter compat event\n      // is NOT fired) and after a timeout (to allow for mouse compatibility\n      // events to fire) we explicitly restart cycling\n\n      this.pause(false);\n      this.clearTouchTimeout();\n      this.$_touchTimeout = setTimeout(this.start, TOUCH_EVENT_COMPAT_WAIT + mathMax(1000, this.interval));\n    }\n  },\n  render: function render(h) {\n    var _this3 = this; // Wrapper for slides\n\n\n    var inner = h('div', {\n      ref: 'inner',\n      \"class\": ['carousel-inner'],\n      attrs: {\n        id: this.safeId('__BV_inner_'),\n        role: 'list'\n      }\n    }, [this.normalizeSlot('default')]); // Prev and next controls\n\n    var controls = h();\n\n    if (this.controls) {\n      var prevHandler = function prevHandler(evt) {\n        /* istanbul ignore next */\n        if (!_this3.isSliding) {\n          _this3.handleClick(evt, _this3.prev);\n        } else {\n          evt.preventDefault();\n        }\n      };\n\n      var nextHandler = function nextHandler(evt) {\n        /* istanbul ignore next */\n        if (!_this3.isSliding) {\n          _this3.handleClick(evt, _this3.next);\n        } else {\n          evt.preventDefault();\n        }\n      };\n\n      controls = [h('a', {\n        \"class\": ['carousel-control-prev'],\n        attrs: {\n          href: '#',\n          role: 'button',\n          'aria-controls': this.safeId('__BV_inner_'),\n          'aria-disabled': this.isSliding ? 'true' : null\n        },\n        on: {\n          click: prevHandler,\n          keydown: prevHandler\n        }\n      }, [h('span', {\n        \"class\": ['carousel-control-prev-icon'],\n        attrs: {\n          'aria-hidden': 'true'\n        }\n      }), h('span', {\n        \"class\": ['sr-only']\n      }, [this.labelPrev])]), h('a', {\n        \"class\": ['carousel-control-next'],\n        attrs: {\n          href: '#',\n          role: 'button',\n          'aria-controls': this.safeId('__BV_inner_'),\n          'aria-disabled': this.isSliding ? 'true' : null\n        },\n        on: {\n          click: nextHandler,\n          keydown: nextHandler\n        }\n      }, [h('span', {\n        \"class\": ['carousel-control-next-icon'],\n        attrs: {\n          'aria-hidden': 'true'\n        }\n      }), h('span', {\n        \"class\": ['sr-only']\n      }, [this.labelNext])])];\n    } // Indicators\n\n\n    var indicators = h('ol', {\n      \"class\": ['carousel-indicators'],\n      directives: [{\n        name: 'show',\n        rawName: 'v-show',\n        value: this.indicators,\n        expression: 'indicators'\n      }],\n      attrs: {\n        id: this.safeId('__BV_indicators_'),\n        'aria-hidden': this.indicators ? 'false' : 'true',\n        'aria-label': this.labelIndicators,\n        'aria-owns': this.safeId('__BV_inner_')\n      }\n    }, this.slides.map(function (slide, n) {\n      return h('li', {\n        key: \"slide_\".concat(n),\n        \"class\": {\n          active: n === _this3.index\n        },\n        attrs: {\n          role: 'button',\n          id: _this3.safeId(\"__BV_indicator_\".concat(n + 1, \"_\")),\n          tabindex: _this3.indicators ? '0' : '-1',\n          'aria-current': n === _this3.index ? 'true' : 'false',\n          'aria-label': \"\".concat(_this3.labelGotoSlide, \" \").concat(n + 1),\n          'aria-describedby': _this3.slides[n].id || null,\n          'aria-controls': _this3.safeId('__BV_inner_')\n        },\n        on: {\n          click: function click(evt) {\n            _this3.handleClick(evt, function () {\n              _this3.setSlide(n);\n            });\n          },\n          keydown: function keydown(evt) {\n            _this3.handleClick(evt, function () {\n              _this3.setSlide(n);\n            });\n          }\n        }\n      });\n    }));\n    var on = {\n      mouseenter: this.noHoverPause ? noop : this.pause,\n      mouseleave: this.noHoverPause ? noop : this.restart,\n      focusin: this.pause,\n      focusout: this.restart,\n      keydown: function keydown(evt) {\n        if (/input|textarea/i.test(evt.target.tagName)) {\n          /* istanbul ignore next */\n          return;\n        }\n\n        var keyCode = evt.keyCode;\n\n        if (keyCode === KeyCodes.LEFT || keyCode === KeyCodes.RIGHT) {\n          evt.preventDefault();\n          evt.stopPropagation();\n\n          _this3[keyCode === KeyCodes.LEFT ? 'prev' : 'next']();\n        }\n      }\n    }; // Touch support event handlers for environment\n\n    if (!this.noTouch && hasTouchSupport) {\n      // Attach appropriate listeners (prepend event name with '&' for passive mode)\n\n      /* istanbul ignore next: JSDOM doesn't support touch events */\n      if (hasPointerEventSupport) {\n        on['&pointerdown'] = this.touchStart;\n        on['&pointerup'] = this.touchEnd;\n      } else {\n        on['&touchstart'] = this.touchStart;\n        on['&touchmove'] = this.touchMove;\n        on['&touchend'] = this.touchEnd;\n      }\n    } // Return the carousel\n\n\n    return h('div', {\n      staticClass: 'carousel',\n      \"class\": {\n        slide: !this.noAnimation,\n        'carousel-fade': !this.noAnimation && this.fade,\n        'pointer-event': !this.noTouch && hasTouchSupport && hasPointerEventSupport\n      },\n      style: {\n        background: this.background\n      },\n      attrs: {\n        role: 'region',\n        id: this.safeId(),\n        'aria-busy': this.isSliding ? 'true' : 'false'\n      },\n      on: on\n    }, [inner, controls, indicators]);\n  }\n});","map":null,"metadata":{},"sourceType":"module"}