{"ast":null,"code":"function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }\n\nfunction _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }\n\nfunction _get(target, property, receiver) { if (typeof Reflect !== \"undefined\" && Reflect.get) { _get = Reflect.get; } else { _get = function _get(target, property, receiver) { var base = _superPropBase(target, property); if (!base) return; var desc = Object.getOwnPropertyDescriptor(base, property); if (desc.get) { return desc.get.call(receiver); } return desc.value; }; } return _get(target, property, receiver || target); }\n\nfunction _superPropBase(object, property) { while (!Object.prototype.hasOwnProperty.call(object, property)) { object = _getPrototypeOf(object); if (object === null) break; } return object; }\n\nfunction _inherits(subClass, superClass) { if (typeof superClass !== \"function\" && superClass !== null) { throw new TypeError(\"Super expression must either be null or a function\"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }\n\nfunction _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }\n\nfunction _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }\n\nfunction _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === \"object\" || typeof call === \"function\")) { return call; } return _assertThisInitialized(self); }\n\nfunction _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\"); } return self; }\n\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Date.prototype.toString.call(Reflect.construct(Date, [], function () {})); return true; } catch (e) { return false; } }\n\nfunction _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }\n\nfunction _typeof(obj) { \"@babel/helpers - typeof\"; if (typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; }; } return _typeof(obj); }\n\nvar __decorate = this && this.__decorate || function (decorators, target, key, desc) {\n  var c = arguments.length,\n      r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc,\n      d;\n  if ((typeof Reflect === \"undefined\" ? \"undefined\" : _typeof(Reflect)) === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);else for (var i = decorators.length - 1; i >= 0; i--) {\n    if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n  }\n  return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\n\nimport * as d3 from \"d3\";\nimport { useTemplate } from \"../../ext/decorator\";\nimport { Component } from \"../component\";\n\nvar SunburstTree =\n/** @class */\nfunction () {\n  var SunburstTree = /*#__PURE__*/function (_Component) {\n    _inherits(SunburstTree, _Component);\n\n    var _super = _createSuper(SunburstTree);\n\n    function SunburstTree() {\n      _classCallCheck(this, SunburstTree);\n\n      return _super.apply(this, arguments);\n    }\n\n    _createClass(SunburstTree, [{\n      key: \"willRender\",\n      value: function willRender() {\n        var _this = this;\n\n        this._radius = Math.min(this.$geometry.width, this.$geometry.height) / 2;\n        var root = d3.hierarchy(this.prop.data).sum(this.prop.valueGetter).sort(function (a, b) {\n          return b.value - a.value;\n        });\n        var partition = d3.partition().size([360, this._radius]).padding(this.prop.partitionPadding);\n        var cs = this.prop.colorScheme;\n        var interpolate = typeof cs === \"string\" ? {\n          rainbow: d3.interpolateRainbow,\n          warm: d3.interpolateWarm,\n          cool: d3.interpolateCool,\n          spectral: d3.interpolateSpectral,\n          redblue: d3.interpolateRdYlBu\n        }[cs] : d3.interpolateHsl(cs[0], cs[1]);\n        this._color = d3.scaleOrdinal().range(d3.quantize(interpolate, this.prop.data.children.length + 1));\n        partition(root);\n        this._nodes = [];\n        root.descendants().forEach(function (row) {\n          if (row.depth === 0) return;\n          if (!_this._nodes[row.depth]) _this._nodes[row.depth] = [];\n\n          _this._nodes[row.depth].push(row);\n        });\n      }\n    }, {\n      key: \"defaultProp\",\n      value: function defaultProp() {\n        return Object.assign(Object.assign({}, _get(_getPrototypeOf(SunburstTree.prototype), \"defaultProp\", this).call(this)), {\n          valueGetter: function valueGetter(d) {\n            return d.value;\n          },\n          colorScheme: \"rainbow\",\n          partitionPadding: 0.1\n        });\n      }\n    }]);\n\n    return SunburstTree;\n  }(Component);\n\n  SunburstTree = __decorate([useTemplate(\"\\nComponent {\\n    coord = \\\"polar\\\"\\n    @for (node, index) in _nodes {\\n        Component {\\n            key = index\\n            @for (leaf, idx) in node {\\n                Component {\\n                    key = idx;\\n                    @let color = _color((leaf.children ? leaf : leaf.parent).data.name)\\n                    @yield partition with { leaf, color } default {\\n                        Arc {\\n                            x1 = leaf.x0; x2 = leaf.x1;\\n                            r1 = leaf.y0; r2 = leaf.y1;\\n                            fill = color\\n                            pad = 0;\\n                            @props prop.partition\\n                        }\\n                    }\\n                }\\n            }\\n            Component {\\n                key = \\\"overlay\\\"\\n                @for (leaf, idx) in node {\\n                    Component {\\n                        key = idx\\n                        @let color = _color((leaf.children ? leaf : leaf.parent).data.name)\\n                        @yield overlay with { leaf, color }\\n                    }\\n                }\\n            }\\n        }\\n    }\\n}\")], SunburstTree);\n  return SunburstTree;\n}();\n\nexport { SunburstTree };","map":null,"metadata":{},"sourceType":"module"}