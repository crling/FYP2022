{"ast":null,"code":"import { arrayIncludes } from '../utils/array';\nimport { isBrowser } from '../utils/env';\nimport { EVENT_OPTIONS_NO_CAPTURE, eventOn, eventOff } from '../utils/events';\nimport { isString, isFunction } from '../utils/inspect';\nimport { keys } from '../utils/object';\nvar PROP = '$_bv_documentHandlers_'; // @vue/component\n\nexport default {\n  created: function created() {\n    var _this = this;\n    /* istanbul ignore next */\n\n\n    if (!isBrowser) {\n      return;\n    } // Declare non-reactive property\n    // Object of arrays, keyed by event name,\n    // where value is an array of handlers\n    // Prop will be defined on client only\n\n\n    this[PROP] = {}; // Set up our beforeDestroy handler (client only)\n\n    this.$once('hook:beforeDestroy', function () {\n      var items = _this[PROP] || {}; // Immediately delete this[PROP] to prevent the\n      // listenOn/Off methods from running (which may occur\n      // due to requestAnimationFrame/transition delays)\n\n      delete _this[PROP]; // Remove all registered event handlers\n\n      keys(items).forEach(function (evtName) {\n        var handlers = items[evtName] || [];\n        handlers.forEach(function (handler) {\n          return eventOff(document, evtName, handler, EVENT_OPTIONS_NO_CAPTURE);\n        });\n      });\n    });\n  },\n  methods: {\n    listenDocument: function listenDocument(on, evtName, handler) {\n      on ? this.listenOnDocument(evtName, handler) : this.listenOffDocument(evtName, handler);\n    },\n    listenOnDocument: function listenOnDocument(evtName, handler) {\n      if (this[PROP] && isString(evtName) && isFunction(handler)) {\n        this[PROP][evtName] = this[PROP][evtName] || [];\n\n        if (!arrayIncludes(this[PROP][evtName], handler)) {\n          this[PROP][evtName].push(handler);\n          eventOn(document, evtName, handler, EVENT_OPTIONS_NO_CAPTURE);\n        }\n      }\n    },\n    listenOffDocument: function listenOffDocument(evtName, handler) {\n      if (this[PROP] && isString(evtName) && isFunction(handler)) {\n        eventOff(document, evtName, handler, EVENT_OPTIONS_NO_CAPTURE);\n        this[PROP][evtName] = (this[PROP][evtName] || []).filter(function (h) {\n          return h !== handler;\n        });\n      }\n    }\n  }\n};","map":null,"metadata":{},"sourceType":"module"}