{"ast":null,"code":"var _dec, _dec2, _class, _class2, _descriptor, _temp;\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nfunction _initializerDefineProperty(target, property, descriptor, context) { if (!descriptor) return; Object.defineProperty(target, property, { enumerable: descriptor.enumerable, configurable: descriptor.configurable, writable: descriptor.writable, value: descriptor.initializer ? descriptor.initializer.call(context) : void 0 }); }\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }\n\nfunction _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }\n\nfunction _inherits(subClass, superClass) { if (typeof superClass !== \"function\" && superClass !== null) { throw new TypeError(\"Super expression must either be null or a function\"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }\n\nfunction _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }\n\nfunction _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }\n\nfunction _possibleConstructorReturn(self, call) { if (call && (typeof call === \"object\" || typeof call === \"function\")) { return call; } return _assertThisInitialized(self); }\n\nfunction _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\"); } return self; }\n\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Date.prototype.toString.call(Reflect.construct(Date, [], function () {})); return true; } catch (e) { return false; } }\n\nfunction _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }\n\nfunction _applyDecoratedDescriptor(target, property, decorators, descriptor, context) { var desc = {}; Object.keys(descriptor).forEach(function (key) { desc[key] = descriptor[key]; }); desc.enumerable = !!desc.enumerable; desc.configurable = !!desc.configurable; if ('value' in desc || desc.initializer) { desc.writable = true; } desc = decorators.slice().reverse().reduce(function (desc, decorator) { return decorator(target, property, desc) || desc; }, desc); if (context && desc.initializer !== void 0) { desc.value = desc.initializer ? desc.initializer.call(context) : void 0; desc.initializer = undefined; } if (desc.initializer === void 0) { Object.defineProperty(target, property, desc); desc = null; } return desc; }\n\nfunction _initializerWarningHelper(descriptor, context) { throw new Error('Decorating class property failed. Please ensure that ' + 'proposal-class-properties is enabled and runs after the decorators transform.'); }\n\nimport Vue from \"vue\";\nimport Component from \"vue-class-component\";\nimport { Prop } from \"vue-property-decorator\";\nimport ColorPicker from \"page/builtin/color-picker.vue\";\nimport Reorder from \"./reorder.vue\";\nvar MetaInfo = (_dec = Component({\n  components: {\n    Reorder: Reorder,\n    ColorPicker: ColorPicker\n  }\n}), _dec2 = Prop(), _dec(_class = (_class2 = (_temp = /*#__PURE__*/function (_Vue) {\n  _inherits(MetaInfo, _Vue);\n\n  var _super = _createSuper(MetaInfo);\n\n  function MetaInfo() {\n    var _this;\n\n    _classCallCheck(this, MetaInfo);\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    _this = _super.call.apply(_super, [this].concat(args));\n\n    _initializerDefineProperty(_this, \"data\", _descriptor, _assertThisInitialized(_this));\n\n    _this.dirtyGroup = null;\n    return _this;\n  }\n\n  _createClass(MetaInfo, [{\n    key: \"reorderProp\",\n    value: function reorderProp(d) {\n      var _this2 = this;\n\n      return {\n        title: \"Reorder categories\",\n        array: d.values,\n        callback: function callback(v) {\n          d.values = v;\n          _this2.dirtyGroup = d.name;\n        }\n      };\n    }\n  }, {\n    key: \"cpProp\",\n    value: function cpProp(d) {\n      var _this3 = this;\n\n      return {\n        id: \"m-\".concat(d.name),\n        title: \"Set colors\",\n        scheme: d.colorMap,\n        callback: function callback(scheme) {\n          d.colorMap = scheme;\n          _this3.dirtyGroup = d.name;\n        }\n      };\n    }\n  }, {\n    key: \"cpGProp\",\n    value: function cpGProp(d) {\n      var _this4 = this;\n\n      return {\n        id: \"m-\".concat(d.name),\n        title: \"Set colors\",\n        scheme: _objectSpread({\n          Start: d.colorStart,\n          End: d.colorEnd\n        }, d.useGroup ? {} : {\n          __min: d.rangeMin,\n          __max: d.rangeMax\n        }),\n        callback: function callback(scheme) {\n          d.colorStart = scheme.Start;\n          d.colorEnd = scheme.End;\n\n          if (!d.useGroup) {\n            d.rangeMin = scheme.__min;\n            d.rangeMax = scheme.__max;\n          }\n\n          _this4.dirtyGroup = d.name;\n        }\n      };\n    }\n  }, {\n    key: \"markDirty\",\n    value: function markDirty(gp) {\n      this.dirtyGroup = gp;\n    }\n  }, {\n    key: \"apply\",\n    value: function apply() {\n      this.data.callback(this.data.data);\n      this.dirtyGroup = null;\n    }\n  }]);\n\n  return MetaInfo;\n}(Vue), _temp), (_descriptor = _applyDecoratedDescriptor(_class2.prototype, \"data\", [_dec2], {\n  configurable: true,\n  enumerable: true,\n  writable: true,\n  initializer: null\n})), _class2)) || _class);\nexport { MetaInfo as default };","map":{"version":3,"sources":["meta-info.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAwEA,OAAA,GAAA,MAAA,KAAA;AACA,OAAA,SAAA,MAAA,qBAAA;AACA,SAAA,IAAA,QAAA,wBAAA;AACA,OAAA,WAAA,MAAA,+BAAA;AACA,OAAA,OAAA,MAAA,eAAA;IAKA,Q,WAHA,SAAA,CAAA;AACA,EAAA,UAAA,EAAA;AAAA,IAAA,OAAA,EAAA,OAAA;AAAA,IAAA,WAAA,EAAA;AAAA;AADA,CAAA,C,UAIA,IAAA,E;;;;;;;;;;;;;;;;;;UACA,U,GAAA,I;;;;;;gCAEA,C,EAAA;AAAA;;AACA,aAAA;AACA,QAAA,KAAA,EAAA,oBADA;AAEA,QAAA,KAAA,EAAA,CAAA,CAAA,MAFA;AAGA,QAAA,QAAA,EAAA,kBAAA,CAAA,EAAA;AACA,UAAA,CAAA,CAAA,MAAA,GAAA,CAAA;AACA,UAAA,MAAA,CAAA,UAAA,GAAA,CAAA,CAAA,IAAA;AACA;AANA,OAAA;AAQA;;;2BAEA,C,EAAA;AAAA;;AACA,aAAA;AACA,QAAA,EAAA,cAAA,CAAA,CAAA,IAAA,CADA;AAEA,QAAA,KAAA,EAAA,YAFA;AAGA,QAAA,MAAA,EAAA,CAAA,CAAA,QAHA;AAIA,QAAA,QAAA,EAAA,kBAAA,MAAA,EAAA;AACA,UAAA,CAAA,CAAA,QAAA,GAAA,MAAA;AACA,UAAA,MAAA,CAAA,UAAA,GAAA,CAAA,CAAA,IAAA;AACA;AAPA,OAAA;AASA;;;4BAEA,C,EAAA;AAAA;;AACA,aAAA;AACA,QAAA,EAAA,cAAA,CAAA,CAAA,IAAA,CADA;AAEA,QAAA,KAAA,EAAA,YAFA;AAGA,QAAA,MAAA;AACA,UAAA,KAAA,EAAA,CAAA,CAAA,UADA;AAEA,UAAA,GAAA,EAAA,CAAA,CAAA;AAFA,WAIA,CAAA,CAAA,QAAA,GAAA,EAAA,GAAA;AACA,UAAA,KAAA,EAAA,CAAA,CAAA,QADA;AAEA,UAAA,KAAA,EAAA,CAAA,CAAA;AAFA,SAJA,CAHA;AAaA,QAAA,QAAA,EAAA,kBAAA,MAAA,EAAA;AACA,UAAA,CAAA,CAAA,UAAA,GAAA,MAAA,CAAA,KAAA;AACA,UAAA,CAAA,CAAA,QAAA,GAAA,MAAA,CAAA,GAAA;;AACA,cAAA,CAAA,CAAA,CAAA,QAAA,EAAA;AACA,YAAA,CAAA,CAAA,QAAA,GAAA,MAAA,CAAA,KAAA;AACA,YAAA,CAAA,CAAA,QAAA,GAAA,MAAA,CAAA,KAAA;AACA;;AACA,UAAA,MAAA,CAAA,UAAA,GAAA,CAAA,CAAA,IAAA;AACA;AArBA,OAAA;AAuBA;;;8BAEA,E,EAAA;AACA,WAAA,UAAA,GAAA,EAAA;AACA;;;4BAEA;AACA,WAAA,IAAA,CAAA,QAAA,CAAA,KAAA,IAAA,CAAA,IAAA;AACA,WAAA,UAAA,GAAA,IAAA;AACA;;;;EA5DA,G;;;;;;SAAA,Q","sourcesContent":["<template>\n    <div>\n        <div class=\"list-group\">\n            <div class=\"list-group-item\">\n                <b-btn variant=\"primary\" size=\"sm\" block @click=\"apply\">Apply Changes</b-btn>\n            </div>\n            <div v-for=\"d in data.data\" :key=\"d.name\" class=\"list-group-item\">\n                <div class=\"title\"><b>{{d.name}}</b></div>\n                <div v-if=\"d.isNumber && d.hasValues\" class=\"form-check mt-2\">\n                    <input type=\"checkbox\" class=\"form-check-input\" :id=\"`in-${d.name}`\" v-model=\"d.useNumber\" @change=\"markDirty(d.name)\">\n                    <label class=\"form-check-label\" :for=\"`in-${d.name}`\">Is continuous number</label>\n                </div>\n                <div v-if=\"d.useNumber\" class=\"mt-2\">\n                    <div class=\"form-check\">\n                        <label class=\"form-check-label\">\n                            <input type=\"checkbox\" class=\"form-check-input\" v-model=\"d.useGroup\" @change=\"markDirty(d.name)\">\n                            Use groups\n                        </label>\n                    </div>\n                    <div v-if=\"d.useGroup\" class=\"mt-2\">\n                        <div class=\"form-check\">\n                            <label class=\"form-check-label\">\n                                <input type=\"checkbox\" class=\"form-check-input\"  v-model=\"d.useThres\" @change=\"markDirty(d.name)\">\n                                Custom ranges for groups\n                            </label>\n                        </div>\n                        <div class=\"mt-2\" v-if=\"d.useThres\">\n                            <b-input-group size=\"sm\">\n                                <b-form-input :value=\"d.min\" size=\"sm\" disabled />\n                                <b-input-group-append is-text>\n                                    <label class=\"m-0\"><input type=\"checkbox\" v-model=\"d.minDistinct\" class=\"mr-1\" @change=\"markDirty(d.name)\" /> Distinct</label>\n                                </b-input-group-append>\n                            </b-input-group>\n                            <b-input-group v-for=\"(t, i) in d.thres\" :key=\"i\" size=\"sm\">\n                                <b-form-input v-model.number=\"d.thres[i]\" size=\"sm\" @change=\"markDirty(d.name)\" />\n                                <b-input-group-append>\n                                    <b-btn @click=\"$delete(d.thres, i); markDirty(d.name)\">Remove</b-btn>\n                                </b-input-group-append>\n                            </b-input-group>\n                            <b-input-group size=\"sm\">\n                            <b-form-input :value=\"d.max\" size=\"sm\" disabled />\n                                <b-input-group-append is-text>\n                                    <label class=\"m-0\"><input type=\"checkbox\" v-model=\"d.maxDistinct\" class=\"mr-1\" @change=\"markDirty(d.name)\" /> Distinct</label>\n                                </b-input-group-append>\n                            </b-input-group>\n                            <b-btn size=\"sm\" class=\"mt-1\" @click=\"d.thres.push(0); markDirty(d.name)\">Add threshold</b-btn>\n                        </div>\n                        <div class=\"mt-2\" v-else>\n                            <b-input-group size=\"sm\" prepend=\"Num of groups\">\n                                <b-form-input v-model.number=\"d.groupCount\" @change=\"markDirty(d.name)\"></b-form-input>\n                            </b-input-group>\n                        </div>\n                    </div>\n                    <div class=\"mt-2 d-flex\">\n                        <color-picker :data=\"cpGProp(d)\"/>\n                    </div>\n                </div>\n                <div v-else class=\"mt-2 d-flex\">\n                    <div class=\"mr-2\">\n                        <reorder :data=\"reorderProp(d)\"/>\n                    </div>\n                    <div class=\"mr-2\">\n                        <color-picker :data=\"cpProp(d)\"/>\n                    </div>\n                </div>\n                <div class=\"mt-1 text-danger small\" v-if=\"dirtyGroup === d.name\">Settings changed. Please click \"Apply Changes\".</div>\n            </div>\n        </div>\n    </div>\n</template>\n\n<script lang=\"ts\">\nimport Vue from \"vue\";\nimport Component from \"vue-class-component\";\nimport { Prop } from \"vue-property-decorator\";\nimport ColorPicker from \"page/builtin/color-picker.vue\";\nimport Reorder from \"./reorder.vue\";\n\n@Component({\n    components: { Reorder, ColorPicker },\n})\nexport default class MetaInfo extends Vue {\n    @Prop() public data: any;\n    private dirtyGroup = null;\n\n    private reorderProp(d: any) {\n        return {\n            title: \"Reorder categories\",\n            array: d.values,\n            callback: v => {\n                d.values = v;\n                this.dirtyGroup = d.name;\n            },\n        };\n    }\n\n    private cpProp(d: any) {\n        return {\n            id: `m-${d.name}`,\n            title: \"Set colors\",\n            scheme: d.colorMap,\n            callback: (scheme) => {\n                d.colorMap = scheme;\n                this.dirtyGroup = d.name;\n            },\n        };\n    }\n\n    private cpGProp(d: any) {\n        return {\n            id: `m-${d.name}`,\n            title: \"Set colors\",\n            scheme: {\n                Start: d.colorStart,\n                End: d.colorEnd,\n                ...(\n                    d.useGroup ? {} : {\n                        __min: d.rangeMin,\n                        __max: d.rangeMax,\n                    }\n                ),\n            },\n            callback: (scheme) => {\n                d.colorStart = scheme.Start;\n                d.colorEnd = scheme.End;\n                if (!d.useGroup) {\n                    d.rangeMin = scheme.__min;\n                    d.rangeMax = scheme.__max;\n                }\n                this.dirtyGroup = d.name;\n            },\n        };\n    }\n\n    private markDirty(gp) {\n        this.dirtyGroup = gp;\n    }\n\n    private apply() {\n        this.data.callback(this.data.data);\n        this.dirtyGroup = null;\n    }\n}\n</script>\n\n<style lang=\"scss\" scoped>\n.title b {\n    border-bottom: 1px solid #00c6ff;\n}\n</style>"],"sourceRoot":"app/javascript/viz/meta-overview"},"metadata":{},"sourceType":"module"}