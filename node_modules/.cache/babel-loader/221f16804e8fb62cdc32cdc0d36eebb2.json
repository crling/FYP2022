{"ast":null,"code":"function _slicedToArray(arr, i) { return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray(arr, i) || _nonIterableRest(); }\n\nfunction _nonIterableRest() { throw new TypeError(\"Invalid attempt to destructure non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\"); }\n\nfunction _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === \"string\") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === \"Object\" && o.constructor) n = o.constructor.name; if (n === \"Map\" || n === \"Set\") return Array.from(o); if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }\n\nfunction _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }\n\nfunction _iterableToArrayLimit(arr, i) { if (typeof Symbol === \"undefined\" || !(Symbol.iterator in Object(arr))) return; var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i[\"return\"] != null) _i[\"return\"](); } finally { if (_d) throw _e; } } return _arr; }\n\nfunction _arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }\n\nimport { genDefaultPalette, withDefaultPalette } from \"oviz-common/palette\";\nimport { copyObject } from \"utils/object\";\n\nfunction run(v) {\n  v.data._changed = true;\n  v.root.dataChanged = true;\n  v.run();\n}\n\nexport var editorRef = {};\nvar cbpPalette = {\n  cBioPortal: {\n    name: \"cBioPortal\",\n    // miss, inframe, trunc, other, text, active layer, line, icon stroke\n    colors: [\"#3d7f08\", \"#913810\", \"#000000\", \"#c55ebc\", \"#000000\", \"#777\", \"#555\", \"#fff\"]\n  }\n};\nexport function editorConfig(v) {\n  var _genDefaultPalette = genDefaultPalette(v.data.colors),\n      _genDefaultPalette2 = _slicedToArray(_genDefaultPalette, 1),\n      defaultPalette = _genDefaultPalette2[0];\n\n  return {\n    sections: [{\n      id: \"data\",\n      title: \"Data\",\n      layout: \"tabs\",\n      tabs: [{\n        id: \"gData\",\n        name: \"General\",\n        view: {\n          type: \"list\",\n          items: [{\n            title: \"Taxonomic rank\",\n            type: \"select\",\n            options: v.data.ranks,\n            value: {\n              current: v.data.config.rankIndex.toString(),\n              callback: function callback(d) {\n                v.data.config.rankIndex = parseInt(d);\n                v.root.rankChanged = true;\n                v.forceRedraw = true;\n                run(v);\n              }\n            }\n          }]\n        }\n      }, {\n        id: \"xData\",\n        name: \"X-Axis\",\n        view: {\n          type: \"list\",\n          items: [{\n            ref: \"xAxis\",\n            title: \"X-Axis\",\n            type: \"select\",\n            options: v.data.availableAxises,\n            value: {\n              current: v.data.config.xAxisIndex.toString(),\n              callback: function callback(d) {\n                v.data.config.xAxisIndex = parseInt(d);\n                v.root.dataChanged = true;\n                v.forceRedraw = true;\n                run(v);\n              }\n            }\n          }, {\n            title: \"X Range Lower Bound\",\n            type: \"input\",\n            value: {\n              current: 0,\n              callback: function callback(d) {\n                v.data.config.categoryRange[0] = parseFloat(d);\n\n                if (!!v.data.config.categoryRange[0] && !!v.data.config.categoryRange[1]) {\n                  v.forceRedraw = true;\n                  v.root.dataChanged = true;\n                  run(v);\n                }\n              }\n            }\n          }, {\n            title: \"X Range Upper Bound\",\n            type: \"input\",\n            value: {\n              current: 0,\n              callback: function callback(d) {\n                v.data.config.categoryRange[1] = parseFloat(d);\n\n                if (!!v.data.config.categoryRange[0] && !!v.data.config.categoryRange[1]) {\n                  v.forceRedraw = true;\n                  v.root.dataChanged = true;\n                  run(v);\n                }\n              }\n            }\n          }]\n        }\n      }, {\n        id: \"yData\",\n        name: \"Y-Axis\",\n        view: {\n          type: \"list\",\n          items: [{\n            ref: \"yAxis\",\n            title: \"Y-Axis\",\n            type: \"select\",\n            options: v.data.availableAxises,\n            value: {\n              current: v.data.config.yAxisIndex.toString(),\n              callback: function callback(d) {\n                v.data.config.yAxisIndex = parseInt(d);\n                v.forceRedraw = true;\n                v.root.dataChanged = true;\n                run(v);\n              }\n            }\n          }, {\n            title: \"Y Range Lower Bound\",\n            type: \"input\",\n            value: {\n              current: 0,\n              callback: function callback(d) {\n                v.data.config.valueRange[0] = parseFloat(d);\n\n                if (!!v.data.config.valueRange[0] && !!v.data.config.valueRange[1]) {\n                  v.forceRedraw = true;\n                  run(v);\n                }\n              }\n            }\n          }, {\n            title: \"Y Range Upper Bound\",\n            type: \"input\",\n            value: {\n              current: 0,\n              callback: function callback(d) {\n                v.data.config.valueRange[1] = parseFloat(d);\n\n                if (!!v.data.config.valueRange[0] && !!v.data.config.valueRange[1]) {\n                  v.forceRedraw = true;\n                  run(v);\n                }\n              }\n            }\n          }]\n        }\n      }]\n    }, {\n      id: \"settings\",\n      title: \"Settings\",\n      layout: \"single-page\",\n      view: {\n        type: \"list\",\n        items: [{\n          type: \"vue\",\n          title: \"\",\n          component: \"color-picker\",\n          data: {\n            title: \"Customize colors\",\n            scheme: copyObject(v.data.colors),\n            palettes: withDefaultPalette(defaultPalette, cbpPalette),\n            paletteMap: {\n              \"0\": 0,\n              \"1\": 1\n            },\n            id: \"pwcolor\",\n            callback: function callback(colors) {\n              v.data.colors = [colors[\"0\"], colors[\"1\"]];\n              v.forceRedraw = true;\n              run(v);\n            }\n          }\n        }, // {\n        //     type: \"vue\",\n        //     title: \"Range\",\n        //     component: \"slider-input\",\n        //     data: {\n        //         id: \"slider\",\n        //         value: 0,\n        //         range: [0,100],\n        //         callback() {\n        //             console.log(\"???\");\n        //         },\n        //     },\n        // },\n        {\n          title: \"Scatter Size: \",\n          type: \"input\",\n          value: {\n            current: v.data.config.scatterSize,\n            callback: function callback(d) {\n              v.data.config.scatterSize = parseFloat(d);\n              v.forceRedraw = true;\n              run(v);\n            }\n          }\n        }, {\n          title: \"Hollow Scatter\",\n          type: \"checkbox\",\n          value: {\n            current: v.data.config.hollow,\n            callback: function callback(d) {\n              v.data.config.hollow = d;\n              run(v);\n            }\n          }\n        }]\n      }\n    }]\n  };\n}","map":{"version":3,"sources":["/Users/wangzhenyu/Desktop/fyp_workspace/meta_platform/app/javascript/viz/scatterplot/editor.ts"],"names":["genDefaultPalette","withDefaultPalette","copyObject","run","v","data","_changed","root","dataChanged","editorRef","cbpPalette","cBioPortal","name","colors","editorConfig","defaultPalette","sections","id","title","layout","tabs","view","type","items","options","ranks","value","current","config","rankIndex","toString","callback","d","parseInt","rankChanged","forceRedraw","ref","availableAxises","xAxisIndex","categoryRange","parseFloat","yAxisIndex","valueRange","component","scheme","palettes","paletteMap","scatterSize","hollow"],"mappings":"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","sourcesContent":["import { genDefaultPalette, withDefaultPalette } from \"oviz-common/palette\";\nimport { EditorDef } from \"utils/editor\";\nimport { copyObject } from \"utils/object\";\n\nfunction run(v) {\n    v.data._changed = true;\n    v.root.dataChanged = true;\n    v.run();\n}\nexport const editorRef = {} as any;\n\nconst cbpPalette = {\n    cBioPortal: {\n        name: \"cBioPortal\",\n        // miss, inframe, trunc, other, text, active layer, line, icon stroke\n        colors: [\"#3d7f08\", \"#913810\", \"#000000\", \"#c55ebc\", \"#000000\", \"#777\", \"#555\", \"#fff\"],\n    },\n};\n\nexport function editorConfig(v): EditorDef {\n    const [defaultPalette] = genDefaultPalette(v.data.colors);\n    return {\n        sections: [\n            {\n                id: \"data\",\n                title: \"Data\",\n                layout: \"tabs\",\n                tabs: [\n                    {\n                        id: \"gData\",\n                        name: \"General\",\n                        view: {\n                            type: \"list\",\n                            items: [\n                                {\n                                    title: \"Taxonomic rank\",\n                                    type: \"select\",\n                                    options: v.data.ranks,\n                                    value: {\n                                        current: v.data.config.rankIndex.toString(),\n                                        callback(d) {\n                                            v.data.config.rankIndex = parseInt(d);\n                                            v.root.rankChanged = true;\n                                            v.forceRedraw = true;\n                                            run(v);\n                                        },\n                                    },\n                                },\n                            ],\n                        },\n                    },\n                    {\n                        id: \"xData\",\n                        name: \"X-Axis\",\n                        view: {\n                            type: \"list\",\n                            items: [\n                                {\n                                    ref: \"xAxis\",\n                                    title: \"X-Axis\",\n                                    type: \"select\",\n                                    options: v.data.availableAxises,\n                                    value: {\n                                        current: v.data.config.xAxisIndex.toString(),\n                                        callback(d) {\n                                            v.data.config.xAxisIndex = parseInt(d);\n                                            v.root.dataChanged = true;\n                                            v.forceRedraw = true;\n                                            run(v);\n                                        },\n                                    },\n                                },\n                                {\n                                    title: \"X Range Lower Bound\",\n                                    type: \"input\",\n                                    value: {\n                                        current: 0,\n                                        callback(d) {\n                                            v.data.config.categoryRange[0] = parseFloat(d);\n                                            if (!!v.data.config.categoryRange[0]\n                                                && !!v.data.config.categoryRange[1]) {\n                                                    v.forceRedraw = true;\n                                                    v.root.dataChanged = true;\n                                                    run(v);\n                                                }\n                                        },\n                                    },\n                                },\n                                {\n                                    title: \"X Range Upper Bound\",\n                                    type: \"input\",\n                                    value: {\n                                        current: 0,\n                                        callback(d) {\n                                            v.data.config.categoryRange[1] = parseFloat(d);\n                                            if (!!v.data.config.categoryRange[0] \n                                                && !!v.data.config.categoryRange[1]) {\n                                                    v.forceRedraw = true;\n                                                    v.root.dataChanged = true;\n                                                    run(v);\n                                                }\n                                        },\n                                    },\n                                },\n                            ],\n                        },\n                    },\n                    {\n                        id: \"yData\",\n                        name: \"Y-Axis\",\n                        view: {\n                            type: \"list\",\n                            items: [\n                                {\n                                    ref: \"yAxis\",\n                                    title: \"Y-Axis\",\n                                    type: \"select\",\n                                    options: v.data.availableAxises,\n                                    value: {\n                                        current: v.data.config.yAxisIndex.toString(),\n                                        callback(d) {\n                                            v.data.config.yAxisIndex = parseInt(d);\n                                            v.forceRedraw = true;\n                                            v.root.dataChanged = true;\n                                            run(v);\n                                        },\n                                    },\n                                },\n                                {\n                                    title: \"Y Range Lower Bound\",\n                                    type: \"input\",\n                                    value: {\n                                        current: 0,\n                                        callback(d) {\n                                            v.data.config.valueRange[0] = parseFloat(d);\n                                            if (!!v.data.config.valueRange[0] \n                                                && !!v.data.config.valueRange[1]) {\n                                                    v.forceRedraw = true;\n                                                    run(v);\n                                                }\n                                        },\n                                    },\n                                },\n                                {\n                                    title: \"Y Range Upper Bound\",\n                                    type: \"input\",\n                                    value: {\n                                        current: 0,\n                                        callback(d) {\n                                            v.data.config.valueRange[1] = parseFloat(d);\n                                            if (!!v.data.config.valueRange[0] \n                                                && !!v.data.config.valueRange[1]) {\n                                                    v.forceRedraw = true;\n                                                    run(v);\n                                                }\n                                        },\n                                    },\n                                },\n                            ],\n                        },\n                    },\n                ],\n            },\n            {\n                id: \"settings\",\n                title: \"Settings\",\n                layout: \"single-page\",\n                view: {\n                    type: \"list\",\n                    items: [\n                        {\n                            type: \"vue\",\n                            title: \"\",\n                            component: \"color-picker\",\n                            data: {\n                                title: \"Customize colors\",\n                                scheme: copyObject(v.data.colors),\n                                palettes: withDefaultPalette(defaultPalette, cbpPalette),\n                                paletteMap: {\"0\": 0, \"1\": 1},\n                                id: \"pwcolor\",\n                                callback(colors) {\n                                    v.data.colors = [colors[\"0\"], colors[\"1\"]];\n                                    v.forceRedraw = true;\n                                    run(v);\n                                },\n                            },\n                        },\n                        // {\n                        //     type: \"vue\",\n                        //     title: \"Range\",\n                        //     component: \"slider-input\",\n                        //     data: {\n                        //         id: \"slider\",\n                        //         value: 0,\n                        //         range: [0,100],\n                        //         callback() {\n                        //             console.log(\"???\");\n                        //         },\n                        //     },\n                        // },\n                        {\n                            title: \"Scatter Size: \",\n                            type: \"input\",\n                            value: {\n                                current: v.data.config.scatterSize,\n                                callback(d) {\n                                    v.data.config.scatterSize = parseFloat(d);\n                                    v.forceRedraw = true;\n                                    run(v);\n                                },\n                            },\n                        },\n                        {\n                            title: \"Hollow Scatter\",\n                            type: \"checkbox\",\n                            value: {\n                                current: v.data.config.hollow,\n                                callback(d) {\n                                    v.data.config.hollow = d;\n                                    run(v);\n                                },\n                            },\n                        },\n                    ],\n                },\n            },\n        ],\n    };\n}\n"]},"metadata":{},"sourceType":"module"}