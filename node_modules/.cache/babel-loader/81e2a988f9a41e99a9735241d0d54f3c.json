{"ast":null,"code":"function _typeof(obj) { \"@babel/helpers - typeof\"; if (typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; }; } return _typeof(obj); }\n\nfunction _templateObject() {\n  var data = _taggedTemplateLiteral([\"Chart: a data key or an array of data keys\\n                 must be used when supplying multiple data to the plot.\"]);\n\n  _templateObject = function _templateObject() {\n    return data;\n  };\n\n  return data;\n}\n\nfunction _taggedTemplateLiteral(strings, raw) { if (!raw) { raw = strings.slice(0); } return Object.freeze(Object.defineProperties(strings, { raw: { value: Object.freeze(raw) } })); }\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }\n\nfunction _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }\n\nfunction _inherits(subClass, superClass) { if (typeof superClass !== \"function\" && superClass !== null) { throw new TypeError(\"Super expression must either be null or a function\"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }\n\nfunction _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }\n\nfunction _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }\n\nfunction _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === \"object\" || typeof call === \"function\")) { return call; } return _assertThisInitialized(self); }\n\nfunction _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\"); } return self; }\n\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Date.prototype.toString.call(Reflect.construct(Date, [], function () {})); return true; } catch (e) { return false; } }\n\nfunction _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }\n\nimport { oneLineTrim } from \"common-tags\";\nimport { Component } from \"../component\";\nimport { parseData, XYPlot } from \"../plot\";\nexport var BaseChart = /*#__PURE__*/function (_Component) {\n  _inherits(BaseChart, _Component);\n\n  var _super = _createSuper(BaseChart);\n\n  function BaseChart() {\n    var _this;\n\n    _classCallCheck(this, BaseChart);\n\n    _this = _super.apply(this, arguments);\n    _this.flipped = false;\n    _this.inverted = false;\n    return _this;\n  }\n\n  _createClass(BaseChart, [{\n    key: \"willRender\",\n    value: function willRender() {\n      var dataProp = this.prop.data;\n\n      if (this.$parent instanceof XYPlot) {\n        this.inheritData();\n        this.columnWidth = this.$parent.columnWidth;\n        this.flipped = this.$parent.flipped;\n        this.inverted = this.$parent.inverted;\n      } else if (Array.isArray(dataProp)) {\n        this.data = parseData(this, dataProp, this.prop.dataHandler);\n      } else {\n        throw new Error(\"Chart: please supply data.\");\n      }\n    }\n  }, {\n    key: \"inheritData\",\n    value: function inheritData() {\n      var _this2 = this;\n\n      var dataProp = this.prop.data;\n      var $p = this.$parent;\n\n      if ($p.hasMultipleData) {\n        var getData = function getData(k) {\n          if (typeof k !== \"string\") {\n            throw new Error(\"The chart required a non-string data key \\\"\".concat(k, \"\\\". Data keys should be strings.\"));\n          }\n\n          if (!(k in _this2.$parent.data)) {\n            throw new Error(\"The chart required a data key \\\"\".concat(k, \"\\\", but it doesn't exist in the plot.\"));\n          }\n\n          return _this2.$parent.data[k];\n        };\n\n        if (typeof dataProp === \"string\") {\n          this.data = getData(dataProp);\n        } else if (Array.isArray(dataProp)) {\n          this.data = {};\n          dataProp.forEach(function (p) {\n            return _this2.data[p] = getData(p);\n          });\n        } else {\n          throw new Error(oneLineTrim(_templateObject()));\n        }\n      } else {\n        this.data = $p.data;\n      }\n    }\n  }, {\n    key: \"propValue\",\n    value: function propValue(name, d, i, g) {\n      var val = this.prop[name];\n      return typeof val === \"function\" ? val.call(null, d, i, g) : val;\n    }\n  }, {\n    key: \"getAnchor\",\n    value: function getAnchor() {\n      return this.flipped ? (this.inverted ? 16\n      /* Left */\n      : 64\n      /* Right */\n      ) | 4\n      /* Middle */\n      : (this.inverted ? 2\n      /* Top */\n      : 8\n      /* Bottom */\n      ) | 32\n      /* Center */\n      ;\n    }\n  }, {\n    key: \"getX\",\n    value: function getX(value) {\n      return this._scale(value, !this.flipped);\n    }\n  }, {\n    key: \"getY\",\n    value: function getY(value) {\n      return this._scale(value, this.flipped);\n    }\n  }, {\n    key: \"getWidth\",\n    value: function getWidth() {\n      return this.prop.columnWidth || this.columnWidth;\n    }\n  }, {\n    key: \"flippedOpts\",\n    value: function flippedOpts(opts) {\n      var _this3 = this;\n\n      var result = {};\n      Object.keys(FLIP_OPT_MAP).forEach(function (k) {\n        var key = _this3.flipped ? FLIP_OPT_MAP[k] : k;\n        result[key] = opts[k] || 0;\n      });\n      return result;\n    }\n  }, {\n    key: \"getHeight\",\n    value: function getHeight(value, offset) {\n      var h = this._scale(value + offset, this.flipped) - this._scale(offset, this.flipped);\n\n      return this.inverted ? h : -h;\n    }\n  }]);\n\n  return BaseChart;\n}(Component);\nvar FLIP_OPT_MAP = {\n  x: \"y\",\n  y: \"x\",\n  width: \"height\",\n  height: \"width\",\n  x1: \"y1\",\n  x2: \"y2\",\n  y1: \"x1\",\n  y2: \"x2\"\n};","map":null,"metadata":{},"sourceType":"module"}