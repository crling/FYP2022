{"ast":null,"code":"function _typeof(obj) { \"@babel/helpers - typeof\"; if (typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; }; } return _typeof(obj); }\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }\n\nfunction _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }\n\nfunction _inherits(subClass, superClass) { if (typeof superClass !== \"function\" && superClass !== null) { throw new TypeError(\"Super expression must either be null or a function\"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }\n\nfunction _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }\n\nfunction _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }\n\nfunction _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === \"object\" || typeof call === \"function\")) { return call; } return _assertThisInitialized(self); }\n\nfunction _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\"); } return self; }\n\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Date.prototype.toString.call(Reflect.construct(Date, [], function () {})); return true; } catch (e) { return false; } }\n\nfunction _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }\n\nimport mouse from \"../utils/mouse\";\nimport { Behavior } from \"./behavior\";\n\nvar Zoom = /*#__PURE__*/function (_Behavior) {\n  _inherits(Zoom, _Behavior);\n\n  var _super = _createSuper(Zoom);\n\n  function Zoom() {\n    var _this;\n\n    _classCallCheck(this, Zoom);\n\n    _this = _super.apply(this, arguments);\n    _this.factor = 1;\n    _this.isMoving = false;\n    _this.mousePos = [0, 0];\n    _this.events = [\"wheel\", \"mousedown\", \"mousemove\", \"mouseup\"];\n\n    _this.mouseup = function (ev) {\n      _this.isMoving = false;\n    };\n\n    return _this;\n  }\n\n  _createClass(Zoom, [{\n    key: \"init\",\n    value: function init(op) {\n      this.direction = op.direction || \"x\";\n\n      switch (this.direction) {\n        case \"x\":\n          this.rangeX = this.currRangeX = op.rangeX;\n          break;\n\n        case \"y\":\n          this.rangeY = this.currRangeY = op.rangeY;\n          break;\n\n        case \"xy\":\n          this.rangeX = this.currRangeX = op.rangeX;\n          this.rangeY = this.currRangeY = op.rangeY;\n          break;\n      }\n\n      if (this.direction !== \"native\" && !this.rangeX && !this.rangeY) {\n        throw Error(\"Zoom: range expected\");\n      }\n\n      this.minResolution = op.minResolution || 1;\n      this.handler = op.onZoom;\n      this.factor = op.factor || 1;\n    }\n  }, {\n    key: \"updateProps\",\n    value: function updateProps(op) {\n      if (op.currentRangeX) this.currRangeX = op.currentRangeX;\n      if (op.currentRangeY) this.currRangeY = op.currentRangeY;\n      if (op.minResolution) this.minResolution = op.minResolution;\n    }\n  }, {\n    key: \"wheel\",\n    value: function wheel(ev) {\n      var _this2 = this;\n\n      ev.stopPropagation();\n      ev.preventDefault();\n      var gSize = this.sizeX || [0, this.el.$geometry.width];\n      var gWidth = gSize[1] - gSize[0];\n      var currWidth = this.currRangeX[1] - this.currRangeX[0];\n      var origWidth = this.rangeX[1] - this.rangeX[0];\n      var maxK = origWidth / (this.minResolution * gWidth);\n      var currK = origWidth / currWidth;\n      var delta = ev.deltaY;\n      var k = currK - delta * this.factor * 0.05;\n      if (k < 1) k = 1;\n      if (k > maxK) k = maxK;\n      if (currK === k) return;\n      var mousePos = mouse(this.el, ev);\n      var kx = (mousePos[0] - gSize[0]) / gWidth;\n      var anchor = this.currRangeX[0] + currWidth * kx;\n      var len = (this.rangeX[1] - this.rangeX[0]) / k;\n      this.updateRange(anchor - kx * len, anchor + (1 - kx) * len);\n\n      if (this.handler) {\n        this.el.$v.transaction(function () {\n          _this2.handler.call(_this2.el, _this2.currRangeX);\n        });\n      }\n    }\n  }, {\n    key: \"mousedown\",\n    value: function mousedown(ev) {\n      this.isMoving = true;\n      this.mousePos = mouse(this.el, ev);\n    }\n  }, {\n    key: \"mousemove\",\n    value: function mousemove(ev) {\n      var _this3 = this;\n\n      if (!this.isMoving) return;\n      var m = mouse(this.el, ev);\n      var gSize = this.sizeX || [0, this.el.$geometry.width];\n      var gWidth = gSize[1] - gSize[0];\n      var currWidth = this.currRangeX[1] - this.currRangeX[0];\n      var delta = (this.mousePos[0] - m[0]) * (currWidth / gWidth);\n      this.updateRange(this.currRangeX[0] + delta, this.currRangeX[1] + delta);\n      this.mousePos = m;\n\n      if (this.handler) {\n        this.el.$v.transaction(function () {\n          _this3.handler.call(_this3.el, _this3.currRangeX);\n        });\n      }\n    }\n  }, {\n    key: \"updateRange\",\n    value: function updateRange(l, r) {\n      if (l < this.rangeX[0]) {\n        var o = this.rangeX[0] - l;\n        l += o;\n        r += o;\n      }\n\n      if (r > this.rangeX[1]) {\n        var _o = r - this.rangeX[1];\n\n        l -= _o;\n        r -= _o;\n      }\n\n      this.currRangeX = [l, r];\n    }\n  }]);\n\n  return Zoom;\n}(Behavior);\n\nexport { Zoom as default };","map":null,"metadata":{},"sourceType":"module"}