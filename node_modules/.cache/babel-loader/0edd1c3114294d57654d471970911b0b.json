{"ast":null,"code":"function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nfunction _templateObject() {\n  var data = _taggedTemplateLiteral([\"\\n        XYPlot{\\n            @props prop\\n            height = 30 + prop.plotSize[1]\\n            width = 35 + prop.plotSize[0]\\n            padding-l = 35; padding-b = 30\\n            @yield background default {\\n                Rect.full {\\n                    fill = \\\"none\\\"; strokeWidth = 1; stroke = \\\"black\\\"\\n                }\\n            }\\n            @yield content with prop.data\\n            @yield leftAxis default {\\n            @if prop.yAxisRotated {\\n                Axis(\\\"left\\\") {\\n                    :label(tick) {\\n                        Text(tick.value) {\\n                            x = -5; anchor = @anchor(\\\"c\\\", \\\"b\\\")\\n                            rotation = @rotate(-90)\\n                            fontSize = prop.tickFontSize\\n                        }\\n                    }\\n                }\\n            } @else {\\n                Component {\\n                    // @expr console.log(\\\"????\\\")\\n                }\\n                Axis(\\\"left\\\") {\\n                    label.fontSize = prop.tickFontSize\\n                }\\n            }\\n            }\\n            @yield bottomAxis default {\\n                @if prop.xAxisRotated {\\n                    Axis(\\\"bottom\\\") {\\n                        y = 100%\\n                        :label(tick) {\\n                            Text(tick.value) {\\n                                @let tickX = @scaled-x(tick.value)\\n                                @let tickY = 5\\n                                behavior:drag {\\n                                    direction = \\\"polar\\\"\\n                                    origin = [tickX, tickY]\\n                                    onDrag = @bind(adjustLabel)\\n                                }\\n                                y = 5; anchor = @anchor(\\\"r\\\", \\\"m\\\")\\n                                rotation = @rotate(-xAxisRotation)\\n                                fontSize = prop.tickFontSize\\n                            }\\n                        }\\n                    }\\n                } @else {\\n                    Component {\\n                        // @expr console.log(\\\"????\\\")\\n                    }\\n                    Axis(\\\"bottom\\\"){\\n                        y = 100%\\n                        label.fontSize = prop.tickFontSize\\n                    }\\n                }\\n            }\\n            EditText {\\n                text = prop.flip ? prop.xLabel : prop.yLabel\\n                x = -prop.labelOffsetVer; y = 50%; rotation = @rotate(-90)\\n                fontSize = prop.labelFontSize\\n                anchor = @anchor(\\\"m\\\", \\\"c\\\")\\n            }\\n            EditText {\\n                text = prop.flip ? prop.yLabel : prop.xLabel\\n                x = 50%; y = @geo(100,prop.labelOffsetHor)\\n                fontSize = prop.labelFontSize\\n                anchor = @anchor(\\\"t\\\", \\\"c\\\")\\n            }\\n        }\"]);\n\n  _templateObject = function _templateObject() {\n    return data;\n  };\n\n  return data;\n}\n\nfunction _taggedTemplateLiteral(strings, raw) { if (!raw) { raw = strings.slice(0); } return Object.freeze(Object.defineProperties(strings, { raw: { value: Object.freeze(raw) } })); }\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }\n\nfunction _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }\n\nfunction _get(target, property, receiver) { if (typeof Reflect !== \"undefined\" && Reflect.get) { _get = Reflect.get; } else { _get = function _get(target, property, receiver) { var base = _superPropBase(target, property); if (!base) return; var desc = Object.getOwnPropertyDescriptor(base, property); if (desc.get) { return desc.get.call(receiver); } return desc.value; }; } return _get(target, property, receiver || target); }\n\nfunction _superPropBase(object, property) { while (!Object.prototype.hasOwnProperty.call(object, property)) { object = _getPrototypeOf(object); if (object === null) break; } return object; }\n\nfunction _inherits(subClass, superClass) { if (typeof superClass !== \"function\" && superClass !== null) { throw new TypeError(\"Super expression must either be null or a function\"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }\n\nfunction _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }\n\nfunction _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }\n\nfunction _possibleConstructorReturn(self, call) { if (call && (typeof call === \"object\" || typeof call === \"function\")) { return call; } return _assertThisInitialized(self); }\n\nfunction _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\"); } return self; }\n\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Date.prototype.toString.call(Reflect.construct(Date, [], function () {})); return true; } catch (e) { return false; } }\n\nfunction _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }\n\nimport { Component } from \"crux/dist/element\";\nexport var GridPlot = /*#__PURE__*/function (_Component) {\n  _inherits(GridPlot, _Component);\n\n  var _super = _createSuper(GridPlot);\n\n  function GridPlot() {\n    var _this;\n\n    _classCallCheck(this, GridPlot);\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    _this = _super.call.apply(_super, [this].concat(args));\n    _this.xAxisRotation = 45;\n    return _this;\n  }\n\n  _createClass(GridPlot, [{\n    key: \"render\",\n    value: function render() {\n      return this.t(_templateObject());\n    }\n  }, {\n    key: \"adjustLabel\",\n    value: function adjustLabel(ev, el, delta, cuur) {\n      this.xAxisRotation = cuur[0] * 180 / Math.PI;\n      this.redraw();\n    }\n  }, {\n    key: \"defaultProp\",\n    value: function defaultProp() {\n      return _objectSpread(_objectSpread({}, _get(_getPrototypeOf(GridPlot.prototype), \"defaultProp\", this).call(this)), {}, {\n        xLabel: \"\",\n        yLabel: \"\",\n        labelFontSize: 12,\n        tickFontSize: 10,\n        labelOffsetVer: 25,\n        labelOffsetHor: 15\n      });\n    }\n  }]);\n\n  return GridPlot;\n}(Component);\nexport var generateGridPlotConfig = function generateGridPlotConfig(v) {\n  return {\n    id: \"plot-st\",\n    title: \"Plot Settings\",\n    layout: \"single-page\",\n    view: {\n      type: \"list\",\n      items: [{\n        title: \"plot width\",\n        type: \"input\",\n        value: {\n          current: v.data.config.plotSize[0],\n          callback: function callback(d) {\n            v.data.config.plotSize[0] = parseFloat(d);\n            v.forceRedraw = true;\n            v.run();\n          }\n        }\n      }, {\n        title: \"plot height\",\n        type: \"input\",\n        value: {\n          current: v.data.config.plotSize[1],\n          callback: function callback(d) {\n            v.data.config.plotSize[1] = parseFloat(d);\n            v.forceRedraw = true;\n            v.run();\n          }\n        }\n      }, {\n        title: \"label font size\",\n        type: \"input\",\n        value: {\n          current: v.data.config.labelFontSize,\n          callback: function callback(d) {\n            v.data.config.labelFontSize = parseFloat(d);\n            v.forceRedraw = true;\n            v.run();\n          }\n        }\n      }, {\n        title: \"tick font size\",\n        type: \"input\",\n        value: {\n          current: v.data.config.tickFontSize,\n          callback: function callback(d) {\n            v.data.config.tickFontSize = parseFloat(d);\n            v.forceRedraw = true;\n            v.run();\n          }\n        }\n      }, {\n        title: \"rotate x axis labels\",\n        type: \"checkbox\",\n        value: {\n          current: v.data.config.xAxisRotated,\n          callback: function callback(d) {\n            v.data.config.xAxisRotated = d;\n            v.forceRedraw = true;\n            v.run();\n          }\n        }\n      }]\n    }\n  };\n};","map":{"version":3,"sources":["/Users/wangzhenyu/Desktop/fyp_workspace/meta_platform/app/javascript/oviz-components/grid-plot.ts"],"names":["Component","GridPlot","xAxisRotation","t","ev","el","delta","cuur","Math","PI","redraw","xLabel","yLabel","labelFontSize","tickFontSize","labelOffsetVer","labelOffsetHor","generateGridPlotConfig","v","id","title","layout","view","type","items","value","current","data","config","plotSize","callback","d","parseFloat","forceRedraw","run","xAxisRotated"],"mappings":"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","sourcesContent":["import { Component, XYPlotOption } from \"crux/dist/element\";\n\nexport interface GridPlotOption extends XYPlotOption {\n    xLabel: string;\n    yLabel: string;\n    plotSize: [number, number]; // [width, height]\n    legend: any;\n    discreteCategory: boolean;\n    yAxisRotated: boolean;\n    xAxisRotated: boolean;\n    labelOffsetVer: number;\n    labelOffsetHor: number;\n    labelFontSize: number;\n    tickFontSize: number;\n}\n\nexport class GridPlot extends Component<GridPlotOption> {\n\n    protected xAxisRotation = 45;\n    public render() {\n        return this.t`\n        XYPlot{\n            @props prop\n            height = 30 + prop.plotSize[1]\n            width = 35 + prop.plotSize[0]\n            padding-l = 35; padding-b = 30\n            @yield background default {\n                Rect.full {\n                    fill = \"none\"; strokeWidth = 1; stroke = \"black\"\n                }\n            }\n            @yield content with prop.data\n            @yield leftAxis default {\n            @if prop.yAxisRotated {\n                Axis(\"left\") {\n                    :label(tick) {\n                        Text(tick.value) {\n                            x = -5; anchor = @anchor(\"c\", \"b\")\n                            rotation = @rotate(-90)\n                            fontSize = prop.tickFontSize\n                        }\n                    }\n                }\n            } @else {\n                Component {\n                    // @expr console.log(\"????\")\n                }\n                Axis(\"left\") {\n                    label.fontSize = prop.tickFontSize\n                }\n            }\n            }\n            @yield bottomAxis default {\n                @if prop.xAxisRotated {\n                    Axis(\"bottom\") {\n                        y = 100%\n                        :label(tick) {\n                            Text(tick.value) {\n                                @let tickX = @scaled-x(tick.value)\n                                @let tickY = 5\n                                behavior:drag {\n                                    direction = \"polar\"\n                                    origin = [tickX, tickY]\n                                    onDrag = @bind(adjustLabel)\n                                }\n                                y = 5; anchor = @anchor(\"r\", \"m\")\n                                rotation = @rotate(-xAxisRotation)\n                                fontSize = prop.tickFontSize\n                            }\n                        }\n                    }\n                } @else {\n                    Component {\n                        // @expr console.log(\"????\")\n                    }\n                    Axis(\"bottom\"){\n                        y = 100%\n                        label.fontSize = prop.tickFontSize\n                    }\n                }\n            }\n            EditText {\n                text = prop.flip ? prop.xLabel : prop.yLabel\n                x = -prop.labelOffsetVer; y = 50%; rotation = @rotate(-90)\n                fontSize = prop.labelFontSize\n                anchor = @anchor(\"m\", \"c\")\n            }\n            EditText {\n                text = prop.flip ? prop.yLabel : prop.xLabel\n                x = 50%; y = @geo(100,prop.labelOffsetHor)\n                fontSize = prop.labelFontSize\n                anchor = @anchor(\"t\", \"c\")\n            }\n        }`;\n    }\n\n    protected adjustLabel(ev, el, delta, cuur) {\n        this.xAxisRotation = cuur[0] * 180 / Math.PI;\n        this.redraw();\n    }\n\n    public defaultProp() {\n        return {\n            ...super.defaultProp(),\n            xLabel: \"\",\n            yLabel: \"\",\n            labelFontSize: 12,\n            tickFontSize: 10,\n            labelOffsetVer: 25,\n            labelOffsetHor: 15,\n        };\n    }\n}\n\nexport const generateGridPlotConfig = (v) =>  ({\n    id: \"plot-st\",\n    title: \"Plot Settings\",\n    layout: \"single-page\",\n    view: {\n        type: \"list\",\n        items: [\n            {\n                title: \"plot width\",\n                type: \"input\",\n                value: {\n                    current: v.data.config.plotSize[0],\n                    callback(d) {\n                        v.data.config.plotSize[0] = parseFloat(d);\n                        v.forceRedraw = true;\n                        v.run();\n                    },\n                },\n            },\n            {\n                title: \"plot height\",\n                type: \"input\",\n                value: {\n                    current: v.data.config.plotSize[1],\n                    callback(d) {\n                        v.data.config.plotSize[1] = parseFloat(d);\n                        v.forceRedraw = true;\n                        v.run();\n                    },\n                },\n            },\n            {\n                title: \"label font size\",\n                type: \"input\",\n                value: {\n                    current: v.data.config.labelFontSize,\n                    callback(d) {\n                        v.data.config.labelFontSize = parseFloat(d);\n                        v.forceRedraw = true;\n                        v.run();\n                    },\n                },\n            },\n            {\n                title: \"tick font size\",\n                type: \"input\",\n                value: {\n                    current: v.data.config.tickFontSize,\n                    callback(d) {\n                        v.data.config.tickFontSize = parseFloat(d);\n                        v.forceRedraw = true;\n                        v.run();\n                    },\n                },\n            },\n            {\n                title: \"rotate x axis labels\",\n                type: \"checkbox\",\n                value: {\n                    current: v.data.config.xAxisRotated,\n                    callback(d) {\n                        v.data.config.xAxisRotated = d;\n                        v.forceRedraw = true;\n                        v.run();\n                    },\n                },\n            },\n        ],\n    },\n});\n"]},"metadata":{},"sourceType":"module"}