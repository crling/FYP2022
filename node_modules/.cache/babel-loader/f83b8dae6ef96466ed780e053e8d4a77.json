{"ast":null,"code":"function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }\n\nfunction _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }\n\nexport function stackedLayout(data) {\n  return new StackedLayout(data);\n}\nexport var StackedLayout = /*#__PURE__*/function () {\n  function StackedLayout(data) {\n    _classCallCheck(this, StackedLayout);\n\n    this._data = data;\n  }\n\n  _createClass(StackedLayout, [{\n    key: \"value\",\n    value: function value(fn) {\n      this._value = fn;\n      return this;\n    }\n  }, {\n    key: \"extent\",\n    value: function extent(fn) {\n      this._extentOf = fn;\n      return this;\n    }\n  }, {\n    key: \"run\",\n    value: function run() {\n      var _this = this;\n\n      if (!this._value || !this._extentOf) {\n        throw new Error(\"StackedLayout: value and extent must be supplied.\");\n      } // sort\n\n\n      this._data.sort(function (a, b) {\n        return _this._value(a) - _this._value(b);\n      }); // stack\n\n\n      var currentLayer = 0;\n      var layerMaxValue = [-Number.MAX_VALUE]; // process\n\n      var layers = [[]];\n\n      this._data.forEach(function (d) {\n        var layerExtent = _this._extentOf.length > 1;\n        var extent;\n\n        if (!layerExtent) {\n          extent = _this._extentOf(d);\n        }\n\n        var placedLayer = -1;\n\n        for (var layer = 0; layer <= currentLayer; layer += 1) {\n          if (layerExtent) {\n            extent = _this._extentOf(d, layer);\n          }\n\n          if (layerMaxValue[layer] < extent[0]) {\n            // place\n            layerMaxValue[layer] = extent[1];\n            placedLayer = layer;\n            break;\n          }\n        }\n\n        if (placedLayer < 0) {\n          currentLayer += 1;\n          layerMaxValue[currentLayer] = extent[1];\n          placedLayer = currentLayer;\n          layers[placedLayer] = [];\n        }\n\n        layers[placedLayer].push(d);\n      });\n\n      return layers;\n    }\n  }]);\n\n  return StackedLayout;\n}();","map":null,"metadata":{},"sourceType":"module"}