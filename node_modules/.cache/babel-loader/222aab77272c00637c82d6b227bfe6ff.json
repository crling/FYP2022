{"ast":null,"code":"function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }\n\nfunction _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }\n\nfunction _inherits(subClass, superClass) { if (typeof superClass !== \"function\" && superClass !== null) { throw new TypeError(\"Super expression must either be null or a function\"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }\n\nfunction _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }\n\nfunction _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }\n\nfunction _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === \"object\" || typeof call === \"function\")) { return call; } return _assertThisInitialized(self); }\n\nfunction _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\"); } return self; }\n\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Date.prototype.toString.call(Reflect.construct(Date, [], function () {})); return true; } catch (e) { return false; } }\n\nfunction _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }\n\nfunction _typeof(obj) { \"@babel/helpers - typeof\"; if (typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; }; } return _typeof(obj); }\n\nvar __decorate = this && this.__decorate || function (decorators, target, key, desc) {\n  var c = arguments.length,\n      r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc,\n      d;\n  if ((typeof Reflect === \"undefined\" ? \"undefined\" : _typeof(Reflect)) === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);else for (var i = decorators.length - 1; i >= 0; i--) {\n    if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n  }\n  return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\n\nimport { useTemplate } from \"../../ext/decorator\";\nimport { BaseChart } from \"./base-chart\";\nvar a1 = [];\nvar a2 = [];\nvar a3 = [];\n\nvar Area =\n/** @class */\nfunction () {\n  var Area = /*#__PURE__*/function (_BaseChart) {\n    _inherits(Area, _BaseChart);\n\n    var _super = _createSuper(Area);\n\n    function Area() {\n      var _this;\n\n      _classCallCheck(this, Area);\n\n      _this = _super.apply(this, arguments);\n      _this.idx = 0;\n      _this.bufferLength = 0;\n      _this._hasMinValue = false;\n      return _this;\n    }\n\n    _createClass(Area, [{\n      key: \"init\",\n      value: function init() {\n        if (window.TextDecoder) {\n          this._decoder = new TextDecoder(\"utf-8\");\n        }\n      }\n    }, {\n      key: \"updateData\",\n      value: function updateData() {\n        var _this2 = this;\n\n        this._hasMinValue = false;\n        var value = this.data.values;\n        var xOffset = this.prop.xOffset || 0;\n        value.forEach(function (d, i) {\n          var minValue = 0;\n\n          if (\"minValue\" in d && d.minValue !== 0) {\n            _this2._hasMinValue = true;\n            minValue = _this2.getY(d.minValue);\n          }\n\n          a1[i] = _this2.getX(d.pos + xOffset);\n          a2[i] = _this2.getY(d.value);\n          a3[i] = minValue;\n        });\n      } // @ts-ignore\n\n    }, {\n      key: \"getPath\",\n      value: function getPath() {\n        this.updateData();\n        var len = this.data.values.length;\n        var yMin = this.getY(0); // generate path\n\n        this.idx = 0;\n\n        if (!this.buffer || this.buffer.length < len * 20) {\n          this.buffer = new Uint8Array(len * 20);\n          this.bufferLength = len * 20;\n        }\n\n        var buffer = this.buffer; // let path = `M${a1[0]},${yMin} `;\n\n        buffer[this.idx++] = 77;\n        this.toCharCode(buffer, a1[0]);\n        buffer[this.idx++] = 44;\n        this.toCharCode(buffer, yMin);\n        buffer[this.idx++] = 32;\n\n        for (var i = 0; i < len; i++) {\n          // path += `L${a1[i]},${a2[i]} `;\n          buffer[this.idx++] = 76;\n          this.toCharCode(buffer, a1[i]);\n          buffer[this.idx++] = 44;\n          this.toCharCode(buffer, a2[i]);\n          buffer[this.idx++] = 32;\n\n          if (this.idx > this.bufferLength - 30) {\n            this.growBuffer(this.bufferLength * 2);\n            buffer = this.buffer;\n          }\n        }\n\n        if (this._hasMinValue) {\n          for (var _i = len - 1; _i >= 0; _i--) {\n            // path += `L${a1[i]},${a3[i]} `;\n            buffer[this.idx++] = 76;\n            this.toCharCode(buffer, a1[_i]);\n            buffer[this.idx++] = 44;\n            this.toCharCode(buffer, a3[_i]);\n            buffer[this.idx++] = 32;\n\n            if (this.idx > this.bufferLength - 30) {\n              this.growBuffer(this.bufferLength * 2);\n              buffer = this.buffer;\n            }\n          }\n        } else {\n          buffer[this.idx++] = 76;\n          this.toCharCode(buffer, a1[len - 1]);\n          buffer[this.idx++] = 44;\n          this.toCharCode(buffer, yMin);\n          buffer[this.idx++] = 32;\n        } // path += `z`;\n\n\n        buffer[this.idx++] = 122;\n\n        if (this._decoder) {\n          return this._decoder.decode(buffer.subarray(0, this.idx));\n        } else {\n          return uint8ToString(buffer);\n        }\n      } // @ts-ignore\n\n    }, {\n      key: \"getCanvasPath\",\n      value: function getCanvasPath(path) {\n        this.updateData();\n        var len = this.data.values.length;\n        var yMin = this.getY(0); // generate path\n\n        path.moveTo(a1[0], yMin);\n\n        for (var i = 0; i < len; i++) {\n          path.lineTo(a1[i], a2[i]);\n        }\n\n        if (this._hasMinValue) {\n          for (var _i2 = len - 1; _i2 >= 0; _i2--) {\n            path.lineTo(a1[_i2], a3[_i2]);\n          }\n        }\n\n        path.closePath();\n      }\n    }, {\n      key: \"growBuffer\",\n      value: function growBuffer(len) {\n        console.assert(this.buffer);\n        if (!this.buffer) return;\n        var newBuffer = new Uint8Array(len);\n        newBuffer.set(this.buffer);\n        this.buffer = newBuffer;\n        this.bufferLength = len;\n      }\n    }, {\n      key: \"toCharCode\",\n      value: function toCharCode(buffer, num) {\n        if (num === 0) {\n          buffer[this.idx++] = 48; // 0\n\n          return;\n        } else if (num < 0) {\n          buffer[this.idx++] = 45; // -\n\n          num = -num;\n        }\n\n        var n = Math.round(num * 1000);\n        this.toCharCodeStep(buffer, 0, n);\n      }\n    }, {\n      key: \"toCharCodeStep\",\n      value: function toCharCodeStep(buffer, i, n) {\n        if (n < 1 && i > 3) return;\n        this.toCharCodeStep(buffer, i + 1, n / 10 >> 0);\n        buffer[this.idx++] = n % 10 + 48;\n        if (i === 3) buffer[this.idx++] = 46; // .\n      }\n    }]);\n\n    return Area;\n  }(BaseChart);\n\n  Area = __decorate([useTemplate(\"\\nComponent {\\n    Path {\\n        d = $v.isSVG ? getPath() : getCanvasPath.bind(this)\\n        fill = prop.fill || \\\"#aaa\\\"\\n        stroke = prop.stroke\\n        @props prop.pathOptions\\n    }\\n}\\n\")], Area);\n  return Area;\n}();\n\nexport { Area };\n\nfunction uint8ToString(u8a) {\n  var CHUNK_SZ = 0x8000;\n  var c = [];\n\n  for (var i = 0; i < u8a.length; i += CHUNK_SZ) {\n    if (u8a[i] === 0) break;\n    c.push(String.fromCharCode.apply(null, u8a.subarray(i, i + CHUNK_SZ)));\n  }\n\n  return c.join(\"\");\n}","map":null,"metadata":{},"sourceType":"module"}