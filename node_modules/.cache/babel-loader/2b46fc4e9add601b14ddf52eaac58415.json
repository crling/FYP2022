{"ast":null,"code":"import { NAME } from \"../tokens\";\nimport { parseBlockBody } from \"./block-body\";\nexport function parseChildren(p) {\n  p.expect(\":\");\n  var name = p.expect(NAME)[0];\n  p.skipSpaces();\n  var dataName = null;\n\n  if (p.peek() === \"(\") {\n    p.expect(\"\\\\(\");\n    p.skipSpaces();\n\n    if (p.peek() === \"{\") {\n      p.expect(\"{\");\n      dataName = p.consumeTill(\"}\").trim().split(\",\").map(function (s) {\n        return s.trim();\n      });\n\n      if (dataName.some(function (n) {\n        return !n.match(new RegExp(\"^\".concat(NAME, \"$\")));\n      })) {\n        p._error(\"names for the attached data is invalid: \\\"\".concat(dataName, \"\\\"\"));\n      }\n    } else {\n      dataName = p.expect(NAME, \"attached data\")[0];\n    }\n\n    p.skipSpaces();\n    p.expect(\"\\\\)\");\n  }\n\n  p.skipSpaces();\n  var block = {\n    type: \"children\",\n    name: name,\n    dataName: dataName,\n    localData: [],\n    children: [],\n    namedChildren: {}\n  };\n  parseBlockBody(p, block);\n  return block;\n}","map":null,"metadata":{},"sourceType":"module"}