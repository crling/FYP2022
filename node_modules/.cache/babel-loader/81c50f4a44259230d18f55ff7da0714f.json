{"ast":null,"code":"var _dMap, _color, _geoValue;\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nfunction _createForOfIteratorHelper(o, allowArrayLike) { var it; if (typeof Symbol === \"undefined\" || o[Symbol.iterator] == null) { if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === \"number\") { if (it) o = it; var i = 0; var F = function F() {}; return { s: F, n: function n() { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }, e: function e(_e2) { throw _e2; }, f: F }; } throw new TypeError(\"Invalid attempt to iterate non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\"); } var normalCompletion = true, didErr = false, err; return { s: function s() { it = o[Symbol.iterator](); }, n: function n() { var step = it.next(); normalCompletion = step.done; return step; }, e: function e(_e3) { didErr = true; err = _e3; }, f: function f() { try { if (!normalCompletion && it[\"return\"] != null) it[\"return\"](); } finally { if (didErr) throw err; } } }; }\n\nfunction _slicedToArray(arr, i) { return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray(arr, i) || _nonIterableRest(); }\n\nfunction _nonIterableRest() { throw new TypeError(\"Invalid attempt to destructure non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\"); }\n\nfunction _iterableToArrayLimit(arr, i) { if (typeof Symbol === \"undefined\" || !(Symbol.iterator in Object(arr))) return; var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i[\"return\"] != null) _i[\"return\"](); } finally { if (_d) throw _e; } } return _arr; }\n\nfunction _arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }\n\nfunction _typeof(obj) { \"@babel/helpers - typeof\"; if (typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; }; } return _typeof(obj); }\n\nfunction _toConsumableArray(arr) { return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _unsupportedIterableToArray(arr) || _nonIterableSpread(); }\n\nfunction _nonIterableSpread() { throw new TypeError(\"Invalid attempt to spread non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\"); }\n\nfunction _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === \"string\") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === \"Object\" && o.constructor) n = o.constructor.name; if (n === \"Map\" || n === \"Set\") return Array.from(o); if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }\n\nfunction _iterableToArray(iter) { if (typeof Symbol !== \"undefined\" && Symbol.iterator in Object(iter)) return Array.from(iter); }\n\nfunction _arrayWithoutHoles(arr) { if (Array.isArray(arr)) return _arrayLikeToArray(arr); }\n\nfunction _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }\n\nvar _any = Symbol(\"any\");\n\nvar _number = Symbol(\"number\");\n\nvar _string = Symbol(\"string\");\n\nvar _array = Symbol(\"array\");\n\nvar _object = Symbol(\"object\");\n\nvar _function = Symbol(\"function\");\n\nvar type = Symbol(\"type\");\n\nfunction fail(obj, t) {\n  var msg = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : \"\";\n  var prev = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : [];\n  var message = t === null ? msg : (msg ? \"\".concat(msg, \"; \") : \"\") + \"expected \".concat(d(t));\n  return [false, [{\n    obj: obj,\n    message: message\n  }].concat(_toConsumableArray(prev))];\n}\n\nfunction check(obj, t) {\n  if (t === _any) {\n    return [true];\n  } else if (t === _number) {\n    return typeof obj === \"number\" ? [true] : fail(obj, t);\n  } else if (t === _string) {\n    return typeof obj === \"string\" ? [true] : fail(obj, t);\n  } else if (t === _array) {\n    return Array.isArray(obj) ? [true] : fail(obj, t);\n  } else if (t === _object) {\n    return _typeof(obj) === \"object\" ? [true] : fail(obj, t);\n  } else if (t === _function) {\n    return typeof obj === \"function\" ? [true] : fail(obj, t);\n  } else if (Array.isArray(t)) {\n    if (!Array.isArray(obj)) return fail(obj, t, \"the value is not an array\");\n    if (obj.length !== t.length) return fail(obj, t, \"the array should have a length of \".concat(t.length));\n\n    for (var i = 0; i < obj.length; i++) {\n      var _check = check(obj[i], t[i]),\n          _check2 = _slicedToArray(_check, 2),\n          r = _check2[0],\n          s = _check2[1];\n\n      if (!r) return fail(obj, null, \"at index \".concat(i), s);\n    }\n\n    return [true];\n  } else {\n    if (typeof t === \"number\" || typeof t === \"string\") {\n      return obj === t ? [true] : fail(obj, t);\n    }\n\n    if (type in t) {\n      // type def\n      switch (t[type]) {\n        case \"optional\":\n          if (obj === null || obj === undefined) return [true];\n\n          var _check3 = check(obj, t.t),\n              _check4 = _slicedToArray(_check3, 2),\n              _r = _check4[0],\n              _s2 = _check4[1];\n\n          if (!_r) return [false, _s2];\n          return [true];\n\n        case \"arrayOf\":\n          if (!Array.isArray(obj)) return fail(obj, t, \"the value is not an array\");\n          if (t.len >= 0 && t.len !== obj.length) return fail(obj, t, \"the array should have a length of \".concat(t.len));\n\n          for (var _i2 = 0; _i2 < obj.length; _i2++) {\n            var _check5 = check(obj[_i2], t.t),\n                _check6 = _slicedToArray(_check5, 2),\n                _r2 = _check6[0],\n                _s3 = _check6[1];\n\n            if (!_r2) return fail(obj, null, \"at index \".concat(_i2), _s3);\n          }\n\n          return [true];\n\n        case \"enum\":\n          var _iterator = _createForOfIteratorHelper(t.t),\n              _step;\n\n          try {\n            for (_iterator.s(); !(_step = _iterator.n()).done;) {\n              var m = _step.value;\n              if (check(obj, m)[0]) return [true];\n            }\n          } catch (err) {\n            _iterator.e(err);\n          } finally {\n            _iterator.f();\n          }\n\n          return fail(obj, t);\n\n        case \"custom\":\n          var _t$checker = t.checker(obj),\n              _t$checker2 = _slicedToArray(_t$checker, 2),\n              r_ = _t$checker2[0],\n              s_ = _t$checker2[1];\n\n          return r_ ? [true] : fail(obj, t, s_);\n\n        default:\n          return fail(obj, null, \"unknown format\");\n      }\n    } else {\n      // object literial\n      if (_typeof(obj) !== \"object\") return fail(obj, t, \"the value is not an object\");\n\n      for (var _i3 = 0, _Object$keys = Object.keys(t); _i3 < _Object$keys.length; _i3++) {\n        var k = _Object$keys[_i3];\n        if (!(k in obj)) return fail(obj, t, \"key \".concat(k, \" does not exist\"));\n\n        var _check7 = check(obj[k], t[k]),\n            _check8 = _slicedToArray(_check7, 2),\n            _r3 = _check8[0],\n            _s4 = _check8[1];\n\n        if (!_r3) return fail(obj, null, \"at key \\\"\".concat(k, \"\\\"\"), _s4);\n      }\n\n      return [true];\n    }\n  }\n}\n\nvar dMap = (_dMap = {}, _defineProperty(_dMap, _any, \"any\"), _defineProperty(_dMap, _number, \"number\"), _defineProperty(_dMap, _string, \"string\"), _defineProperty(_dMap, _array, \"Array\"), _defineProperty(_dMap, _object, \"Object\"), _defineProperty(_dMap, _function, \"Function\"), _dMap);\n\nfunction d(t) {\n  if (_typeof(t) === \"symbol\" && t in dMap) return dMap[t];\n  if (typeof t === \"string\") return \"\\\"\".concat(t, \"\\\"\");\n  if (typeof t === \"number\") return \"\".concat(t);\n\n  if (Array.isArray(t)) {\n    return \"[\".concat(t.map(function (x) {\n      return d(x);\n    }).join(\", \"), \"]\");\n  } // @ts-ignore\n\n\n  if (type in t) {\n    switch (t[type]) {\n      case \"optional\":\n        return \"\".concat(d(t.t), \", null or undefined\");\n\n      case \"arrayOf\":\n        return \"Array<\".concat(d(t.t), \">\");\n\n      case \"enum\":\n        return \"(any of \".concat(t.t.map(function (x) {\n          return d(x);\n        }).join(\", \"), \")\");\n\n      case \"custom\":\n        return t.desc;\n\n      default:\n        return \"Unknown format\";\n    }\n  } else {\n    return \"{ \".concat(Object.entries(t).map(function (_ref) {\n      var _ref2 = _slicedToArray(_ref, 2),\n          k = _ref2[0],\n          v = _ref2[1];\n\n      return \"\".concat(k, \": \").concat(d(v));\n    }).join(\", \"), \" }\");\n  }\n}\n\nfunction trace(msg) {\n  var indent = 0;\n  var str = \"\";\n\n  var _iterator2 = _createForOfIteratorHelper(msg),\n      _step2;\n\n  try {\n    for (_iterator2.s(); !(_step2 = _iterator2.n()).done;) {\n      var m = _step2.value;\n      var objDesc = _typeof(m.obj) === \"object\" || Array.isArray(m.obj) ? JSON.stringify(m.obj) : m.obj;\n\n      for (var i = indent; i > 0; i--) {\n        str += \"    \";\n      }\n\n      str += \"When checking \".concat(objDesc, \": \\n\");\n\n      for (var _i4 = indent; _i4 > 0; _i4--) {\n        str += \"    \";\n      }\n\n      str += m.message + \"\\n\";\n      indent += 1;\n    }\n  } catch (err) {\n    _iterator2.e(err);\n  } finally {\n    _iterator2.f();\n  }\n\n  return str;\n}\n\nvar color = (_color = {}, _defineProperty(_color, type, \"custom\"), _defineProperty(_color, \"checker\", function checker(obj) {\n  return [typeof obj === \"string\" || obj instanceof CanvasGradient];\n}), _defineProperty(_color, \"desc\", \"color\"), _color);\nvar geoValue = (_geoValue = {}, _defineProperty(_geoValue, type, \"custom\"), _defineProperty(_geoValue, \"checker\", function checker(obj) {\n  return [typeof obj === \"number\" || _typeof(obj) === \"object\" && \"value\" in obj && \"unit\" in obj];\n}), _defineProperty(_geoValue, \"desc\", \"geometry value\"), _geoValue);\nvar Type = {\n  any: _any,\n  \"function\": _function,\n  number: _number,\n  string: _string,\n  array: _array,\n  object: _object,\n  color: color,\n  geoValue: geoValue,\n  arrayOf: function arrayOf(t) {\n    var _ref3;\n\n    var len = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : -1;\n    return _ref3 = {}, _defineProperty(_ref3, type, \"arrayOf\"), _defineProperty(_ref3, \"t\", t), _defineProperty(_ref3, \"len\", len), _ref3;\n  },\n  anyOf: function anyOf() {\n    var _ref4;\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    return _ref4 = {}, _defineProperty(_ref4, type, \"enum\"), _defineProperty(_ref4, \"t\", args), _ref4;\n  },\n  optional: function optional(t) {\n    var _ref5;\n\n    return _ref5 = {}, _defineProperty(_ref5, type, \"optional\"), _defineProperty(_ref5, \"t\", t), _ref5;\n  },\n  custom: function custom(checker) {\n    var _ref6;\n\n    var desc = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : \"custom value\";\n    return _ref6 = {}, _defineProperty(_ref6, type, \"custom\"), _defineProperty(_ref6, \"checker\", checker), _defineProperty(_ref6, \"desc\", desc), _ref6;\n  },\n  check: check,\n  trace: trace\n};\nexport default Type;","map":null,"metadata":{},"sourceType":"module"}