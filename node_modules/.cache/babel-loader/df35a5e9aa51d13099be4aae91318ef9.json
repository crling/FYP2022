{"ast":null,"code":"function _slicedToArray(arr, i) { return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray(arr, i) || _nonIterableRest(); }\n\nfunction _nonIterableRest() { throw new TypeError(\"Invalid attempt to destructure non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\"); }\n\nfunction _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === \"string\") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === \"Object\" && o.constructor) n = o.constructor.name; if (n === \"Map\" || n === \"Set\") return Array.from(o); if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }\n\nfunction _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }\n\nfunction _iterableToArrayLimit(arr, i) { if (typeof Symbol === \"undefined\" || !(Symbol.iterator in Object(arr))) return; var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i[\"return\"] != null) _i[\"return\"](); } finally { if (_d) throw _e; } } return _arr; }\n\nfunction _arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }\n\nfunction _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }\n\nimport { Color } from \"../color\";\nexport var ColorSchemeCategory = /*#__PURE__*/function () {\n  function ColorSchemeCategory(data, initialColor) {\n    var _this = this;\n\n    _classCallCheck(this, ColorSchemeCategory);\n\n    if (initialColor && Array.isArray(data)) {\n      this.categories = data;\n      var n = this.categories.length;\n      var gap1Count = n / 2;\n      var gap2Count = gap1Count + n % 2;\n      var gap1Size = 360.0 / (gap1Count + gap2Count * 1.25);\n      var gap2Sise = gap1Size * 1.618;\n      var a = 0;\n      var flag = false;\n\n      var _initialColor = _slicedToArray(initialColor, 3),\n          ih = _initialColor[0],\n          is = _initialColor[1],\n          il = _initialColor[2];\n\n      this.colors = {};\n      this.categories.forEach(function (c, i) {\n        var h = ih + a;\n        if (h > 360) h -= 360;\n        _this.colors[c] = \"hsl(\".concat(h, \",\").concat(is + (flag ? 5 : 5), \"%,\").concat(il + (flag ? 5 : -5), \"%)\");\n        a += flag ? gap1Size : gap2Sise;\n        flag = !flag;\n      });\n    } else {\n      this.colors = data;\n      this.categories = Object.keys(data);\n    }\n  }\n\n  _createClass(ColorSchemeCategory, [{\n    key: \"get\",\n    value: function get(category) {\n      return this.colors[category] || \"#000\";\n    }\n  }, {\n    key: \"legendData\",\n    value: function legendData() {\n      var _this2 = this;\n\n      return this.categories.map(function (c) {\n        return {\n          label: c.toString(),\n          fill: _this2.get(c)\n        };\n      });\n    }\n  }], [{\n    key: \"create\",\n    value: function create(k, colors, initialColor) {\n      var colorDict;\n      var cat = typeof k === \"number\" ? Array.from(Array(k)).map(function (_, i) {\n        return i;\n      }) : k;\n\n      if (colors) {\n        var len = colors.length;\n        colorDict = {};\n\n        for (var i = 0; i < cat.length; i++) {\n          colorDict[cat[i]] = colors[i % len];\n        }\n\n        return new ColorSchemeCategory(colorDict);\n      } else {\n        colorDict = cat;\n        var ic = initialColor ? Color.literal(initialColor).hsl : [200, 80, 50];\n        return new ColorSchemeCategory(colorDict, ic);\n      }\n    }\n  }]);\n\n  return ColorSchemeCategory;\n}();","map":null,"metadata":{},"sourceType":"module"}