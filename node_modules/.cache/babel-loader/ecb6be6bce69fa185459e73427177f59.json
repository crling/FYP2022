{"ast":null,"code":"function _slicedToArray(arr, i) { return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray(arr, i) || _nonIterableRest(); }\n\nfunction _nonIterableRest() { throw new TypeError(\"Invalid attempt to destructure non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\"); }\n\nfunction _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === \"string\") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === \"Object\" && o.constructor) n = o.constructor.name; if (n === \"Map\" || n === \"Set\") return Array.from(o); if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }\n\nfunction _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }\n\nfunction _iterableToArrayLimit(arr, i) { if (typeof Symbol === \"undefined\" || !(Symbol.iterator in Object(arr))) return; var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i[\"return\"] != null) _i[\"return\"](); } finally { if (_d) throw _e; } } return _arr; }\n\nfunction _arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }\n\nfunction _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }\n\nimport * as cv from \"color-convert\";\nexport var Color = /*#__PURE__*/function () {\n  function Color() {\n    _classCallCheck(this, Color);\n\n    this._rgb = [0, 0, 0];\n    this._hsl = [0, 0, 0];\n    this._alpha = 1;\n    this.string = \"#000\";\n  }\n\n  _createClass(Color, [{\n    key: \"_updateString\",\n    value: function _updateString() {\n      if (this._alpha === 1) {\n        this.string = \"#\" + cv.rgb.hex(this._rgb);\n      } else {\n        var _this$_rgb = _slicedToArray(this._rgb, 3),\n            r = _this$_rgb[0],\n            g = _this$_rgb[1],\n            b = _this$_rgb[2];\n\n        this.string = \"rgba(\".concat(r, \", \").concat(g, \", \").concat(b, \", \").concat(this._alpha, \")\");\n      }\n    }\n  }, {\n    key: \"lighten\",\n    value: function lighten(amount) {\n      var _this$_hsl = _slicedToArray(this._hsl, 3),\n          h = _this$_hsl[0],\n          s = _this$_hsl[1],\n          l = _this$_hsl[2];\n\n      return Color.hsl(h, s, bound(l + amount));\n    }\n  }, {\n    key: \"darken\",\n    value: function darken(amount) {\n      var _this$_hsl2 = _slicedToArray(this._hsl, 3),\n          h = _this$_hsl2[0],\n          s = _this$_hsl2[1],\n          l = _this$_hsl2[2];\n\n      return Color.hsl(h, s, bound(l - amount));\n    }\n  }, {\n    key: \"saturate\",\n    value: function saturate(amount) {\n      var _this$_hsl3 = _slicedToArray(this._hsl, 3),\n          h = _this$_hsl3[0],\n          s = _this$_hsl3[1],\n          l = _this$_hsl3[2];\n\n      return Color.hsl(h, bound(s + amount), l);\n    }\n  }, {\n    key: \"desaturate\",\n    value: function desaturate(amount) {\n      var _this$_hsl4 = _slicedToArray(this._hsl, 3),\n          h = _this$_hsl4[0],\n          s = _this$_hsl4[1],\n          l = _this$_hsl4[2];\n\n      return Color.hsl(h, bound(s - amount), l);\n    }\n  }, {\n    key: \"shiftHue\",\n    value: function shiftHue(amount) {\n      var _this$_hsl5 = _slicedToArray(this._hsl, 3),\n          h = _this$_hsl5[0],\n          s = _this$_hsl5[1],\n          l = _this$_hsl5[2];\n\n      var rawH = h + amount;\n      var newH = rawH < 0 ? 360 + rawH : rawH > 360 ? rawH - 360 : rawH;\n      return Color.hsl(newH, s, l);\n    }\n  }, {\n    key: \"clone\",\n    value: function clone() {\n      return Color.hsl.apply(null, this._hsl);\n    }\n  }, {\n    key: \"rgb\",\n    get: function get() {\n      return this._rgb;\n    },\n    set: function set(value) {\n      this._rgb = value;\n      this._hsl = cv.rgb.hsl(value);\n\n      this._updateString();\n    }\n  }, {\n    key: \"hsl\",\n    get: function get() {\n      return this._hsl;\n    },\n    set: function set(value) {\n      this._hsl = value;\n      this._rgb = cv.hsl.rgb(value);\n\n      this._updateString();\n    }\n  }], [{\n    key: \"rgb\",\n    value: function rgb(r, g, b) {\n      var c = new Color();\n      c.rgb = [r, g, b];\n      return c;\n    }\n  }, {\n    key: \"hsl\",\n    value: function hsl(h, s, l) {\n      var c = new Color();\n      c.hsl = [h, s, l];\n      return c;\n    }\n  }, {\n    key: \"literal\",\n    value: function literal(t) {\n      var c = new Color();\n\n      if (t[0] === \"#\") {\n        c.rgb = cv.hex.rgb(t.substr(1));\n      } else if (t.startsWith(\"rgba\")) {\n        var _t$slice$split$map = t.slice(5, -1).split(\",\").map(function (n) {\n          return parseFloat(n);\n        }),\n            _t$slice$split$map2 = _slicedToArray(_t$slice$split$map, 4),\n            r = _t$slice$split$map2[0],\n            g = _t$slice$split$map2[1],\n            b = _t$slice$split$map2[2],\n            a = _t$slice$split$map2[3];\n\n        c._alpha = a;\n        c.rgb = [r, g, b];\n      } else {\n        c.rgb = cv.keyword.rgb(t);\n      }\n\n      return c;\n    }\n  }]);\n\n  return Color;\n}();\n\nfunction bound(num) {\n  var min = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;\n  var max = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 100;\n  return num > max ? max : num < min ? min : num;\n}","map":null,"metadata":{},"sourceType":"module"}