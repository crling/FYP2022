{"ast":null,"code":"function _createForOfIteratorHelper(o, allowArrayLike) { var it; if (typeof Symbol === \"undefined\" || o[Symbol.iterator] == null) { if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === \"number\") { if (it) o = it; var i = 0; var F = function F() {}; return { s: F, n: function n() { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }, e: function e(_e) { throw _e; }, f: F }; } throw new TypeError(\"Invalid attempt to iterate non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\"); } var normalCompletion = true, didErr = false, err; return { s: function s() { it = o[Symbol.iterator](); }, n: function n() { var step = it.next(); normalCompletion = step.done; return step; }, e: function e(_e2) { didErr = true; err = _e2; }, f: function f() { try { if (!normalCompletion && it[\"return\"] != null) it[\"return\"](); } finally { if (didErr) throw err; } } }; }\n\nfunction _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === \"string\") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === \"Object\" && o.constructor) n = o.constructor.name; if (n === \"Map\" || n === \"Set\") return Array.from(o); if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }\n\nfunction _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }\n\nimport loadData from \"../load-data\";\nimport IS_NODE from \"../utils/is-node\";\nimport { Visualizer } from \"./visualizer\";\n\nfunction isVisualizeResult(v) {\n  return v.visualizer && v.visualizer instanceof Visualizer;\n}\n\nexport function visualize(arg) {\n  var v;\n  var opt;\n\n  if (isVisualizeResult(arg)) {\n    v = arg.visualizer;\n    opt = arg.option;\n  } else {\n    opt = arg;\n    v = new Visualizer(arg);\n  }\n\n  function run() {\n    if (opt.setup) opt.setup.call(v);\n    v.run();\n\n    if (!IS_NODE && window.OVIZ_EXPORT_GLOBAL && window.OVIZ_VISUALIZER) {\n      window.OVIZ_VISUALIZER(v);\n    }\n\n    if (opt._didRender) opt._didRender.call(v);\n  }\n\n  var needLoadData = !!opt.loadData;\n  var dataDefFromCommands = {};\n\n  if (v.extCommands) {\n    var _iterator = _createForOfIteratorHelper(v.extCommands),\n        _step;\n\n    try {\n      for (_iterator.s(); !(_step = _iterator.n()).done;) {\n        var cmd = _step.value;\n\n        if (cmd.type === \"load\") {\n          needLoadData = true;\n          dataDefFromCommands[cmd.name] = new Function(\"return \".concat(cmd.payload))();\n        }\n      }\n    } catch (err) {\n      _iterator.e(err);\n    } finally {\n      _iterator.f();\n    }\n  }\n\n  if (needLoadData) {\n    var dataDef = Object.assign(Object.assign({}, opt.loadData), dataDefFromCommands);\n    if (opt._willLoadData) opt._willLoadData.call(v, dataDef);\n    loadData(dataDef).then(function (d) {\n      v.data = Object.assign(Object.assign({}, v.data), d);\n      run();\n    });\n  } else {\n    run();\n  }\n\n  return {\n    visualizer: v,\n    option: opt\n  };\n}","map":null,"metadata":{},"sourceType":"module"}