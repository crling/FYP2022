{"ast":null,"code":"function _slicedToArray(arr, i) { return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray(arr, i) || _nonIterableRest(); }\n\nfunction _nonIterableRest() { throw new TypeError(\"Invalid attempt to destructure non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\"); }\n\nfunction _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === \"string\") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === \"Object\" && o.constructor) n = o.constructor.name; if (n === \"Map\" || n === \"Set\") return Array.from(o); if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }\n\nfunction _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }\n\nfunction _iterableToArrayLimit(arr, i) { if (typeof Symbol === \"undefined\" || !(Symbol.iterator in Object(arr))) return; var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i[\"return\"] != null) _i[\"return\"](); } finally { if (_d) throw _e; } } return _arr; }\n\nfunction _arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }\n\nimport { newCompNode } from \"../ast-node\";\nimport { parseBlockBody } from \"../parser/block-body\";\nimport { BLOCK_NAME } from \"../tokens\";\nimport { parseModifiers } from \"./modifier\";\nexport function parseBlock(p) {\n  var _p$expect = p.expect(BLOCK_NAME, \"block name\"),\n      _p$expect2 = _slicedToArray(_p$expect, 4),\n      name = _p$expect2[1],\n      modifiers = _p$expect2[2],\n      initArg = _p$expect2[3];\n\n  var node = newCompNode(name);\n\n  if (initArg) {\n    node.initArg = initArg;\n  }\n\n  if (modifiers) {\n    parseModifiers(node, modifiers);\n  }\n\n  p.skipSpaces(false);\n\n  if (p.peek() === \";\") {\n    p.expect(\";\");\n    p.skipSpaces(true);\n    return node;\n  }\n\n  p.skipSpaces(true);\n  parseBlockBody(p, node);\n  p.skipSpaces(true);\n  return node;\n}","map":null,"metadata":{},"sourceType":"module"}