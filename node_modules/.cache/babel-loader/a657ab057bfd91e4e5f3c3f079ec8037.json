{"ast":null,"code":"function ownKeys(object, enumerableOnly) {\n  var keys = Object.keys(object);\n\n  if (Object.getOwnPropertySymbols) {\n    var symbols = Object.getOwnPropertySymbols(object);\n    if (enumerableOnly) symbols = symbols.filter(function (sym) {\n      return Object.getOwnPropertyDescriptor(object, sym).enumerable;\n    });\n    keys.push.apply(keys, symbols);\n  }\n\n  return keys;\n}\n\nfunction _objectSpread(target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = arguments[i] != null ? arguments[i] : {};\n\n    if (i % 2) {\n      ownKeys(Object(source), true).forEach(function (key) {\n        _defineProperty(target, key, source[key]);\n      });\n    } else if (Object.getOwnPropertyDescriptors) {\n      Object.defineProperties(target, Object.getOwnPropertyDescriptors(source));\n    } else {\n      ownKeys(Object(source)).forEach(function (key) {\n        Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));\n      });\n    }\n  }\n\n  return target;\n}\n\nfunction _defineProperty(obj, key, value) {\n  if (key in obj) {\n    Object.defineProperty(obj, key, {\n      value: value,\n      enumerable: true,\n      configurable: true,\n      writable: true\n    });\n  } else {\n    obj[key] = value;\n  }\n\n  return obj;\n}\n\nimport Vue from '../../utils/vue';\nimport attrsMixin from '../../mixins/attrs';\nimport normalizeSlotMixin from '../../mixins/normalize-slot';\nexport var props = {\n  active: {\n    type: Boolean,\n    \"default\": false\n  },\n  activeClass: {\n    type: String,\n    \"default\": 'active'\n  },\n  buttonClass: {\n    type: [String, Array, Object] // default: null\n\n  },\n  disabled: {\n    type: Boolean,\n    \"default\": false\n  },\n  variant: {\n    type: String // default: null\n\n  }\n}; // @vue/component\n\nexport var BDropdownItemButton = /*#__PURE__*/Vue.extend({\n  name: 'BDropdownItemButton',\n  mixins: [attrsMixin, normalizeSlotMixin],\n  inheritAttrs: false,\n  inject: {\n    bvDropdown: {\n      \"default\": null\n    }\n  },\n  props: props,\n  computed: {\n    computedAttrs: function computedAttrs() {\n      return _objectSpread(_objectSpread({}, this.bvAttrs), {}, {\n        role: 'menuitem',\n        type: 'button',\n        disabled: this.disabled\n      });\n    }\n  },\n  methods: {\n    closeDropdown: function closeDropdown() {\n      if (this.bvDropdown) {\n        this.bvDropdown.hide(true);\n      }\n    },\n    onClick: function onClick(evt) {\n      this.$emit('click', evt);\n      this.closeDropdown();\n    }\n  },\n  render: function render(h) {\n    var _ref;\n\n    return h('li', {\n      attrs: {\n        role: 'presentation'\n      }\n    }, [h('button', {\n      staticClass: 'dropdown-item',\n      \"class\": [this.buttonClass, (_ref = {}, _defineProperty(_ref, this.activeClass, this.active), _defineProperty(_ref, \"text-\".concat(this.variant), this.variant && !(this.active || this.disabled)), _ref)],\n      attrs: this.computedAttrs,\n      on: {\n        click: this.onClick\n      },\n      ref: 'button'\n    }, this.normalizeSlot('default'))]);\n  }\n});","map":null,"metadata":{},"sourceType":"module"}