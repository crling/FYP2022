{"ast":null,"code":"function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nfunction _slicedToArray(arr, i) { return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray(arr, i) || _nonIterableRest(); }\n\nfunction _nonIterableRest() { throw new TypeError(\"Invalid attempt to destructure non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\"); }\n\nfunction _iterableToArrayLimit(arr, i) { if (typeof Symbol === \"undefined\" || !(Symbol.iterator in Object(arr))) return; var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i[\"return\"] != null) _i[\"return\"](); } finally { if (_d) throw _e; } } return _arr; }\n\nfunction _arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }\n\nfunction _toConsumableArray(arr) { return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _unsupportedIterableToArray(arr) || _nonIterableSpread(); }\n\nfunction _nonIterableSpread() { throw new TypeError(\"Invalid attempt to spread non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\"); }\n\nfunction _iterableToArray(iter) { if (typeof Symbol !== \"undefined\" && Symbol.iterator in Object(iter)) return Array.from(iter); }\n\nfunction _arrayWithoutHoles(arr) { if (Array.isArray(arr)) return _arrayLikeToArray(arr); }\n\nfunction _createForOfIteratorHelper(o, allowArrayLike) { var it; if (typeof Symbol === \"undefined\" || o[Symbol.iterator] == null) { if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === \"number\") { if (it) o = it; var i = 0; var F = function F() {}; return { s: F, n: function n() { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }, e: function e(_e2) { throw _e2; }, f: F }; } throw new TypeError(\"Invalid attempt to iterate non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\"); } var normalCompletion = true, didErr = false, err; return { s: function s() { it = o[Symbol.iterator](); }, n: function n() { var step = it.next(); normalCompletion = step.done; return step; }, e: function e(_e3) { didErr = true; err = _e3; }, f: function f() { try { if (!normalCompletion && it[\"return\"] != null) it[\"return\"](); } finally { if (didErr) throw err; } } }; }\n\nfunction _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === \"string\") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === \"Object\" && o.constructor) n = o.constructor.name; if (n === \"Map\" || n === \"Set\") return Array.from(o); if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }\n\nfunction _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }\n\nimport { event } from \"crux/dist/utils\";\nimport { filterSamples } from \"./data\";\nexport var editorRef = {};\nvar conf = {\n  sampleSortBy: [\"age\"]\n};\n\nfunction updateSampleSorting(v, keys) {\n  var getters = [];\n\n  var _iterator = _createForOfIteratorHelper(keys),\n      _step;\n\n  try {\n    for (_iterator.s(); !(_step = _iterator.n()).done;) {\n      var sampleSortBy = _step.value;\n      var sOrder = sampleSortBy[0];\n      var sKey = sampleSortBy.substr(1);\n      var getter = void 0;\n\n      (function () {\n        switch (sKey) {\n          case \"id\":\n            getter = function getter(s) {\n              return s;\n            };\n\n            break;\n\n          default:\n            var s = sKey.indexOf(\"_\"); // const panel = sKey.substr(0, s);\n\n            var key = sKey.substr(s + 1);\n\n            if (key === \"age\" || key === \"BMI\") {\n              getter = function getter(s) {\n                return Number.isNaN(v.data.metaDict[s][key]) ? Number.MAX_VALUE : v.data.metaDict[s][key];\n              };\n            } else {\n              getter = function getter(s) {\n                return v.data.metaDict[s][key];\n              };\n            }\n\n        }\n      })();\n\n      getters.push([getter, sOrder === \"a\"]);\n    }\n  } catch (err) {\n    _iterator.e(err);\n  } finally {\n    _iterator.f();\n  }\n\n  v.data.samples = sort(v.data, getters);\n  filterSamples(v);\n  update(v);\n}\n\nfunction sort(data, getters) {\n  return data.samples.sort(function (a, b) {\n    var result = 0;\n\n    var _iterator2 = _createForOfIteratorHelper(getters),\n        _step2;\n\n    try {\n      for (_iterator2.s(); !(_step2 = _iterator2.n()).done;) {\n        var getter = _step2.value;\n        result = compare(a, b, getter[0], getter[1]);\n        if (result !== 0) break;\n      }\n    } catch (err) {\n      _iterator2.e(err);\n    } finally {\n      _iterator2.f();\n    }\n\n    return result;\n  });\n}\n\nfunction compare(a, b, getter, asc) {\n  var a_ = getter(a),\n      b_ = getter(b);\n  var va = asc ? a_ : b_;\n  var vb = asc ? b_ : a_;\n  if (va < vb) return -1;else if (va > vb) return 1;else return 0;\n}\n\nfunction update(v) {\n  v.forceRedraw = true;\n  v.run();\n}\n\nexport function editorConfig(v) {\n  var d = v.data;\n  var sampleReorderOpts = [[\"id\", \"Sample ID\"]].concat(_toConsumableArray(d.metaFeatures.map(function (k) {\n    return [\"mt_\".concat(k), k, \"Meta info\"];\n  }))).flatMap(function (_ref) {\n    var _ref2 = _slicedToArray(_ref, 3),\n        k = _ref2[0],\n        name = _ref2[1],\n        p = _ref2[2];\n\n    return [{\n      value: \"a\".concat(k),\n      text: \"\".concat(p ? \"\".concat(p, \": \") : \"\").concat(name, \" \\u2191\")\n    }, {\n      value: \"d\".concat(k),\n      text: \"\".concat(p ? \"\".concat(p, \": \") : \"\").concat(name, \" \\u2193\")\n    }];\n  });\n  return {\n    sections: [{\n      id: \"general\",\n      title: \"General\",\n      layout: \"tabs\",\n      tabs: [{\n        id: \"g-common\",\n        name: \"Common\",\n        view: {\n          type: \"list\",\n          items: [{\n            title: \"Grid width\",\n            type: \"input\",\n            format: \"int\",\n            value: {\n              current: v.data.gridSize[0],\n              callback: function callback(x) {\n                v.data.gridSize[0] = parseFloat(x);\n                v.data._sizeUpdated = true;\n                update(v);\n              }\n            }\n          }, {\n            title: \"Grid height\",\n            type: \"input\",\n            format: \"int\",\n            value: {\n              current: v.data.gridSize[1],\n              callback: function callback(x) {\n                v.data.gridSize[1] = parseFloat(x);\n                v.data._sizeUpdated = true;\n                update(v);\n              }\n            }\n          } // {\n          //     type: \"vue\",\n          //     component: \"color-picker\",\n          //     ref: \"naColorPicker\",\n          //     data: {\n          //         title: \"Color for N/A\",\n          //         scheme: {},\n          //         naColor: v.data.NAColor,\n          //         id: \"group\",\n          //         callback(_, naColor) {\n          //             v.data.NAColor = naColor;\n          //             update(v);\n          //         },\n          //     },\n          // },\n          ]\n        }\n      }, {\n        id: \"g-sample\",\n        name: \"Samples\",\n        view: {\n          type: \"list\",\n          items: [{\n            title: \"Reorder samples by\",\n            type: \"vue\",\n            component: \"reorder-sample\",\n            data: {\n              options: sampleReorderOpts,\n              keys: Array.from(conf.sampleSortBy),\n              // mutTypes: Array.from(v.data.mutTypes),\n              callback: function callback(s, neg, pos, g, sortPos, sortNeg) {\n                updateSampleSorting(v, s);\n              }\n            }\n          }, // {\n          //     type: \"vue\",\n          //     component: \"reorder\",\n          //     title: \"Reorder samples\",\n          //     data: samplesVueData,\n          // },\n          {\n            type: \"vue\",\n            component: \"filter-samples\",\n            title: null,\n            ref: \"filterSample\",\n            data: {\n              get samples() {\n                return Array.from(v.data.samples);\n              },\n\n              get defaultValue() {\n                return true;\n              },\n\n              get title() {\n                return \"Filter Samples\";\n              },\n\n              callback: function callback(hiddenSamples) {\n                v.data.hiddenSamples = new Set(hiddenSamples);\n                filterSamples(v);\n                v.root._sizeUpdated = true;\n                update(v);\n              }\n            }\n          }, {\n            type: \"button\",\n            title: \"Show ordered sample list\",\n            action: function action() {\n              var hidden = v.data.hiddenSamples;\n              event.emit(\"show-msgbox\", {\n                title: \"Sample List\",\n                content: v.data.samples.map(function (s) {\n                  return hidden.has(s) ? \"\".concat(s, \" (hidden)\") : s;\n                }).join(\"<br>\"),\n                html: true\n              });\n            }\n          }]\n        }\n      }]\n    }, {\n      id: \"meta\",\n      title: \"Meta Panel\",\n      layout: \"tabs\",\n      tabs: [{\n        name: \"Settings\",\n        id: \"content\",\n        view: {\n          type: \"vue\",\n          component: \"meta-info\",\n          data: {\n            data: v.data.metaFeatures.map(function (k) {\n              return _objectSpread({\n                name: k\n              }, v.data.metaInfo[k]);\n            }),\n            callback: function callback(obj) {\n              // console.log(Object.keys(v.data.metaInfo));\n              var _iterator3 = _createForOfIteratorHelper(obj),\n                  _step3;\n\n              try {\n                for (_iterator3.s(); !(_step3 = _iterator3.n()).done;) {\n                  var o = _step3.value;\n                  v.data.metaInfo[o.name].update(v, o);\n                } // console.log(v.data.metaInfo);\n\n              } catch (err) {\n                _iterator3.e(err);\n              } finally {\n                _iterator3.f();\n              }\n\n              update(v);\n            }\n          }\n        }\n      }, {\n        name: \"Reorder\",\n        id: \"reorder\",\n        view: {\n          type: \"vue\",\n          component: \"reorder\",\n          data: {\n            title: \"Reorder meta features\",\n            array: v.data.metaFeatures,\n            callback: function callback(array) {\n              v.data.metaFeatures = array;\n              update(v);\n            }\n          }\n        }\n      }]\n    }]\n  };\n}\nexport var toolbar = [];","map":{"version":3,"sources":["/Users/wangzhenyu/Desktop/fyp_workspace/meta_platform/app/javascript/viz/meta-overview/editor.ts"],"names":["event","filterSamples","editorRef","conf","sampleSortBy","updateSampleSorting","v","keys","getters","sOrder","sKey","substr","getter","s","indexOf","key","Number","isNaN","data","metaDict","MAX_VALUE","push","samples","sort","update","a","b","result","compare","asc","a_","b_","va","vb","forceRedraw","run","editorConfig","d","sampleReorderOpts","metaFeatures","map","k","flatMap","name","p","value","text","sections","id","title","layout","tabs","view","type","items","format","current","gridSize","callback","x","parseFloat","_sizeUpdated","component","options","Array","from","neg","pos","g","sortPos","sortNeg","ref","defaultValue","hiddenSamples","Set","root","action","hidden","emit","content","has","join","html","metaInfo","obj","o","array","toolbar"],"mappings":"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","sourcesContent":["import { event } from \"crux/dist/utils\";\nimport { EditorDef, ToolbarDef } from \"utils/editor\";\nimport { filterSamples } from \"./data\";\n\nexport const editorRef: any = {};\n\nconst conf: any = {\n    sampleSortBy: [\"age\"],\n};\n\nfunction updateSampleSorting(v, keys) {\n    const getters = [];\n\n    for (const sampleSortBy of keys) {\n        const sOrder = sampleSortBy[0];\n        const sKey = sampleSortBy.substr(1);\n\n        let getter: any;\n        switch (sKey) {\n            case \"id\":\n                getter = s => s;\n                break;\n            default:\n                const s = sKey.indexOf(\"_\");\n                // const panel = sKey.substr(0, s);\n                const key = sKey.substr(s + 1);\n                if (key === \"age\" || key === \"BMI\") {\n                    getter = s => Number.isNaN(v.data.metaDict[s][key]) ? Number.MAX_VALUE : v.data.metaDict[s][key];\n                } else {\n                    getter = s => v.data.metaDict[s][key];\n                }\n        }\n        getters.push([getter, sOrder === \"a\"]);\n    }\n    v.data.samples = sort(v.data, getters);\n    filterSamples(v);\n    update(v);\n}\nfunction sort(data: any, getters: [any, boolean][]) {\n    return data.samples.sort((a, b) => {\n        let result = 0;\n        for (const getter of getters) {\n            result = compare(a, b, getter[0], getter[1]);\n            if (result !== 0) break;\n        }\n        return result;\n    });\n}\n\nfunction compare(a: any, b: any, getter: any, asc: boolean) {\n    const a_ = getter(a),\n        b_ = getter(b);\n    const va = asc ? a_ : b_;\n    const vb = asc ? b_ : a_;\n    if (va < vb) return -1;\n    else if (va > vb) return 1;\n    else return 0;\n}\n\nfunction update(v) {\n    v.forceRedraw = true;\n    v.run();\n}\n\nexport function editorConfig(v: any): EditorDef {\n\n    const d = v.data;\n    const sampleReorderOpts = [\n        [\"id\", \"Sample ID\"],\n        ...d.metaFeatures.map(k => [`mt_${k}`, k, \"Meta info\"]),\n    ].flatMap(([k, name, p]) => [\n            { value: `a${k}`, text: `${p ? `${p}: ` : \"\"}${name} ↑` },\n            { value: `d${k}`, text: `${p ? `${p}: ` : \"\"}${name} ↓` },\n        ]);\n\n    return {\n        sections: [\n            {\n                id: \"general\",\n                title: \"General\",\n                layout: \"tabs\",\n                tabs: [\n                    {\n                        id: \"g-common\",\n                        name: \"Common\",\n                        view: {\n                            type: \"list\",\n                            items: [\n                                {\n                                    title: \"Grid width\",\n                                    type: \"input\",\n                                    format: \"int\",\n                                    value: {\n                                        current: v.data.gridSize[0],\n                                        callback(x) {\n                                            v.data.gridSize[0] = parseFloat(x);\n                                            v.data._sizeUpdated = true;\n                                            update(v);\n                                        },\n                                    },\n                                },\n                                {\n                                    title: \"Grid height\",\n                                    type: \"input\",\n                                    format: \"int\",\n                                    value: {\n                                        current: v.data.gridSize[1],\n                                        callback(x) {\n                                            v.data.gridSize[1] = parseFloat(x);\n                                            v.data._sizeUpdated = true;\n                                            update(v);\n                                        },\n                                    },\n                                },\n                                // {\n                                //     type: \"vue\",\n                                //     component: \"color-picker\",\n                                //     ref: \"naColorPicker\",\n                                //     data: {\n                                //         title: \"Color for N/A\",\n                                //         scheme: {},\n                                //         naColor: v.data.NAColor,\n                                //         id: \"group\",\n                                //         callback(_, naColor) {\n                                //             v.data.NAColor = naColor;\n                                //             update(v);\n                                //         },\n                                //     },\n                                // },\n                            ],\n                        },\n                    },\n                    {\n                        id: \"g-sample\",\n                        name: \"Samples\",\n                        view: {\n                            type: \"list\",\n                            items: [\n                                {\n                                    title: \"Reorder samples by\",\n                                    type: \"vue\",\n                                    component: \"reorder-sample\",\n                                    data: {\n                                        options: sampleReorderOpts,\n                                        keys: Array.from(conf.sampleSortBy),\n                                        // mutTypes: Array.from(v.data.mutTypes),\n                                        callback: (s, neg, pos, g, sortPos, sortNeg) => {\n                                            updateSampleSorting(v, s);\n                                        },\n                                    },\n                                },\n                                // {\n                                //     type: \"vue\",\n                                //     component: \"reorder\",\n                                //     title: \"Reorder samples\",\n                                //     data: samplesVueData,\n                                // },\n                                {\n                                    type: \"vue\",\n                                    component: \"filter-samples\",\n                                    title: null,\n                                    ref: \"filterSample\",\n                                    data: {\n                                        get samples() {\n                                            return Array.from(v.data.samples);\n                                        },\n                                        get defaultValue() {\n                                            return true;\n                                        },\n                                        get title() {\n                                            return \"Filter Samples\";\n                                        },\n                                        callback(hiddenSamples) {\n                                            v.data.hiddenSamples = new Set(hiddenSamples);\n                                            filterSamples(v);\n                                            v.root._sizeUpdated = true;\n                                            update(v);\n                                        },\n                                    },\n                                },\n                                {\n                                    type: \"button\",\n                                    title: \"Show ordered sample list\",\n                                    action() {\n                                        const hidden = v.data.hiddenSamples;\n                                        event.emit(\"show-msgbox\", {title:\"Sample List\", \n                                            content: v.data.samples.map(s => (hidden.has(s) ? `${s} (hidden)` : s)).join(\"<br>\"),\n                                            html: true});\n                                    },\n                                },\n                            ],\n                        },\n                    },\n                ],\n            },\n            {\n                id: \"meta\",\n                title: \"Meta Panel\",\n                layout: \"tabs\",\n                tabs: [\n                    {\n                        name: \"Settings\",\n                        id: \"content\",\n                        view: {\n                            type: \"vue\",\n                            component: \"meta-info\",\n                            data: {\n                                data: v.data.metaFeatures.map(k => ({\n                                    name: k, ...v.data.metaInfo[k],\n                                })),\n                                callback(obj) {\n                                    // console.log(Object.keys(v.data.metaInfo));\n                                    for (const o of obj) {\n                                        v.data.metaInfo[o.name].update(v, o);\n                                    }\n                                    // console.log(v.data.metaInfo);\n                                    update(v);\n                                },\n                            },\n                        },\n                    },\n                    {\n                        name: \"Reorder\",\n                        id: \"reorder\",\n                        view: {\n                            type: \"vue\",\n                            component: \"reorder\",\n                            data: {\n                                title: `Reorder meta features`,\n                                array:  v.data.metaFeatures,\n                                callback(array) {\n                                    v.data.metaFeatures = array;\n                                    update(v);\n                                },\n                            },\n                        },\n                    },\n                ],\n            },\n        ],\n    };\n}\n\nexport const toolbar: ToolbarDef = [];\n"]},"metadata":{},"sourceType":"module"}