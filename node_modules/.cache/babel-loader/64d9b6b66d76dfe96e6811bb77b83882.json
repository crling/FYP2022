{"ast":null,"code":"import { h } from './h';\n\nfunction copyToThunk(vnode, thunk) {\n  thunk.elm = vnode.elm;\n  vnode.data.fn = thunk.data.fn;\n  vnode.data.args = thunk.data.args;\n  thunk.data = vnode.data;\n  thunk.children = vnode.children;\n  thunk.text = vnode.text;\n  thunk.elm = vnode.elm;\n}\n\nfunction init(thunk) {\n  var cur = thunk.data;\n  var vnode = cur.fn.apply(undefined, cur.args);\n  copyToThunk(vnode, thunk);\n}\n\nfunction prepatch(oldVnode, thunk) {\n  var i,\n      old = oldVnode.data,\n      cur = thunk.data;\n  var oldArgs = old.args,\n      args = cur.args;\n\n  if (old.fn !== cur.fn || oldArgs.length !== args.length) {\n    copyToThunk(cur.fn.apply(undefined, args), thunk);\n    return;\n  }\n\n  for (i = 0; i < args.length; ++i) {\n    if (oldArgs[i] !== args[i]) {\n      copyToThunk(cur.fn.apply(undefined, args), thunk);\n      return;\n    }\n  }\n\n  copyToThunk(oldVnode, thunk);\n}\n\nexport var thunk = function thunk(sel, key, fn, args) {\n  if (args === undefined) {\n    args = fn;\n    fn = key;\n    key = undefined;\n  }\n\n  return h(sel, {\n    key: key,\n    hook: {\n      init: init,\n      prepatch: prepatch\n    },\n    fn: fn,\n    args: args\n  });\n};\nexport default thunk;","map":null,"metadata":{},"sourceType":"module"}