{"ast":null,"code":"function _typeof(obj) { \"@babel/helpers - typeof\"; if (typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; }; } return _typeof(obj); }\n\nfunction _templateObject() {\n  var data = _taggedTemplateLiteral([\"\\n    Component {\\n        xScale = getScale(true) || createXScale()\\n        yScale = getScale(false) || createYScale()\\n        // @let contours = getContourDensity()\\n        @for (contour, i) in _contours {\\n            Path {\\n                key = i\\n                d = contour.path\\n                fill = getColor(contour.value)\\n                stroke = prop.stroke || \\\"#000\\\"\\n                @props prop.pathOptions\\n            }\\n        }\\n    }\\n    \"]);\n\n  _templateObject = function _templateObject() {\n    return data;\n  };\n\n  return data;\n}\n\nfunction _taggedTemplateLiteral(strings, raw) { if (!raw) { raw = strings.slice(0); } return Object.freeze(Object.defineProperties(strings, { raw: { value: Object.freeze(raw) } })); }\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }\n\nfunction _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }\n\nfunction _get(target, property, receiver) { if (typeof Reflect !== \"undefined\" && Reflect.get) { _get = Reflect.get; } else { _get = function _get(target, property, receiver) { var base = _superPropBase(target, property); if (!base) return; var desc = Object.getOwnPropertyDescriptor(base, property); if (desc.get) { return desc.get.call(receiver); } return desc.value; }; } return _get(target, property, receiver || target); }\n\nfunction _superPropBase(object, property) { while (!Object.prototype.hasOwnProperty.call(object, property)) { object = _getPrototypeOf(object); if (object === null) break; } return object; }\n\nfunction _inherits(subClass, superClass) { if (typeof superClass !== \"function\" && superClass !== null) { throw new TypeError(\"Super expression must either be null or a function\"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }\n\nfunction _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }\n\nfunction _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }\n\nfunction _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === \"object\" || typeof call === \"function\")) { return call; } return _assertThisInitialized(self); }\n\nfunction _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\"); } return self; }\n\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Date.prototype.toString.call(Reflect.construct(Date, [], function () {})); return true; } catch (e) { return false; } }\n\nfunction _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }\n\nimport * as d3c from \"d3-contour\";\nimport * as d3g from \"d3-geo\";\nimport * as d3s from \"d3-scale\";\nimport { schemeGradient } from \"../../color\";\nimport { template } from \"../../template/tag\";\nimport { minmax } from \"../../utils/math\";\nimport { BaseChart } from \"./base-chart\";\nexport var ContourDensity = /*#__PURE__*/function (_BaseChart) {\n  _inherits(ContourDensity, _BaseChart);\n\n  var _super = _createSuper(ContourDensity);\n\n  function ContourDensity() {\n    var _this;\n\n    _classCallCheck(this, ContourDensity);\n\n    _this = _super.apply(this, arguments);\n    _this.render = template(_templateObject());\n    return _this;\n  }\n\n  _createClass(ContourDensity, [{\n    key: \"willRender\",\n    value: function willRender() {\n      _get(_getPrototypeOf(ContourDensity.prototype), \"willRender\", this).call(this);\n\n      this._contours = this.getContourDensity();\n      var densityRange = minmax(this._contours.map(function (d) {\n        return d.value;\n      }).flat());\n      this._vScale = this.prop.colorScale === \"linear\" ? d3s.scaleLinear() : d3s.scaleLog();\n\n      this._vScale.domain(densityRange).range([0, 1]);\n\n      this._colorScheme = schemeGradient(this.prop.startColor, this.prop.endColor);\n    }\n  }, {\n    key: \"getContourDensity\",\n    value: function getContourDensity() {\n      var _this2 = this;\n\n      var contours = d3c.contourDensity().x(function (d) {\n        return _this2.getX(d[0]);\n      }).y(function (d) {\n        return _this2.getY(d[1]);\n      }).size([this.$geometry.width, this.$geometry.height]);\n      var p;\n      [\"bandWidth\", \"thresholds\"].forEach(function (opt) {\n        if (p = _this2.prop[opt]) {\n          contours[opt.toLowerCase()](p);\n        }\n      });\n      return contours(this.data.raw).filter(function (x) {\n        return x.coordinates.length;\n      }).map(function (x) {\n        return {\n          value: x.value,\n          path: d3g.geoPath()(x)\n        };\n      });\n    } // @ts-ignore\n\n  }, {\n    key: \"getColor\",\n    value: function getColor(d) {\n      return this.prop.withColor ? this._colorScheme.get(this._vScale(d)) : \"none\";\n    }\n  }, {\n    key: \"defaultProp\",\n    value: function defaultProp() {\n      return Object.assign(Object.assign({}, _get(_getPrototypeOf(ContourDensity.prototype), \"defaultProp\", this).call(this)), {\n        withColor: false,\n        startColor: \"#fff\",\n        endColor: \"#000\",\n        colorScale: \"linear\"\n      });\n    }\n  }]);\n\n  return ContourDensity;\n}(BaseChart);","map":null,"metadata":{},"sourceType":"module"}