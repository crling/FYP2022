{"ast":null,"code":"import { FOR_EXPR, NAME } from \"../tokens\";\nimport { parseBlockBody } from \"./block-body\";\nexport function parseYield(p) {\n  p.expect(\"@yield\");\n  p.skipSpaces();\n  var name = p.expect(NAME, \"child name\")[0];\n  p.skipSpaces();\n  var expr = \"\";\n\n  if (p.peek(4) === \"with\") {\n    p.expect(\"with\");\n    p.skipSpaces();\n\n    if (p.peek() === \"{\") {\n      expr = p.consumeTill(\"}\", true) + \"}\";\n    } else {\n      expr = p.expect(FOR_EXPR, \"data name\")[0];\n    }\n  }\n\n  p.skipSpaces();\n  var processor = \"\";\n\n  if (p.peek(4) === \"then\") {\n    p.expect(\"then\");\n    p.skipSpaces();\n    processor = p.expect(FOR_EXPR, \"processor name\")[0];\n  }\n\n  p.skipSpaces();\n  var node = {\n    type: \"yield\",\n    name: name,\n    data: expr,\n    processor: processor,\n    localData: [],\n    children: [],\n    namedChildren: {}\n  };\n\n  if (p.peek(7) === \"default\") {\n    p.expect(\"default\");\n    p.skipSpaces();\n    parseBlockBody(p, node);\n  }\n\n  return node;\n}","map":null,"metadata":{},"sourceType":"module"}