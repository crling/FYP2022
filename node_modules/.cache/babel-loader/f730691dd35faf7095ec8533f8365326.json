{"ast":null,"code":"function _slicedToArray(arr, i) { return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray(arr, i) || _nonIterableRest(); }\n\nfunction _nonIterableRest() { throw new TypeError(\"Invalid attempt to destructure non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\"); }\n\nfunction _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === \"string\") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === \"Object\" && o.constructor) n = o.constructor.name; if (n === \"Map\" || n === \"Set\") return Array.from(o); if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }\n\nfunction _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }\n\nfunction _iterableToArrayLimit(arr, i) { if (typeof Symbol === \"undefined\" || !(Symbol.iterator in Object(arr))) return; var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i[\"return\"] != null) _i[\"return\"](); } finally { if (_d) throw _e; } } return _arr; }\n\nfunction _arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }\n\nimport { Component } from \"../../element/component\";\nimport { isRenderable } from \"../../element/is\";\nimport ns from \"../ns\";\nimport { defineGradient, getGradient } from \"../svg/svg\";\n\nfunction init(v, context) {\n  setSize(v, context);\n}\n\nfunction _genNode(element) {\n  if (isRenderable(element)) {\n    return _genNode(element.children[0]);\n  }\n\n  var attrs = element.svgAttrs();\n  var tag = element.svgTagName();\n  var text = element.svgTextContent();\n  var node = {\n    tag: tag,\n    text: text,\n    attrs: attrs,\n    style: {}\n  };\n\n  if (element instanceof Component) {\n    node.children = element.children.filter(function (c) {\n      return c._isActive;\n    }).map(_genNode);\n  }\n\n  var keys;\n  keys = Object.keys(element.$styles);\n\n  if (keys.length > 0) {\n    node.style = element.$styles;\n  }\n\n  var v = element.prop.visible;\n\n  if (typeof v !== \"undefined\") {\n    node.style[\"visibility\"] = v ? \"visible\" : \"hidden\";\n  }\n\n  return node;\n}\n\nfunction _toString(node) {\n  var str = \"<\".concat(node.tag);\n\n  if (Object.keys(node.style).length) {\n    str += \" style=\\\"\".concat(Object.entries(node.style).map(function (_ref) {\n      var _ref2 = _slicedToArray(_ref, 2),\n          k = _ref2[0],\n          v = _ref2[1];\n\n      return \"\".concat(k, \":\").concat(v, \";\");\n    }).join(\"\"), \"\\\"\");\n  }\n\n  if (Object.keys(node.attrs).length) {\n    for (var _i2 = 0, _Object$entries = Object.entries(node.attrs); _i2 < _Object$entries.length; _i2++) {\n      var _ref5 = _Object$entries[_i2];\n\n      var _ref4 = _slicedToArray(_ref5, 2);\n\n      var key = _ref4[0];\n      var val = _ref4[1];\n      str += \" \".concat(key, \"=\\\"\").concat(val, \"\\\"\");\n    }\n  }\n\n  str += \">\";\n\n  if (node.text) {\n    str += node.text;\n  } else if (node.children) {\n    str += node.children.map(_toString).join(\"\");\n  }\n\n  str += \"</\".concat(node.tag, \">\");\n  return str;\n}\n\nfunction render(element, context) {\n  context.svgText = \"\\n    <svg xmlns=\\\"\".concat(ns, \"\\\" width=\\\"\").concat(context.svgSize.width, \"\\\" height=\\\"\").concat(context.svgSize.height, \"\\\" style=\\\"font-family: Arial\\\">\\n    \").concat(_toString(_genNode(element)), \"\\n    </svg>\");\n}\n\nfunction setSize(v, context) {\n  context.svgSize = {\n    width: v.size.width,\n    height: v.size.height\n  };\n}\n\nvar renderer = {\n  init: init,\n  render: render,\n  setSize: setSize,\n  defineGradient: defineGradient,\n  getGradient: getGradient\n};\nexport default renderer;","map":null,"metadata":{},"sourceType":"module"}