{"ast":null,"code":"import Oviz from \"crux\";\nimport { editorConfig, editorRef } from \"./editor\";\nimport template from \"./template.bvt\";\nimport { register } from \"page/visualizers\";\nimport { registerEditorConfig } from \"utils/editor\"; //import data from \"utils/data\";  //导入默认的data\n\nvar sample = 0;\nvar color = \"#3d8eff\";\nvar xlabel = \"\";\nvar ylabel = \"\";\nvar title = \"Gene Structure\";\nvar xAxisIndex = 0;\nvar yAxisIndex = 1;\nvar MODULE_NAME = \"immuneBar\";\n\nfunction init() {\n  if (!window.gon || window.gon.module_name !== MODULE_NAME) return;\n\n  var _Oviz$visualize = Oviz.visualize({\n    el: \"#canvas\",\n    template: template,\n    data: {\n      color: color,\n      xlabel: xlabel,\n      ylabel: ylabel,\n      title: title,\n      labelFontSize: 12,\n      //有关\n      tickFontSize: 14,\n      //有关\n      xAxisRotated: true,\n      xAxisIndex: xAxisIndex,\n      yAxisIndex: yAxisIndex\n    },\n    loadData: {\n      data: {\n        fileKey: \"immuneBardata\",\n        type: \"csv\",\n        loaded: function loaded(data) {\n          var xAxisKey = data.columns[xAxisIndex];\n          var yAxisKey = data.columns[yAxisIndex];\n          var IDKey = data.columns[8];\n          var ID = data.map(function (d) {\n            return d[IDKey];\n          });\n          var typeKey = data.columns[2];\n          var type = data.map(function (d) {\n            return d[typeKey];\n          });\n          var position1Key = data.columns[3];\n          var position1 = data.map(function (d) {\n            return d[position1Key];\n          });\n          var position2Key = data.columns[4];\n          var position2 = data.map(function (d) {\n            return d[position2Key];\n          });\n          var result = [];\n          var sortedResult = [];\n          data.forEach(function (d) {\n            result.push([d[IDKey].split(';', 1)[0], d[typeKey], d[position1Key], d[position2Key]]);\n          }); //find 5' and 3' add the data between to the same array\n\n          var counter = 0;\n          var eachResult = [];\n          var startPosition = [];\n          result.forEach(function (item, index) {\n            console.log(\"item\", item);\n\n            if (index == 0) {\n              eachResult.push(item);\n              startPosition = item[2];\n            } else if (item[0].split('=', 2)[1] == result[index - 1][0].split('=', 2)[1]) {\n              eachResult.push(item);\n\n              if (item[1] == \"five_prime_UTR\") {\n                startPosition = item[2];\n              }\n            } else {\n              console.log(\"eachResult\", eachResult);\n              sortedResult.push(eachResult);\n              eachResult = [];\n            }\n          });\n          console.log(\"sortedResult\", sortedResult); //find the start position of 5' in each item\n          //find the minimum and maximum position to determine the length\n\n          var five_prime_UTR_min = position1[0];\n          var three_prime_UTR_max = position2[0];\n          data.forEach(function (d) {\n            if (d[typeKey] == \"five_prime_UTR\" && d[position1Key] - five_prime_UTR_min < 0) {\n              five_prime_UTR_min = d[position1Key];\n            }\n          });\n          data.forEach(function (d) {\n            if (d[typeKey] == \"three_prime_UTR\" && d[position2Key] - three_prime_UTR_max > 0) {\n              three_prime_UTR_max = d[position2Key];\n            }\n          });\n          console.log(five_prime_UTR_min);\n          console.log(three_prime_UTR_max);\n          var max_length = three_prime_UTR_max - five_prime_UTR_min;\n          console.log(max_length);\n          this.data.gene_data = sortedResult;\n          this.data.max_length = max_length;\n          this.data.five_prime_UTR_min = five_prime_UTR_min;\n          return {\n            sortedResult: sortedResult,\n            max_length: max_length,\n            five_prime_UTR_min: five_prime_UTR_min\n          };\n        }\n      }\n    },\n    setup: function setup() {\n      console.log(\"this.data:\", this[\"_data\"]);\n      registerEditorConfig(editorConfig(this), editorRef);\n    }\n  }),\n      visualizer = _Oviz$visualize.visualizer;\n\n  return visualizer;\n}\n\nexport function registerBoxplot() {\n  register(MODULE_NAME, init);\n}\nregister(MODULE_NAME, init);","map":{"version":3,"sources":["/Users/wangzhenyu/Desktop/fyp_workspace/meta_platform/app/javascript/viz/immuneBar/index.ts"],"names":["Oviz","editorConfig","editorRef","template","register","registerEditorConfig","sample","color","xlabel","ylabel","title","xAxisIndex","yAxisIndex","MODULE_NAME","init","window","gon","module_name","visualize","el","data","labelFontSize","tickFontSize","xAxisRotated","loadData","fileKey","type","loaded","xAxisKey","columns","yAxisKey","IDKey","ID","map","d","typeKey","position1Key","position1","position2Key","position2","result","sortedResult","forEach","push","split","counter","eachResult","startPosition","item","index","console","log","five_prime_UTR_min","three_prime_UTR_max","max_length","gene_data","setup","visualizer","registerBoxplot"],"mappings":"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","sourcesContent":["import Oviz from \"crux\";\nimport { editorConfig, editorRef } from \"./editor\";\nimport template from \"./template.bvt\";\n\nimport { groupedChartColors} from \"oviz-common/palette\";\nimport { ComplexBoxplot, processBoxData } from \"oviz-components/complex-boxplot\";\nimport { GridPlot } from \"oviz-components/grid-plot\";\nimport { EditText } from \"oviz-components/edit-text\";\nimport {register} from \"page/visualizers\";\nimport { rankDict, sortByRankKey } from \"utils/bio-info\";\nimport { registerEditorConfig } from \"utils/editor\";\n//import data from \"utils/data\";  //导入默认的data\n\n\nconst sample = 0;\nconst color = \"#3d8eff\";\nconst xlabel = \"\";\nconst ylabel = \"\";\nconst title = \"Gene Structure\";\nconst xAxisIndex  = 0;\nconst yAxisIndex = 1;\n\nconst MODULE_NAME = \"immuneBar\";\n\nfunction init() {\n    if (!window.gon || window.gon.module_name !== MODULE_NAME) return;\n \n    const {visualizer} = Oviz.visualize({\n        el: \"#canvas\",\n        template,\n        data: {\n            color,\n            xlabel, ylabel, title,\n            labelFontSize: 12, //有关\n            tickFontSize: 14, //有关\n            xAxisRotated: true,\n            xAxisIndex,yAxisIndex,\n        },\n        loadData: {\n            data: {\n                fileKey: \"immuneBardata\",  \n                type: \"csv\", \n                loaded(data) { \n                    const xAxisKey = data.columns[xAxisIndex];\n                    const yAxisKey = data.columns[yAxisIndex];\nconst IDKey= data.columns[8];\nconst ID = data.map(d => d[IDKey]);\nconst typeKey= data.columns[2];\nconst type = data.map(d => d[typeKey]);\nconst position1Key= data.columns[3];\nconst position1 = data.map(d => d[position1Key]);\nconst position2Key= data.columns[4];\nconst position2 = data.map(d => d[position2Key]);\nconst result = [];\nconst sortedResult = [];\n\ndata.forEach(d => {\nresult.push([d[IDKey].split(';',1)[0], d[typeKey],d[position1Key],d[position2Key]]);\n});\n    \n    //find 5' and 3' add the data between to the same array\n    var counter = 0;\n    var eachResult = [];\n    var startPosition = [];\n    result.forEach((item,index) =>{\n        console.log(\"item\",item)\n        if(index == 0){\n        eachResult.push(item);\n        startPosition = item[2];\n        }\n        else if (item[0].split('=',2)[1] == result[index-1][0].split('=',2)[1]){\n        eachResult.push(item);\n            if(item[1]==\"five_prime_UTR\"){\n            startPosition = item[2];\n            }\n        }\n        else {\n            console.log(\"eachResult\",eachResult);\n        sortedResult.push(eachResult);\n        eachResult = [];\n        }\n        \n    })\n    console.log(\"sortedResult\",sortedResult);\n//find the start position of 5' in each item\n//find the minimum and maximum position to determine the length\nvar five_prime_UTR_min = position1[0];\nvar three_prime_UTR_max = position2[0];\ndata.forEach(d=>{\nif(d[typeKey] == \"five_prime_UTR\" && d[position1Key] - five_prime_UTR_min <0){\nfive_prime_UTR_min = d[position1Key];\n}\n}\n\n);\ndata.forEach(d=>{\nif(d[typeKey] == \"three_prime_UTR\" && d[position2Key] - three_prime_UTR_max>0){\nthree_prime_UTR_max = d[position2Key];\n}\n}\n\n);\nconsole.log(five_prime_UTR_min);\nconsole.log(three_prime_UTR_max);\nconst max_length = three_prime_UTR_max - five_prime_UTR_min;\nconsole.log(max_length);\nthis.data.gene_data=sortedResult;\nthis.data.max_length=max_length;\nthis.data.five_prime_UTR_min=five_prime_UTR_min;\nreturn {sortedResult,max_length,five_prime_UTR_min};\n},\n},\n        },\n        setup() { \n            console.log(\"this.data:\",this[\"_data\"]);\n            registerEditorConfig(editorConfig(this), editorRef);\n        },\n    });\n\n    return visualizer;\n}\n\nexport function registerBoxplot() {\n    register(MODULE_NAME, init);\n}\nregister(MODULE_NAME, init);\n\n"]},"metadata":{},"sourceType":"module"}