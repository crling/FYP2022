{"ast":null,"code":"function _toConsumableArray(arr) { return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _unsupportedIterableToArray(arr) || _nonIterableSpread(); }\n\nfunction _nonIterableSpread() { throw new TypeError(\"Invalid attempt to spread non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\"); }\n\nfunction _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === \"string\") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === \"Object\" && o.constructor) n = o.constructor.name; if (n === \"Map\" || n === \"Set\") return Array.from(o); if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }\n\nfunction _iterableToArray(iter) { if (typeof Symbol !== \"undefined\" && Symbol.iterator in Object(iter)) return Array.from(iter); }\n\nfunction _arrayWithoutHoles(arr) { if (Array.isArray(arr)) return _arrayLikeToArray(arr); }\n\nfunction _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }\n\nimport Oviz from \"crux\";\nimport template from \"./template.bvt\";\nvar color = \"#3d8eff\";\nexport function init(id, path, config) {\n  console.log(config);\n  var title = config[\"title\"];\n  var xlabel = config[\"xlabel\"];\n  var ylabel = config[\"ylabel\"];\n  Oviz.visualize({\n    el: id,\n    template: template,\n    data: {\n      color: color,\n      xlabel: xlabel,\n      ylabel: ylabel,\n      title: title\n    },\n    loadData: {\n      data: {\n        url: path,\n        type: \"csv\",\n        dsvHasHeader: true,\n        loaded: function loaded(data) {\n          var xAxisKey = data.columns[0];\n          var yAxisKey = data.columns[1];\n          var result = [];\n          data.forEach(function (d) {\n            result.push([d[xAxisKey], d[yAxisKey]]);\n          });\n          var max = Math.max.apply(Math, _toConsumableArray(result.map(function (d) {\n            return parseInt(d[1]);\n          })));\n          this.data.valueRange = [0, max];\n          return result.sort(function (a, b) {\n            return a[yAxisKey] - b[yAxisKey];\n          });\n        }\n      }\n    }\n  });\n}","map":{"version":3,"sources":["/Users/wangzhenyu/Desktop/fyp_workspace/meta_platform/app/javascript/viz/static_histogram/index.ts"],"names":["Oviz","template","color","init","id","path","config","console","log","title","xlabel","ylabel","visualize","el","data","loadData","url","type","dsvHasHeader","loaded","xAxisKey","columns","yAxisKey","result","forEach","d","push","max","Math","map","parseInt","valueRange","sort","a","b"],"mappings":";;;;;;;;;;;;AAAA,OAAOA,IAAP,MAAiB,MAAjB;AACA,OAAOC,QAAP,MAAqB,gBAArB;AAEA,IAAMC,KAAK,GAAG,SAAd;AAEA,OAAO,SAASC,IAAT,CAAcC,EAAd,EAAkBC,IAAlB,EAAwBC,MAAxB,EAAgC;AACnCC,EAAAA,OAAO,CAACC,GAAR,CAAYF,MAAZ;AACA,MAAMG,KAAK,GAAGH,MAAM,CAAC,OAAD,CAApB;AACA,MAAMI,MAAM,GAAGJ,MAAM,CAAC,QAAD,CAArB;AACA,MAAMK,MAAM,GAAGL,MAAM,CAAC,QAAD,CAArB;AACAN,EAAAA,IAAI,CAACY,SAAL,CAAe;AACXC,IAAAA,EAAE,EAAET,EADO;AAEXH,IAAAA,QAAQ,EAARA,QAFW;AAGXa,IAAAA,IAAI,EAAE;AAACZ,MAAAA,KAAK,EAALA,KAAD;AAAQQ,MAAAA,MAAM,EAANA,MAAR;AAAgBC,MAAAA,MAAM,EAANA,MAAhB;AAAwBF,MAAAA,KAAK,EAALA;AAAxB,KAHK;AAIXM,IAAAA,QAAQ,EAAE;AACND,MAAAA,IAAI,EAAE;AACFE,QAAAA,GAAG,EAAEX,IADH;AAEFY,QAAAA,IAAI,EAAE,KAFJ;AAGFC,QAAAA,YAAY,EAAE,IAHZ;AAIFC,QAAAA,MAJE,kBAIKL,IAJL,EAIW;AACT,cAAMM,QAAQ,GAAGN,IAAI,CAACO,OAAL,CAAa,CAAb,CAAjB;AACA,cAAMC,QAAQ,GAAGR,IAAI,CAACO,OAAL,CAAa,CAAb,CAAjB;AACA,cAAME,MAAM,GAAG,EAAf;AACAT,UAAAA,IAAI,CAACU,OAAL,CAAa,UAAAC,CAAC,EAAI;AACdF,YAAAA,MAAM,CAACG,IAAP,CAAY,CAACD,CAAC,CAACL,QAAD,CAAF,EAAcK,CAAC,CAACH,QAAD,CAAf,CAAZ;AACH,WAFD;AAGA,cAAMK,GAAG,GAAGC,IAAI,CAACD,GAAL,OAAAC,IAAI,qBAAQL,MAAM,CAACM,GAAP,CAAW,UAAAJ,CAAC;AAAA,mBAAEK,QAAQ,CAACL,CAAC,CAAC,CAAD,CAAF,CAAV;AAAA,WAAZ,CAAR,EAAhB;AACA,eAAKX,IAAL,CAAUiB,UAAV,GAAuB,CAAC,CAAD,EAAIJ,GAAJ,CAAvB;AACA,iBAAOJ,MAAM,CAACS,IAAP,CAAY,UAACC,CAAD,EAAIC,CAAJ;AAAA,mBAASD,CAAC,CAACX,QAAD,CAAD,GAAYY,CAAC,CAACZ,QAAD,CAAtB;AAAA,WAAZ,CAAP;AACH;AAdC;AADA;AAJC,GAAf;AAwBH","sourcesContent":["import Oviz from \"crux\"\nimport template from \"./template.bvt\"\n\nconst color = \"#3d8eff\";\n\nexport function init(id, path, config) {\n    console.log(config);\n    const title = config[\"title\"];\n    const xlabel = config[\"xlabel\"];\n    const ylabel = config[\"ylabel\"];\n    Oviz.visualize({\n        el: id,\n        template,\n        data: {color, xlabel, ylabel, title},\n        loadData: {\n            data: {\n                url: path,\n                type: \"csv\",\n                dsvHasHeader: true,\n                loaded(data) {\n                    const xAxisKey = data.columns[0];\n                    const yAxisKey = data.columns[1];\n                    const result = [];\n                    data.forEach(d => {\n                        result.push([d[xAxisKey], d[yAxisKey]]);\n                    });\n                    const max = Math.max(...result.map(d=>parseInt(d[1])));\n                    this.data.valueRange = [0, max]\n                    return result.sort((a, b)=> a[yAxisKey]-b[yAxisKey]);\n                },\n            },\n\n        }, \n    });\n}\n"]},"metadata":{},"sourceType":"module"}