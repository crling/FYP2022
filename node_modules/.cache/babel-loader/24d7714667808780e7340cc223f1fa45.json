{"ast":null,"code":"import Oviz from \"crux\";\nimport { parseNewick } from \"crux/dist/utils\";\nimport * as text_size from \"crux/dist/utils/text-size\";\nimport * as d3 from \"d3-hierarchy\";\nvar groupColors = [\"#908CA8\", \"#D49C98\", \"#EBCFB9\", \"#BA93A1\", \"#687B9F\", \"#8A7F89\", \"#A08279\", \"#B5AEB3\", \"#A97D61\", \"#826C94\"];\nvar rainbow = [\"hsl(340, 82%, 76%)\", \"hsl(0, 73%, 77%)\", \"hsl(14, 100%, 78%)\", \"hsl(36, 100%, 75%)\", \"hsl(45, 100%, 75%)\", \"hsl(54, 90%, 72%)\", // \"hsl(54, 100%, 81%)\",\n\"hsl(66, 71%, 77%)\", \"hsl(88, 50%, 76%)\", \"hsl(122, 37%, 74%)\", \"hsl(174, 42%, 65%)\", \"hsl(187, 72%, 71%)\", \"hsl(199, 82%, 74%)\", \"hsl(212, 90%, 74%)\", \"hsl(231, 44%, 74%)\", \"hsl(261, 46%, 74%)\", \"hsl(291, 47%, 71%)\"];\nexport var dataOpt = {\n  allLevel: [\"r\", \"k\", \"p\", \"c\", \"o\", \"f\", \"g\", \"s\"],\n  allRank: [\"Root\", \"Kingdom\", \"Phylum\", \"Class\", \"Order\", \"Family\", \"Genus\", \"Species\"],\n  level: 7,\n  treeDepth: 4,\n  maxTextLength: 0,\n  treeRadius: 350,\n  treeLeafSize: 20,\n  treeHeight: 0,\n  boxLegend: 8,\n  isRadical: false,\n  maxQvalue: 0.05,\n  distinctNodeOnly: false,\n  showDistinctNodeName: true,\n  showAllNodeName: true,\n  boxPlotLength: 600,\n  logPara: 0.01\n};\nexport var library = {\n  s_dict: [],\n  id_group: {\n    dict: [],\n    group1: \"\",\n    group2: \"\"\n  },\n  matrix_dict: [],\n  color_dict: {}\n};\n\nfunction Node(name) {\n  this.Name = name;\n  this.children = [];\n  this.next = null;\n  this.parent = null;\n\n  this.addChild = function addChild(node) {\n    this.children.push(node);\n  };\n}\n\nfunction Tree(root) {\n  this.root = new Node(root);\n  this.allNode = [];\n  this.allNode[\"r__Root\"] = this.root;\n\n  this.add = function addNode(node) {\n    this.allNode[node.Name] = node;\n  };\n}\n\nfunction normalize(num, max_origin, min_origin) {\n  return (Math.log2(num) - Math.log2(min_origin)) / (Math.log2(max_origin) - Math.log2(min_origin)) * dataOpt.boxPlotLength; // return ( ( num - min_origin ) / ( max_origin - min_origin ) * dataOpt.boxPlotLength);\n}\n\nfunction boxPlotValue(group_data, max_origin, min_origin) {\n  var statics_origin = new Oviz.algo.Statistics(group_data);\n  var interQuartileRange = statics_origin.Q3() - statics_origin.Q1();\n  var outliners = [];\n  var inliners = [];\n  group_data.forEach(function (d) {\n    if (d < statics_origin.Q1() - 1.5 * interQuartileRange || d > statics_origin.Q3() + 1.5 * interQuartileRange) {\n      outliners.push(normalize(d + dataOpt.logPara, max_origin, min_origin));\n    } else {\n      inliners.push(d);\n    }\n  });\n  var statics = new Oviz.algo.Statistics(inliners);\n  var max = normalize(statics.max() + dataOpt.logPara, max_origin, min_origin);\n  var min = normalize(statics.min() + dataOpt.logPara, max_origin, min_origin);\n  var q1 = normalize(statics.Q1() + dataOpt.logPara, max_origin, min_origin);\n  var q3 = normalize(statics.Q3() + dataOpt.logPara, max_origin, min_origin);\n  var mean = normalize(statics.mean() + dataOpt.logPara, max_origin, min_origin);\n  var median = normalize(statics.median() + dataOpt.logPara, max_origin, min_origin);\n  return {\n    max: max,\n    min: min,\n    q1: q1,\n    q3: q3,\n    mean: mean,\n    median: median,\n    outliners: outliners,\n    length: inliners.length\n  };\n}\n\nexport function loadAnnoData(data) {\n  var id_group = {\n    dict: [],\n    group1: \"\",\n    group2: \"\"\n  };\n  data.forEach(function (d) {\n    id_group.dict[d.ID] = d.Group;\n\n    if (id_group.group1 === \"\") {\n      id_group.group1 = d.Group;\n    } else if (id_group.group2 === \"\" && id_group.group1 !== d.Group) {\n      id_group.group2 = d.Group;\n    }\n  });\n  return id_group;\n}\nexport function annoLoaded(_data) {\n  library.id_group = loadAnnoData(_data);\n  return _data;\n}\nexport function loadMatrixData(_data) {\n  var enriched = _data.columns[9];\n  var qvalue = _data.columns[11];\n  var occ_rate_group1 = _data.columns[4].substring(9) === library.id_group.group1 + \")\" ? _data.columns[4] : _data.columns[8];\n  var mean_group1 = _data.columns[1].substring(5) === library.id_group.group1 + \")\" ? _data.columns[1] : _data.columns[5];\n  var occ_rate_group2 = _data.columns[4].substring(9) === library.id_group.group2 + \")\" ? _data.columns[4] : _data.columns[8];\n  var mean_group2 = _data.columns[1].substring(5) === library.id_group.group2 + \")\" ? _data.columns[1] : _data.columns[5];\n  var matrix_dict = [];\n  matrix_dict[\"r__Root\"] = {\n    enriched: \"N/A\",\n    qvalue: \"N/A\",\n    mean_group1: 0.0,\n    mean_group2: 0.0\n  };\n\n  _data.forEach(function (d) {\n    var is_valid_group1 = parseFloat(d[occ_rate_group1]) > 0.2 && parseFloat(d[mean_group1]) > 0.05;\n    var is_valid_group2 = parseFloat(d[occ_rate_group2]) > 0.2 && parseFloat(d[mean_group2]) > 0.05;\n    var isValid = is_valid_group1 || is_valid_group2;\n\n    if (isValid) {\n      matrix_dict[d.ID] = {\n        enriched: d[enriched],\n        qvalue: parseFloat(d[qvalue]),\n        mean_group1: parseFloat(d[mean_group1]),\n        mean_group2: parseFloat(d[mean_group2])\n      };\n    }\n  });\n\n  return matrix_dict;\n}\nexport function matrixLoaded(_data) {\n  library.matrix_dict = loadMatrixData(_data);\n  return _data;\n}\nexport function getLinkColor(nodes, treeDepth) {\n  var depthNodes = nodes.filter(function (d) {\n    return d.depth === treeDepth;\n  });\n  var len = depthNodes.length;\n  var color = Oviz.color.ColorSchemeCategory.create(len);\n  var depthNodesLegend = [];\n  var colorNodes = [];\n  var colorLinks = [];\n  var depthPathNodes = [];\n\n  var nodeColor = function nodeColor(hslString) {\n    var attrs = hslString.split(\"(\")[1].substring(0, hslString.length - 1);\n    var h = parseFloat(attrs.split(\",\")[0]);\n    var s = parseInt(attrs.split(\",\")[1].substring(0, hslString.length - 1)) - 10;\n    var l = parseInt(attrs.split(\",\")[2].substring(0, hslString.length - 1)) + 20;\n    return \"hsl(\".concat(h, \",\").concat(s, \"%,\").concat(l, \"%)\"); // return hslString;\n  };\n\n  var linkColor = function linkColor(hslString) {\n    var attrs = hslString.split(\"(\")[1].substring(0, hslString.length - 1);\n    var h = parseFloat(attrs.split(\",\")[0]);\n    var s = parseInt(attrs.split(\",\")[1].substring(0, hslString.length - 1)) + 30;\n    var l = parseInt(attrs.split(\",\")[2].substring(0, hslString.length - 1)) - 20;\n    return \"hsl(\".concat(h, \",\").concat(s, \"%,\").concat(l, \"%)\");\n  };\n\n  var dark30 = function dark30(hslString) {\n    var attrs = hslString.split(\"(\")[1].substring(0, hslString.length - 1);\n    var h = parseFloat(attrs.split(\",\")[0]);\n    var s = parseInt(attrs.split(\",\")[1]);\n    var l = parseInt(attrs.split(\",\")[2].substring(0, hslString.length - 1)) - 30;\n    return \"hsl(\".concat(h, \",\").concat(s, \"%,\").concat(l, \"%)\");\n  };\n\n  var dark50 = function dark50(hslString) {\n    var attrs = hslString.split(\"(\")[1].substring(0, hslString.length - 1);\n    var h = parseFloat(attrs.split(\",\")[0]);\n    var s = parseInt(attrs.split(\",\")[1]);\n    var l = parseInt(attrs.split(\",\")[2].substring(0, hslString.length - 1)) - 40;\n    return \"hsl(\".concat(h, \",\").concat(s, \"%,\").concat(l, \"%)\");\n  };\n\n  var getColors = function getColors(n) {\n    var div = Math.floor(rainbow.length / n);\n    var colors = [];\n\n    for (var i = 0; i < n; i++) {\n      colors.push(rainbow[i * div]);\n    }\n\n    return colors;\n  };\n\n  var rainbowColors = getColors(depthNodes.length);\n  var c = 0;\n  depthNodes.forEach(function (d, i) {\n    var info = {\n      name: d.data.name,\n      x: 0,\n      y: 0,\n      // color: nodeColor( color.get(i)),\n      color: rainbowColors[i]\n    };\n    c = dataOpt.showDistinctNodeName ? 1 : Math.floor(len / 10) < 2 ? 1 : 2;\n    var a = i % c;\n    var b = Math.ceil((i + 1) / c) - 1;\n    info.x = a * 250;\n    info.y = b * 25;\n    depthNodesLegend.push(info);\n  });\n  nodes.forEach(function (d) {\n    if (d.depth < treeDepth) {\n      colorNodes[d.data.name] = \"#aaa\";\n      colorLinks[d.data.name] = \"#777\";\n    } else {\n      var node_name = d.data.name;\n      var tempNode = d;\n\n      while (tempNode.depth !== treeDepth) {\n        tempNode = tempNode.parent;\n      }\n\n      depthPathNodes[d.data.name] = tempNode.data.name;\n      depthNodes.forEach(function (d, j) {\n        if (d.data.name === tempNode.data.name) {\n          colorNodes[node_name] = rainbowColors[j];\n          colorLinks[node_name] = dark50(rainbowColors[j]);\n          return true;\n        }\n      });\n    }\n  });\n  return {\n    colorNodes: colorNodes,\n    colorLinks: colorLinks,\n    depthPathNodes: depthPathNodes,\n    depthNodesLegend: depthNodesLegend\n  };\n}\nexport function loadTreeData(data) {\n  // only contains the nodes have at least one S level child\n  var s_dict = [];\n  var Name = data.columns[0];\n  data.forEach(function (d) {\n    if (typeof d[Name] === \"string\") {\n      d[Name] = d[Name].split(\"|\");\n    }\n\n    var arr_len = d[Name].length;\n\n    if (d[Name][arr_len - 1][0] === dataOpt.allLevel[dataOpt.level] && library.matrix_dict[d[Name][arr_len - 1]]) {\n      var isDistinct = library.matrix_dict[d[Name][arr_len - 1]].qvalue < dataOpt.maxQvalue;\n      var textLength = text_size.measuredTextSize(d[Name][arr_len - 1].substring(3)).width;\n      dataOpt.maxTextLength = Math.max(dataOpt.maxTextLength, textLength);\n      var isEnter = dataOpt.distinctNodeOnly ? isDistinct ? true : false : true;\n\n      if (isEnter) {\n        d[Name].some(function (n) {\n          if (!s_dict[n]) {\n            s_dict[n] = 1;\n          }\n        });\n      }\n    }\n  });\n  return s_dict;\n}\nexport function main(_data) {\n  library.s_dict = loadTreeData(_data);\n  var all_info_box = [];\n  var tree = new Tree(\"r__Root\");\n  var Name = _data.columns[0];\n  var group1_length = 0;\n  var group2_length = 0;\n\n  _data.some(function (d) {\n    var arr_len = d[Name].length;\n\n    if (library.s_dict[d[Name][arr_len - 1]]) {\n      var node = new Node(d[Name][arr_len - 1]);\n      tree.add(node);\n      var parent_name, parent_node;\n\n      if (arr_len === 1) {\n        parent_name = \"r__Root\";\n      } else {\n        parent_name = d[Name][arr_len - 2];\n      }\n\n      parent_node = tree.allNode[parent_name];\n      var child_num = parent_node.children.length;\n\n      if (child_num > 0) {\n        parent_node.children[child_num - 1].next = node;\n      }\n\n      parent_node.addChild(node);\n      node.parent = parent_node;\n      var arr1 = [];\n      var arr2 = [];\n      Object.keys(d).forEach(function (key) {\n        if (library.id_group.dict[key]) {\n          if (library.id_group.dict[key] === library.id_group.group1) {\n            arr1.push(parseFloat(d[key]));\n          } else if (library.id_group.dict[key] === library.id_group.group2) {\n            arr2.push(parseFloat(d[key]));\n          }\n        }\n      });\n      group1_length = arr1.length;\n      group2_length = arr2.length;\n      all_info_box[d[Name][arr_len - 1]] = {\n        group1: arr1,\n        group2: arr2\n      };\n    }\n  });\n\n  var mean_info_box = [];\n  var max_mean = 0;\n  var min_mean = 100;\n  Object.keys(all_info_box).forEach(function (key) {\n    var temp_mean = Math.log2(library.matrix_dict[key].mean_group1 * group1_length + library.matrix_dict[key].mean_group2 * group2_length + 2) * 1.5;\n    mean_info_box[key] = temp_mean;\n    max_mean = Math.max(temp_mean, max_mean);\n    min_mean = Math.min(temp_mean, min_mean);\n  });\n  var i = 0;\n  var newick = \"\";\n  var curr = tree.root;\n\n  while (1) {\n    while (i !== dataOpt.level) {\n      newick = curr.Name === \"r__Root\" ? \"r__Root\" : newick[0] !== \",\" ? \"\".concat(curr.Name, \")\") + newick : curr.Name + newick;\n      curr = curr.children[0];\n      i++;\n    }\n\n    newick = \")\" + newick;\n\n    while (curr.next !== null) {\n      newick = \",\".concat(curr.Name) + newick;\n      curr = curr.next;\n    }\n\n    newick = curr.Name + newick;\n\n    while (curr.next === null) {\n      curr = curr.parent;\n      i--;\n      newick = \"(\" + newick;\n\n      if (i === 0) {\n        break;\n      }\n    }\n\n    newick = \",\" + newick;\n\n    if (i !== 0) {\n      curr = curr.next;\n    } else {\n      break;\n    }\n  }\n\n  newick = newick.substring(1);\n  var treeNewick = parseNewick(newick);\n  var treeData = parseTreeData(treeNewick);\n  var hierarchy = d3.hierarchy(treeData).sum(function (d) {\n    return d.length;\n  });\n  var allNodes = [];\n  var leaves = [];\n  var nodes = [];\n  var box_values = [];\n  hierarchy.each(function (n) {\n    if (n.children) {\n      nodes.push(n);\n    } else {\n      leaves.push(n);\n      box_values = box_values.concat(all_info_box[n.data.name].group1);\n      box_values = box_values.concat(all_info_box[n.data.name].group2);\n    }\n\n    allNodes.push(n);\n  });\n  var distinct_leaves = {\n    UL: {\n      maxTextLength: 0,\n      nodes: []\n    },\n    UR: {\n      maxTextLength: 0,\n      nodes: []\n    },\n    DL: {\n      maxTextLength: 0,\n      nodes: []\n    },\n    DR: {\n      maxTextLength: 0,\n      nodes: []\n    }\n  };\n  var leave_link_dict = [];\n  var basic_angle = 360.0 / (2 * leaves.length);\n  leaves.some(function (n, i) {\n    if (library.matrix_dict[n.data.name].qvalue < dataOpt.maxQvalue) {\n      if (i < leaves.length * 0.25) {\n        distinct_leaves.UR.maxTextLength = Math.max(distinct_leaves.UR.maxTextLength, text_size.measuredTextSize(n.data.name).width);\n        distinct_leaves.UR.nodes.push({\n          name: n.data.name,\n          x: 0.0,\n          y: 0\n        });\n        leave_link_dict[n.data.name] = {\n          x: (dataOpt.treeRadius - dataOpt.treeLeafSize) * Math.sin((i * 2 + 1) * basic_angle * 0.017453293) + 680,\n          y: -(dataOpt.treeRadius - dataOpt.treeLeafSize) * Math.cos((i * 2 + 1) * basic_angle * 0.017453293) + 395\n        };\n      } else if (i < leaves.length * 0.5) {\n        distinct_leaves.DR.maxTextLength = Math.max(distinct_leaves.DR.maxTextLength, text_size.measuredTextSize(n.data.name).width);\n        distinct_leaves.DR.nodes.push({\n          name: n.data.name,\n          x: 0.0,\n          y: 0\n        });\n        leave_link_dict[n.data.name] = {\n          x: (dataOpt.treeRadius - dataOpt.treeLeafSize) * Math.sin((i * 2 + 1) * basic_angle * 0.017453293) + 695,\n          y: -(dataOpt.treeRadius - dataOpt.treeLeafSize) * Math.cos((i * 2 + 1) * basic_angle * 0.017453293) + 425\n        };\n      } else if (i < leaves.length * 0.75) {\n        distinct_leaves.DL.maxTextLength = Math.max(distinct_leaves.DL.maxTextLength, text_size.measuredTextSize(n.data.name).width);\n        distinct_leaves.DL.nodes.push({\n          name: n.data.name,\n          x: text_size.measuredTextSize(n.data.name).width,\n          y: 0\n        });\n        leave_link_dict[n.data.name] = {\n          x: (dataOpt.treeRadius - dataOpt.treeLeafSize) * Math.sin((i * 2 + 1) * basic_angle * 0.017453293) + 695,\n          y: -(dataOpt.treeRadius - dataOpt.treeLeafSize) * Math.cos((i * 2 + 1) * basic_angle * 0.017453293) + 425\n        };\n      } else {\n        distinct_leaves.UL.maxTextLength = Math.max(distinct_leaves.UL.maxTextLength, text_size.measuredTextSize(n.data.name).width);\n        distinct_leaves.UL.nodes.push({\n          name: n.data.name,\n          x: text_size.measuredTextSize(n.data.name).width,\n          y: 0\n        });\n        leave_link_dict[n.data.name] = {\n          x: (dataOpt.treeRadius - dataOpt.treeLeafSize) * Math.sin((i * 2 + 1) * basic_angle * 0.017453293) + 695,\n          y: -(dataOpt.treeRadius - dataOpt.treeLeafSize) * Math.cos((i * 2 + 1) * basic_angle * 0.017453293) + 425\n        };\n      }\n    }\n  });\n  distinct_leaves.UL.nodes.forEach(function (node, i) {\n    node.x = 170 - node.x + 50;\n    node.y = (distinct_leaves.UL.nodes.length - i - 1) * 25 + 50;\n  });\n  distinct_leaves.DL.nodes.forEach(function (node, i) {\n    node.x = 170 - node.x + 50;\n    node.y = (distinct_leaves.DL.nodes.length - i - 1) * 25 + 60 + 325;\n  });\n  distinct_leaves.DR.nodes.forEach(function (node, i) {\n    node.y = i * 25 + 60 + 325;\n  });\n  distinct_leaves.UR.nodes.forEach(function (node, i) {\n    node.y = i * 25 + 50;\n  });\n  library.color_dict = getLinkColor(allNodes, dataOpt.treeDepth);\n  var max = 0;\n  var min = 0; // const max = Math.max(...box_values) + dataOpt.logPara;\n  // const min = Math.min(...box_values) + dataOpt.logPara;\n\n  var leave_box_dict = [];\n  leaves.some(function (l) {\n    leave_box_dict[l.data.name] = {\n      group1: boxPlotValue(all_info_box[l.data.name].group1, max, min),\n      group2: boxPlotValue(all_info_box[l.data.name].group2, max, min)\n    };\n  });\n  dataOpt.isRadical = leaves.length > 20 ? true : false;\n\n  var branchShouldStayOnTop = function branchShouldStayOnTop(l, t) {\n    if (l.target.data.data.qvalue < dataOpt.maxQvalue) return true;\n    return false;\n  };\n\n  if (!!this) this.data.branchShouldStayOnTop = branchShouldStayOnTop;\n  console.log(treeData.children[0].data);\n  return {\n    treeData: treeData,\n    dataOpt: dataOpt,\n    leave_box_dict: leave_box_dict,\n    mean_info_box: mean_info_box,\n    max_mean: max_mean,\n    min_mean: min_mean,\n    library: library,\n    allNodes: allNodes,\n    leaves: leaves,\n    distinct_leaves: distinct_leaves,\n    leave_link_dict: leave_link_dict,\n    _data: _data,\n    max: max,\n    min: min\n  };\n}\n\nfunction parseTreeData(tree) {\n  if (library.matrix_dict[tree.name]) tree.data = library.matrix_dict[tree.name];\n\n  if (tree.children) {\n    tree.children.map(function (child) {\n      parseTreeData(child);\n    });\n  }\n\n  return tree;\n}\n\nexport function updateBranchZIndex(v) {\n  if (!v || !v.data) return;\n\n  var branchShouldStayOnTop = function branchShouldStayOnTop(l, t) {\n    if (l.target.data.data.qvalue < v.data.main.dataOpt.maxQvalue) return true;\n    return false;\n  };\n\n  v.data.branchShouldStayOnTop = branchShouldStayOnTop;\n}","map":{"version":3,"sources":["/Users/wangzhenyu/Desktop/fyp_workspace/meta_platform/app/javascript/viz/tree/data.ts"],"names":["Oviz","parseNewick","text_size","d3","groupColors","rainbow","dataOpt","allLevel","allRank","level","treeDepth","maxTextLength","treeRadius","treeLeafSize","treeHeight","boxLegend","isRadical","maxQvalue","distinctNodeOnly","showDistinctNodeName","showAllNodeName","boxPlotLength","logPara","library","s_dict","id_group","dict","group1","group2","matrix_dict","color_dict","Node","name","Name","children","next","parent","addChild","node","push","Tree","root","allNode","add","addNode","normalize","num","max_origin","min_origin","Math","log2","boxPlotValue","group_data","statics_origin","algo","Statistics","interQuartileRange","Q3","Q1","outliners","inliners","forEach","d","statics","max","min","q1","q3","mean","median","length","loadAnnoData","data","ID","Group","annoLoaded","_data","loadMatrixData","enriched","columns","qvalue","occ_rate_group1","substring","mean_group1","occ_rate_group2","mean_group2","is_valid_group1","parseFloat","is_valid_group2","isValid","matrixLoaded","getLinkColor","nodes","depthNodes","filter","depth","len","color","ColorSchemeCategory","create","depthNodesLegend","colorNodes","colorLinks","depthPathNodes","nodeColor","hslString","attrs","split","h","s","parseInt","l","linkColor","dark30","dark50","getColors","n","div","floor","colors","i","rainbowColors","c","info","x","y","a","b","ceil","node_name","tempNode","j","loadTreeData","arr_len","isDistinct","textLength","measuredTextSize","width","isEnter","some","main","all_info_box","tree","group1_length","group2_length","parent_name","parent_node","child_num","arr1","arr2","Object","keys","key","mean_info_box","max_mean","min_mean","temp_mean","newick","curr","treeNewick","treeData","parseTreeData","hierarchy","sum","allNodes","leaves","box_values","each","concat","distinct_leaves","UL","UR","DL","DR","leave_link_dict","basic_angle","sin","cos","leave_box_dict","branchShouldStayOnTop","t","target","console","log","map","child","updateBranchZIndex","v"],"mappings":"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","sourcesContent":["import Oviz from \"crux\";\nimport { parseNewick } from \"crux/dist/utils\";\nimport * as text_size from \"crux/dist/utils/text-size\";\nimport * as d3 from \"d3-hierarchy\";\n\nconst groupColors = [\"#908CA8\",\n\"#D49C98\",\n\"#EBCFB9\",\n\"#BA93A1\",\n\"#687B9F\",\n\"#8A7F89\",\n\"#A08279\",\n\"#B5AEB3\",\n\"#A97D61\",\n\"#826C94\"];\n\nconst rainbow = [ \"hsl(340, 82%, 76%)\",\n\"hsl(0, 73%, 77%)\",\n\"hsl(14, 100%, 78%)\",\n\"hsl(36, 100%, 75%)\",\n\"hsl(45, 100%, 75%)\",\n\"hsl(54, 90%, 72%)\", // \"hsl(54, 100%, 81%)\",\n\"hsl(66, 71%, 77%)\",\n\"hsl(88, 50%, 76%)\",\n\"hsl(122, 37%, 74%)\",\n\"hsl(174, 42%, 65%)\",\n\"hsl(187, 72%, 71%)\",\n\"hsl(199, 82%, 74%)\",\n\"hsl(212, 90%, 74%)\",\n\"hsl(231, 44%, 74%)\",\n\"hsl(261, 46%, 74%)\",\n\"hsl(291, 47%, 71%)\",\n];\n\nexport let dataOpt = {\n    allLevel: [\"r\", \"k\", \"p\", \"c\", \"o\", \"f\", \"g\", \"s\"],\n    allRank: [\"Root\", \"Kingdom\", \"Phylum\", \"Class\", \"Order\", \"Family\", \"Genus\", \"Species\"],\n    level : 7,\n    treeDepth: 4,\n    maxTextLength: 0,\n    treeRadius: 350,\n    treeLeafSize: 20,\n    treeHeight: 0,\n    boxLegend: 8,\n    isRadical: false,\n    maxQvalue: 0.05,\n    distinctNodeOnly: false,\n    showDistinctNodeName: true,\n    showAllNodeName: true,\n    boxPlotLength: 600,\n    logPara: 0.01,\n};\n\nexport let library = {\n    s_dict: [],\n    id_group: {\n        dict: [],\n        group1: \"\",\n        group2: \"\",\n    },\n    matrix_dict: [],\n    color_dict: {},\n};\n\nfunction Node(name) {\n\n    this.Name = name;\n    this.children = [];\n    this.next = null;\n    this.parent = null;\n\n    this.addChild = function addChild(node) {\n        this.children.push(node);\n    };\n\n}\n\nfunction Tree(root) {\n\n    this.root = new Node(root);\n    this.allNode = [];\n    this.allNode[\"r__Root\"] = this.root;\n\n    this.add = function addNode(node) {\n        this.allNode[node.Name] = node;\n    };\n}\n\nfunction normalize(num: number, max_origin: number, min_origin: number) {\n    return ( ( Math.log2(num) - Math.log2(min_origin) ) / ( Math.log2(max_origin) - Math.log2(min_origin) ) * dataOpt.boxPlotLength);\n    // return ( ( num - min_origin ) / ( max_origin - min_origin ) * dataOpt.boxPlotLength);\n}\n\nfunction boxPlotValue(group_data, max_origin: number, min_origin: number) {\n    const statics_origin = new Oviz.algo.Statistics(group_data);\n    const interQuartileRange = statics_origin.Q3() - statics_origin.Q1();\n    const outliners = [];\n    const inliners = [];\n    group_data.forEach(d => {\n        if ((d < statics_origin.Q1() - 1.5 * interQuartileRange) || (d > statics_origin.Q3() + 1.5 * interQuartileRange)) {\n            outliners.push(normalize(d + dataOpt.logPara, max_origin, min_origin));\n        } else {\n            inliners.push(d);\n        }\n    });\n    const statics = new Oviz.algo.Statistics(inliners);\n    const max = normalize(statics.max() + dataOpt.logPara, max_origin, min_origin);\n    const min = normalize(statics.min() + dataOpt.logPara, max_origin, min_origin);\n    const q1 = normalize(statics.Q1() + dataOpt.logPara, max_origin, min_origin);\n    const q3 = normalize(statics.Q3() + dataOpt.logPara, max_origin, min_origin);\n    const mean = normalize(statics.mean() + dataOpt.logPara, max_origin, min_origin);\n    const median = normalize(statics.median() + dataOpt.logPara, max_origin, min_origin);\n    return {\n        max: max,\n        min: min,\n        q1: q1,\n        q3: q3,\n        mean: mean,\n        median: median,\n        outliners: outliners,\n        length: inliners.length,\n    };\n}\n\nexport function loadAnnoData(data) {\n\n    const id_group = {\n        dict: [],\n        group1: \"\",\n        group2: \"\",\n    };\n\n    data.forEach(d => {\n        id_group.dict[d.ID] = d.Group;\n        if (id_group.group1 === \"\") {\n            id_group.group1 = d.Group;\n        } else if (id_group.group2 === \"\" && id_group.group1 !== d.Group) {\n            id_group.group2 = d.Group;\n        }\n    });\n\n    return id_group;\n}\n\nexport function annoLoaded(_data) {\n    library.id_group = loadAnnoData(_data);\n    return _data;\n}\n\nexport function loadMatrixData(_data) {\n\n    const enriched = _data.columns[9];\n    const qvalue = _data.columns[11];\n    const occ_rate_group1 = (_data.columns[4].substring(9) === library.id_group.group1 + \")\") ? _data.columns[4] : _data.columns[8];\n    const mean_group1 = (_data.columns[1].substring(5) === library.id_group.group1 + \")\") ? _data.columns[1] : _data.columns[5];\n    const occ_rate_group2 = (_data.columns[4].substring(9) === library.id_group.group2 + \")\") ? _data.columns[4] : _data.columns[8];\n    const mean_group2 = (_data.columns[1].substring(5) === library.id_group.group2 + \")\") ? _data.columns[1] : _data.columns[5];\n\n    const matrix_dict = [];\n\n    matrix_dict[\"r__Root\"] = {\n        enriched: \"N/A\",\n        qvalue: \"N/A\",\n        mean_group1: 0.0,\n        mean_group2: 0.0,\n    };\n\n    _data.forEach(d => {\n\n        const is_valid_group1 = (parseFloat(d[occ_rate_group1]) > 0.2 && parseFloat(d[mean_group1]) > 0.05);\n        const is_valid_group2 = (parseFloat(d[occ_rate_group2]) > 0.2 && parseFloat(d[mean_group2]) > 0.05);\n        const isValid = is_valid_group1 || is_valid_group2;\n\n        if (isValid) {\n            matrix_dict[d.ID] = {\n                enriched: d[enriched],\n                qvalue: parseFloat(d[qvalue]),\n                mean_group1: parseFloat(d[mean_group1]),\n                mean_group2: parseFloat(d[mean_group2]),\n            };\n        }\n\n    });\n    return matrix_dict;\n}\n\nexport function matrixLoaded(_data) {\n\n    library.matrix_dict = loadMatrixData(_data);\n\n    return _data;\n}\n\nexport function getLinkColor(nodes, treeDepth) {\n\n    const depthNodes = nodes.filter(d => d.depth === treeDepth);\n\n    const len = depthNodes.length;\n\n    const color = Oviz.color.ColorSchemeCategory.create(len);\n\n    const depthNodesLegend = [];\n    const colorNodes = [];\n    const colorLinks = [];\n    const depthPathNodes = [];\n\n    const nodeColor = (hslString: string) => {\n        const attrs = hslString.split(\"(\")[1].substring(0, hslString.length - 1);\n        const h = parseFloat(attrs.split(\",\")[0]);\n        const s = parseInt(attrs.split(\",\")[1].substring(0, hslString.length - 1)) - 10;\n        const l = parseInt(attrs.split(\",\")[2].substring(0, hslString.length - 1)) + 20;\n        return `hsl(${h},${s}%,${l}%)`;\n        // return hslString;\n    };\n\n    const linkColor = (hslString: string) => {\n        const attrs = hslString.split(\"(\")[1].substring(0, hslString.length - 1);\n        const h = parseFloat(attrs.split(\",\")[0]);\n        const s = parseInt(attrs.split(\",\")[1].substring(0, hslString.length - 1)) + 30;\n        const l = parseInt(attrs.split(\",\")[2].substring(0, hslString.length - 1)) - 20;\n        return `hsl(${h},${s}%,${l}%)`;\n    };\n\n    const dark30 = (hslString: string) => {\n        const attrs = hslString.split(\"(\")[1].substring(0, hslString.length - 1);\n        const h = parseFloat(attrs.split(\",\")[0]);\n        const s = parseInt(attrs.split(\",\")[1]);\n        const l = parseInt(attrs.split(\",\")[2].substring(0, hslString.length - 1)) - 30;\n        return `hsl(${h},${s}%,${l}%)`;\n    };\n    const dark50 = (hslString: string) => {\n        const attrs = hslString.split(\"(\")[1].substring(0, hslString.length - 1);\n        const h = parseFloat(attrs.split(\",\")[0]);\n        const s = parseInt(attrs.split(\",\")[1]);\n        const l = parseInt(attrs.split(\",\")[2].substring(0, hslString.length - 1)) - 40;\n        return `hsl(${h},${s}%,${l}%)`;\n    };\n\n    const getColors = (n: number) => {\n        const div = Math.floor(rainbow.length / n);\n        const colors = [];\n        for (let i = 0; i < n; i ++) {\n            colors.push(rainbow[i * div]);\n        }\n        return colors;\n    };\n    const rainbowColors = getColors(depthNodes.length);\n    let c = 0;\n    depthNodes.forEach ((d , i) => {\n        const info = {\n            name: d.data.name,\n            x: 0,\n            y: 0,\n            // color: nodeColor( color.get(i)),\n            color: rainbowColors[i],\n        };\n\n        c = dataOpt.showDistinctNodeName ? 1 : (Math.floor(len / 10) < 2) ? 1 : 2;\n\n        const a = i % c;\n        const b = Math.ceil(((i + 1) / c)) - 1;\n        info.x = a * 250;\n        info.y = b * 25;\n\n        depthNodesLegend.push(info);\n    });\n\n    nodes.forEach(d => {\n        if (d.depth < treeDepth) {\n            colorNodes[d.data.name] = \"#aaa\";\n            colorLinks[d.data.name] = \"#777\";\n        } else  {\n            const node_name = d.data.name;\n            let tempNode = d;\n            while (tempNode.depth !== treeDepth) {\n                tempNode = tempNode.parent;\n            }\n            depthPathNodes[d.data.name] = tempNode.data.name;\n            depthNodes.forEach((d, j) => {\n                if (d.data.name === tempNode.data.name) {\n                    colorNodes[node_name] = rainbowColors[j];\n                    colorLinks[node_name] = dark50(rainbowColors[j]);\n                    return true;\n                }\n            });\n        }\n    });\n\n    return {colorNodes, colorLinks, depthPathNodes, depthNodesLegend};\n}\n\nexport function loadTreeData(data) { // only contains the nodes have at least one S level child\n\n    const s_dict = [];\n\n    const Name = data.columns[0];\n\n    data.forEach( d => {\n\n        if (typeof(d[Name]) === \"string\") {\n            d[Name] = d[Name].split(\"|\");\n        }\n\n        const arr_len = d[Name].length;\n\n        if (d[Name][arr_len - 1][0] === dataOpt.allLevel[dataOpt.level] && library.matrix_dict[d[Name][arr_len - 1]]) {\n\n            const isDistinct = library.matrix_dict[d[Name][arr_len - 1]].qvalue < dataOpt.maxQvalue;\n\n            const textLength = text_size.measuredTextSize(d[Name][arr_len - 1].substring(3)).width;\n            dataOpt.maxTextLength = Math.max(dataOpt.maxTextLength, textLength);\n\n            const isEnter = (dataOpt.distinctNodeOnly) ? (isDistinct) ? true : false : true ;\n\n            if (isEnter) {\n                d[Name].some(n => {\n                    if (!s_dict[n]) {\n                        s_dict[n] = 1;\n                    }\n                });\n            }\n\n        }\n    });\n\n    return s_dict;\n}\n\nexport function main(_data) {\n\n    library.s_dict = loadTreeData(_data);\n\n    const all_info_box = [];\n\n    const tree = new Tree(\"r__Root\");\n\n    const Name = _data.columns[0];\n\n    let group1_length = 0;\n    let group2_length = 0;\n\n    _data.some(d => {\n\n        const arr_len = d[Name].length;\n\n        if (library.s_dict[d[Name][arr_len - 1]]) {\n\n            const node = new Node(d[Name][arr_len - 1]);\n\n            tree.add(node);\n\n            let parent_name, parent_node;\n\n            if (arr_len === 1) {\n                parent_name = \"r__Root\";\n            } else {\n                parent_name = d[Name][arr_len - 2];\n            }\n\n            parent_node = tree.allNode[parent_name];\n\n            const child_num = parent_node.children.length;\n\n            if (child_num  > 0) {\n                parent_node.children[child_num - 1].next = node;\n            }\n\n            parent_node.addChild(node);\n            node.parent = parent_node;\n\n            const arr1 = [];\n            const arr2 = [];\n            Object.keys(d).forEach(key => {\n                if (library.id_group.dict[key]) {\n                    if (library.id_group.dict[key] === library.id_group.group1) {\n                        arr1.push(parseFloat(d[key]));\n                    } else if (library.id_group.dict[key] === library.id_group.group2) {\n                        arr2.push(parseFloat(d[key]));\n                    }\n                }\n            });\n            group1_length = arr1.length;\n            group2_length = arr2.length;\n            all_info_box[d[Name][arr_len - 1]] = { group1: arr1, group2: arr2 };\n        }\n\n    });\n\n    const mean_info_box = [];\n    let max_mean = 0;\n    let min_mean = 100;\n    Object.keys(all_info_box).forEach(key => {\n        const temp_mean = Math.log2(library.matrix_dict[key].mean_group1 * group1_length + library.matrix_dict[key].mean_group2 * group2_length + 2) * 1.5;\n        mean_info_box[key] = temp_mean;\n        max_mean = Math.max(temp_mean, max_mean);\n        min_mean = Math.min(temp_mean, min_mean);\n    });\n\n    let i = 0;\n    let newick = \"\";\n\n    let curr = tree.root;\n\n    while (1) {\n\n        while (i !== dataOpt.level) {\n            newick = (curr.Name === \"r__Root\") ? \"r__Root\" : (newick[0] !== \",\") ? `${curr.Name})` + newick : curr.Name + newick;\n            curr = curr.children[0];\n            i++;\n        }\n\n        newick = \")\" + newick;\n\n        while (curr.next !== null) {\n            newick = `,${curr.Name}` + newick;\n            curr = curr.next;\n        }\n\n        newick = curr.Name + newick;\n\n        while (curr.next === null) {\n\n            curr = curr.parent;\n            i--;\n            newick = \"(\" + newick;\n\n            if (i === 0) {\n                break;\n            }\n\n        }\n\n        newick = \",\" + newick;\n\n        if (i !== 0) {\n            curr = curr.next;\n        } else {\n            break;\n        }\n    }\n\n    newick = newick.substring(1);\n\n    const treeNewick = parseNewick(newick);\n    const treeData = parseTreeData(treeNewick);\n\n    const hierarchy = d3.hierarchy(treeData).sum(d => d.length);\n\n    const allNodes = [];\n    const leaves = [];\n    const nodes = [];\n\n    let box_values = [];\n\n    hierarchy.each(n => {\n        if  (n.children) {\n            nodes.push(n);\n        }  else  {\n            leaves.push(n);\n            box_values = box_values.concat(all_info_box[n.data.name].group1);\n            box_values = box_values.concat(all_info_box[n.data.name].group2);\n        }\n        allNodes.push(n);\n    });\n\n    const distinct_leaves = {\n        UL: {\n            maxTextLength: 0,\n            nodes: [],\n        },\n        UR: {\n            maxTextLength: 0,\n            nodes: [],\n        },\n        DL: {\n            maxTextLength: 0,\n            nodes: [],\n        },\n        DR: {\n            maxTextLength: 0,\n            nodes: [],\n        },\n    };\n\n    const leave_link_dict = [];\n\n    const basic_angle = 360.0 / (2 * leaves.length);\n\n    leaves.some((n, i) => {\n        if (library.matrix_dict[n.data.name].qvalue < dataOpt.maxQvalue) {\n            if (i < leaves.length * 0.25) {\n\n                distinct_leaves.UR.maxTextLength = Math.max(distinct_leaves.UR.maxTextLength, text_size.measuredTextSize(n.data.name).width);\n                distinct_leaves.UR.nodes.push({\n                    name: n.data.name,\n                    x: 0.0,\n                    y: 0,\n                });\n\n                leave_link_dict[n.data.name] = {\n                    x: (dataOpt.treeRadius - dataOpt.treeLeafSize) * Math.sin(((i * 2 + 1) * basic_angle) * 0.017453293) + 680,\n                    y: - (dataOpt.treeRadius - dataOpt.treeLeafSize) * Math.cos(((i * 2 + 1) * basic_angle) * 0.017453293) + 395,\n                };\n\n            } else if (i < leaves.length * 0.5) {\n\n                distinct_leaves.DR.maxTextLength = Math.max(distinct_leaves.DR.maxTextLength, text_size.measuredTextSize(n.data.name).width);\n                distinct_leaves.DR.nodes.push({\n                    name: n.data.name,\n                    x: 0.0,\n                    y: 0,\n                });\n\n                leave_link_dict[n.data.name] = {\n                    x: (dataOpt.treeRadius - dataOpt.treeLeafSize) * Math.sin(((i * 2 + 1) * basic_angle) * 0.017453293) + 695,\n                    y: - (dataOpt.treeRadius - dataOpt.treeLeafSize) * Math.cos(((i * 2 + 1) * basic_angle) * 0.017453293) + 425,\n                };\n\n            } else if (i < leaves.length * 0.75) {\n\n                distinct_leaves.DL.maxTextLength = Math.max(distinct_leaves.DL.maxTextLength, text_size.measuredTextSize(n.data.name).width);\n                distinct_leaves.DL.nodes.push({\n                    name: n.data.name,\n                    x: text_size.measuredTextSize(n.data.name).width,\n                    y: 0,\n                });\n\n                leave_link_dict[n.data.name] = {\n                    x: (dataOpt.treeRadius - dataOpt.treeLeafSize) * Math.sin(((i * 2 + 1) * basic_angle) * 0.017453293) + 695,\n                    y: - (dataOpt.treeRadius - dataOpt.treeLeafSize) * Math.cos(((i * 2 + 1) * basic_angle) * 0.017453293) + 425,\n                };\n\n            } else {\n\n                distinct_leaves.UL.maxTextLength = Math.max(distinct_leaves.UL.maxTextLength, text_size.measuredTextSize(n.data.name).width);\n                distinct_leaves.UL.nodes.push({\n                    name: n.data.name,\n                    x: text_size.measuredTextSize(n.data.name).width,\n                    y: 0,\n                });\n\n                leave_link_dict[n.data.name] = {\n                    x: (dataOpt.treeRadius - dataOpt.treeLeafSize) * Math.sin(((i * 2 + 1) * basic_angle) * 0.017453293) + 695,\n                    y: - (dataOpt.treeRadius - dataOpt.treeLeafSize) * Math.cos(((i * 2 + 1) * basic_angle) * 0.017453293) + 425,\n                };\n\n            }\n        }\n    });\n\n    distinct_leaves.UL.nodes.forEach((node, i) => {\n        node.x = (170 - node.x) + 50;\n        node.y = (distinct_leaves.UL.nodes.length - i - 1) * 25 + 50;\n    });\n    distinct_leaves.DL.nodes.forEach((node, i) => {\n        node.x = (170 - node.x) + 50;\n        node.y = (distinct_leaves.DL.nodes.length - i - 1) * 25 + 60 + 325;\n    });\n    distinct_leaves.DR.nodes.forEach((node, i) => {\n        node.y = i * 25 + 60 + 325;\n    });\n    distinct_leaves.UR.nodes.forEach((node, i) => {\n        node.y = i * 25 + 50;\n    });\n\n    library.color_dict = getLinkColor(allNodes, dataOpt.treeDepth);\n\n    const max = 0;\n    const min = 0;\n    // const max = Math.max(...box_values) + dataOpt.logPara;\n    // const min = Math.min(...box_values) + dataOpt.logPara;\n\n    const leave_box_dict = [];\n\n    leaves.some(l => {\n        leave_box_dict[l.data.name] = {\n            group1: boxPlotValue(all_info_box[l.data.name].group1, max, min),\n            group2: boxPlotValue(all_info_box[l.data.name].group2, max, min),\n        };\n    });\n\n    dataOpt.isRadical = (leaves.length > 20) ? true : false ;\n    const branchShouldStayOnTop = (l, t) => {\n        if (l.target.data.data.qvalue < dataOpt.maxQvalue)\n            return true;\n        return false;\n    };\n    if (!!this) this.data.branchShouldStayOnTop = branchShouldStayOnTop;\n\n    console.log(treeData.children[0].data);\n    return {treeData, dataOpt, leave_box_dict, mean_info_box, max_mean, min_mean, library, allNodes, leaves, distinct_leaves, leave_link_dict, _data, max, min};\n}\nfunction parseTreeData(tree) {\n    if (library.matrix_dict[tree.name]) tree.data = library.matrix_dict[tree.name];\n    if (tree.children) {\n        tree.children.map(child => {\n            parseTreeData(child);\n        });\n    }  \n    return tree;\n}\n\nexport function updateBranchZIndex(v) {\n    if (!v || !v.data) return;\n    const branchShouldStayOnTop = (l, t) => {\n        if (l.target.data.data.qvalue < v.data.main.dataOpt.maxQvalue)\n            return true;\n        return false;\n    }\n    v.data.branchShouldStayOnTop = branchShouldStayOnTop;\n}"]},"metadata":{},"sourceType":"module"}