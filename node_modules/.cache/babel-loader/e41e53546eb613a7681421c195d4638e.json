{"ast":null,"code":"import Vue from '../../utils/vue';\nimport normalizeSlotMixin from '../../mixins/normalize-slot';\nimport { mathMax, mathMin } from '../../utils/math';\nimport { toFloat } from '../../utils/number';\nimport { computeSize } from './avatar'; // --- Constants ---\n\nvar NAME = 'BAvatarGroup'; // --- Main component ---\n// @vue/component\n\nexport var BAvatarGroup = /*#__PURE__*/Vue.extend({\n  name: NAME,\n  mixins: [normalizeSlotMixin],\n  provide: function provide() {\n    return {\n      bvAvatarGroup: this\n    };\n  },\n  props: {\n    variant: {\n      // Child avatars will prefer this variant over their own\n      type: String,\n      \"default\": null\n    },\n    size: {\n      // Child avatars will always use this over their own size\n      type: String,\n      \"default\": null\n    },\n    overlap: {\n      type: [Number, String],\n      \"default\": 0.3\n    },\n    square: {\n      // Child avatars will prefer this prop (if set) over their own\n      type: Boolean,\n      \"default\": false\n    },\n    rounded: {\n      // Child avatars will prefer this prop (if set) over their own\n      type: [Boolean, String],\n      \"default\": false\n    },\n    tag: {\n      type: String,\n      \"default\": 'div'\n    }\n  },\n  computed: {\n    computedSize: function computedSize() {\n      return computeSize(this.size);\n    },\n    overlapScale: function overlapScale() {\n      return mathMin(mathMax(toFloat(this.overlap, 0), 0), 1) / 2;\n    },\n    paddingStyle: function paddingStyle() {\n      var value = this.computedSize;\n      value = value ? \"calc(\".concat(value, \" * \").concat(this.overlapScale, \")\") : null;\n      return value ? {\n        paddingLeft: value,\n        paddingRight: value\n      } : {};\n    }\n  },\n  render: function render(h) {\n    var $inner = h('div', {\n      staticClass: 'b-avatar-group-inner',\n      style: this.paddingStyle\n    }, [this.normalizeSlot('default')]);\n    return h(this.tag, {\n      staticClass: 'b-avatar-group',\n      attrs: {\n        role: 'group'\n      }\n    }, [$inner]);\n  }\n});","map":null,"metadata":{},"sourceType":"module"}