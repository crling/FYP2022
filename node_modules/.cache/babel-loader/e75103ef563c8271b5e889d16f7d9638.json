{"ast":null,"code":"import Oviz from \"crux\";\nimport { findBoundsForValues } from \"utils/maths\";\nimport template from \"./template.bvt\";\nvar ylabel = \"Relative abundance(log10)\";\nvar classifiedIndex = 0;\nvar title = \"grouped box plot\";\nexport function init(id, path, config) {\n  Oviz.visualize({\n    el: id,\n    template: template,\n    data: {\n      ylabel: ylabel,\n      title: title,\n      config: {\n        plotWidth: 1000,\n        showOutliers: true,\n        fontSize: 14\n      },\n      xAxisRotation: 35,\n      deltaX: 0,\n      colors: [\"#7DCEA0\", \"#F1948A\", \"#85C1E9\"],\n      adjustLabel: function adjustLabel(ev, el, delta, cuur) {\n        this.xAxisRotation = cuur[0] * 180 / Math.PI;\n        this.clipPath = this.getClipPath();\n        this.redraw();\n      },\n      getClipPath: function getClipPath() {\n        var delta = -150 / Math.tan(this.xAxisRotation * Math.PI / 180);\n        return [0, 0, 0, 400, delta, 550, 850 + delta, 550, 850, 400, 850, 0];\n      },\n      state: {\n        rangeL: 0 // rangeR: 0,\n\n      },\n      updateRange: function updateRange(range) {\n        this.setState({\n          rangeL: range[0]\n        });\n      }\n    },\n    loadData: {\n      data: {\n        url: path,\n        type: \"tsv\",\n        dsvHasHeader: true,\n        loaded: function loaded(data) {\n          var _this = this;\n\n          // 這個版本是只有兩個分組， e.g. healthy - crc\n          var categories = data.columns.slice(1);\n          var classifiedKey = data.columns[classifiedIndex];\n          var classifications = data.map(function (d) {\n            return d[classifiedKey];\n          }).filter(function (item, index, self) {\n            return self.indexOf(item) === index;\n          });\n          var boxData = [{\n            values: [],\n            outliers: [],\n            means: [],\n            categories: categories\n          }, {\n            values: [],\n            outliers: [],\n            means: [],\n            categories: categories\n          }];\n          var allValues = [];\n          categories.forEach(function (arr, i) {\n            var initialData = [[], []];\n            data.forEach(function (d) {\n              allValues.push(parseFloat(d[arr]));\n\n              if (d[classifiedKey] === classifications[0]) {\n                initialData[0].push(parseFloat(d[arr]));\n              } else {\n                initialData[1].push(parseFloat(d[arr]));\n              }\n            });\n            classifications.forEach(function (classification, j) {\n              var result = [];\n              var stat1 = new Oviz.algo.Statistics(initialData[j]);\n              var interQuartileRange = stat1.Q3() - stat1.Q1();\n              initialData[j].forEach(function (d) {\n                if (d < stat1.Q3() - 1.5 * interQuartileRange || d > stat1.Q3() + 1.5 * interQuartileRange) {\n                  boxData[j].outliers.push([i, d]);\n                } else {\n                  result.push(d);\n                }\n              });\n              var stat2 = new Oviz.algo.Statistics(result);\n              boxData[j].values.push([stat2.min(), stat2.Q1(), stat2.median(), stat2.Q3(), stat2.max()]);\n              boxData[j].means.push(stat2.mean());\n            });\n          });\n          this.data.valueRange = findBoundsForValues(allValues, 2, false, 0.5);\n          this.data.boxData = {};\n          boxData.forEach(function (x, i) {\n            _this.data.boxData[\"boxData\".concat(i)] = x;\n          });\n          this.data.classifications = classifications;\n          this.data.categories = categories;\n          return null;\n        }\n      }\n    },\n    setup: function setup() {\n      if (this.data.categories.length <= 5) {\n        this.data.boxW = 40;\n      } else if (this.data.categories.length <= 10) {\n        this.data.boxW = 30;\n      } else {\n        this.data.boxW = 20;\n      }\n\n      var gridW = this.data.boxW * this.data.classifications.length / 0.8;\n      this.data.plotWidth = this.data.categories.length * gridW;\n      this.data.gridW = gridW;\n      this.size.width = this.data.plotWidth > 850 ? 1000 : this.data.plotWidth + 150;\n      this.data.rectW = this.size.width - 150;\n      this.data.clipPath = this.data.getClipPath();\n    }\n  });\n}","map":{"version":3,"sources":["/Users/wangzhenyu/Desktop/fyp_workspace/meta_platform/app/javascript/viz/static_grouped-boxplot/index.ts"],"names":["Oviz","findBoundsForValues","template","ylabel","classifiedIndex","title","init","id","path","config","visualize","el","data","plotWidth","showOutliers","fontSize","xAxisRotation","deltaX","colors","adjustLabel","ev","delta","cuur","Math","PI","clipPath","getClipPath","redraw","tan","state","rangeL","updateRange","range","setState","loadData","url","type","dsvHasHeader","loaded","categories","columns","slice","classifiedKey","classifications","map","d","filter","item","index","self","indexOf","boxData","values","outliers","means","allValues","forEach","arr","i","initialData","push","parseFloat","classification","j","result","stat1","algo","Statistics","interQuartileRange","Q3","Q1","stat2","min","median","max","mean","valueRange","x","setup","length","boxW","gridW","size","width","rectW"],"mappings":"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","sourcesContent":["import Oviz from \"crux\";\nimport { groupedChartColors} from \"oviz-common/palette\";\nimport { findBoundsForValues } from \"utils/maths\";\nimport template from \"./template.bvt\";\n\nconst ylabel = \"Relative abundance(log10)\";\nconst classifiedIndex = 0;\nconst title = \"grouped box plot\";\n\nexport function init(id, path, config) {\n    Oviz.visualize({\n        el: id,\n        template,\n        data: {ylabel, title,\n            config: {\n                plotWidth: 1000,\n                showOutliers: true,\n                fontSize: 14,\n            },\n            xAxisRotation: 35,\n            deltaX: 0,\n            colors: [\"#7DCEA0\", \"#F1948A\", \"#85C1E9\"],\n            adjustLabel(ev, el, delta, cuur) {\n                this.xAxisRotation = cuur[0] * 180 / Math.PI;\n                this.clipPath = this.getClipPath();\n                this.redraw();\n            },\n            getClipPath() {\n                const delta = -150 / Math.tan(this.xAxisRotation * Math.PI / 180);\n                return [0, 0, 0, 400, delta, 550, 850 + delta, 550, 850, 400, 850, 0];\n            },\n            state: {\n                rangeL: 0,\n                // rangeR: 0,\n            },\n            updateRange(range: [number, number]) {\n                this.setState({ rangeL: range[0]});\n            },\n        },\n        loadData: {\n            data: {\n                url: path,\n                type: \"tsv\",\n                dsvHasHeader: true,\n                loaded(data) {\n                    // 這個版本是只有兩個分組， e.g. healthy - crc\n                    const categories = data.columns.slice(1);\n                    const classifiedKey = data.columns[classifiedIndex];\n                    const classifications = data.map(d => (d[classifiedKey])).filter((item, index, self) => {\n                        return self.indexOf(item) === index; });\n                    const boxData = [{values: [], outliers: [], means: [], categories}, {values: [], outliers: [], means: [], categories}];\n                    const allValues = [];\n                    categories.forEach((arr, i) => {\n                        const initialData = [[], []];\n                        data.forEach(d => {\n                            allValues.push(parseFloat(d[arr]));\n                            if (d[classifiedKey] === classifications[0]) {\n                                initialData[0].push(parseFloat(d[arr]));\n                            } else {\n                                initialData[1].push(parseFloat(d[arr]));\n                            }\n                        });\n                        classifications.forEach((classification, j) => {\n                            const result = [];\n                            const stat1 = new Oviz.algo.Statistics(initialData[j]);\n                            const interQuartileRange = stat1.Q3() - stat1.Q1();\n                            initialData[j].forEach(d => {\n                                if ((d < stat1.Q3() - 1.5 * interQuartileRange) || (d > stat1.Q3() + 1.5 * interQuartileRange))  {\n                                    boxData[j].outliers.push([i, d]);\n                                } else {\n                                    result.push(d);\n                                }\n                            });\n                            const stat2 = new Oviz.algo.Statistics(result);\n                            boxData[j].values.push([stat2.min(), stat2.Q1(), stat2.median(), stat2.Q3(), stat2.max()]);\n                            boxData[j].means.push(stat2.mean());\n                        });\n                    });\n                    this.data.valueRange = findBoundsForValues(allValues, 2, false, 0.5);\n                    this.data.boxData = {};\n                    boxData.forEach((x, i) => {\n                        this.data.boxData[`boxData${i}`] = x;\n                    });\n                    this.data.classifications = classifications;\n                    this.data.categories = categories;\n                    return null;\n                },\n            },\n        },\n        setup() {\n            if (this.data.categories.length <= 5) {\n                this.data.boxW = 40;\n            } else if (this.data.categories.length <= 10) {\n                this.data.boxW = 30;\n            } else {\n                this.data.boxW = 20;\n            }\n            const gridW = (this.data.boxW * this.data.classifications.length) / 0.8;\n            this.data.plotWidth = this.data.categories.length * gridW;\n            this.data.gridW = gridW;\n            this.size.width = this.data.plotWidth > 850 ? 1000 : this.data.plotWidth + 150;\n            this.data.rectW = this.size.width - 150;\n            this.data.clipPath = this.data.getClipPath();\n        },\n    });\n}\n"]},"metadata":{},"sourceType":"module"}