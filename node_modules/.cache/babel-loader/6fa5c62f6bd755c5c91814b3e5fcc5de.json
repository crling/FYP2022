{"ast":null,"code":"function _slicedToArray(arr, i) { return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray(arr, i) || _nonIterableRest(); }\n\nfunction _nonIterableRest() { throw new TypeError(\"Invalid attempt to destructure non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\"); }\n\nfunction _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === \"string\") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === \"Object\" && o.constructor) n = o.constructor.name; if (n === \"Map\" || n === \"Set\") return Array.from(o); if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }\n\nfunction _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }\n\nfunction _iterableToArrayLimit(arr, i) { if (typeof Symbol === \"undefined\" || !(Symbol.iterator in Object(arr))) return; var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i[\"return\"] != null) _i[\"return\"](); } finally { if (_d) throw _e; } } return _arr; }\n\nfunction _arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }\n\nfunction _templateObject() {\n  var data = _taggedTemplateLiteral([\"\", \"\"]);\n\n  _templateObject = function _templateObject() {\n    return data;\n  };\n\n  return data;\n}\n\nfunction _taggedTemplateLiteral(strings, raw) { if (!raw) { raw = strings.slice(0); } return Object.freeze(Object.defineProperties(strings, { raw: { value: Object.freeze(raw) } })); }\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }\n\nfunction _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }\n\nfunction _inherits(subClass, superClass) { if (typeof superClass !== \"function\" && superClass !== null) { throw new TypeError(\"Super expression must either be null or a function\"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }\n\nfunction _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }\n\nfunction _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }\n\nfunction _possibleConstructorReturn(self, call) { if (call && (typeof call === \"object\" || typeof call === \"function\")) { return call; } return _assertThisInitialized(self); }\n\nfunction _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\"); } return self; }\n\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Date.prototype.toString.call(Reflect.construct(Date, [], function () {})); return true; } catch (e) { return false; } }\n\nfunction _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }\n\nimport Oviz from \"crux\";\nimport template from \"./template.bvt\";\nimport { minmax } from \"crux/dist/utils/math\";\nimport * as d3 from \"d3\";\nimport { computeLog } from \"utils/maths\";\nexport var MetaOverview = /*#__PURE__*/function (_Oviz$Component) {\n  _inherits(MetaOverview, _Oviz$Component);\n\n  var _super = _createSuper(MetaOverview);\n\n  function MetaOverview() {\n    var _this;\n\n    _classCallCheck(this, MetaOverview);\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    _this = _super.call.apply(_super, [this].concat(args));\n    _this.colors = void 0;\n    _this.ovMain = void 0;\n    _this.ovTree = void 0;\n    _this.mainHeatmap = void 0;\n    _this.filteredSamples = void 0;\n    _this.species = void 0;\n    _this.mainColorGetter = void 0;\n    _this.mainDict = void 0;\n    _this.metaFeatures = void 0;\n    _this.metaDict = void 0;\n    _this.metaInfo = void 0;\n    _this.metaData = void 0;\n    _this.boxplot = void 0;\n    _this.sampleOrderChanged = true;\n    _this.gridSize = void 0;\n    _this.valueRange = void 0;\n    _this.fullDisplay = true;\n    _this.sizeSettings = {\n      offsetX: 150,\n      mainHeight: 300,\n      mainWidth: 1200,\n      barHeight: 180,\n      boxHeight: 220,\n      padding: 20,\n      gapX: 10,\n      gapY: 10,\n      gridW: 8,\n      gridH: 12\n    };\n    _this.yPos = 0;\n    _this.gridW = 0;\n    _this.gridH = 0;\n    _this.mainHeight = 300;\n    _this.mainWidth = 1200;\n    _this.controllerMode = \"scroll\";\n    _this.offsetX = 150;\n    _this.histLegendLabels = void 0;\n    _this.mainRange = [];\n    _this.mainGradientFills = [];\n    _this.histLegendPos = {\n      x: 1000,\n      y: 20\n    };\n    _this.mainLegendPos = {\n      x: 1000,\n      y: 210\n    };\n    _this.boxLegendPos = {\n      x: 1000,\n      y: 210\n    };\n    _this.debug = {};\n    _this._sizeUpdated = true;\n    _this.state = {\n      activeX: null,\n      activeY: null,\n      newX: null,\n      newHeight: null,\n      mode: null,\n      updated: null,\n      dragStartPos: null,\n      legendPos: null\n    };\n    return _this;\n  }\n\n  _createClass(MetaOverview, [{\n    key: \"render\",\n    value: function render() {\n      return this.t(_templateObject(), template);\n    }\n  }, {\n    key: \"willRender\",\n    value: function willRender() {\n      var _this2 = this;\n\n      if (this._firstRender) {\n        this.gridW = this.gridSize[0];\n        this.gridH = this.gridSize[1];\n        this.histLegendLabels = this.species.filter(function (s) {\n          return s !== \"Other\";\n        }).map(function (s) {\n          var labels = [null, s];\n          var names = s.split(\"|\");\n          var name = names[names.length - 1];\n          labels[0] = name.split(\"_\")[2];\n          return labels;\n        }).sort();\n        if (this.species.indexOf(\"Other\") >= 0) this.histLegendLabels.push([\"Other\", \"Other\"]); // const [min, max] = minmax(this.mainHeatmap.flat().filter(x => x > 0));\n\n        var _minmax = minmax(this.mainHeatmap.flat()),\n            _minmax2 = _slicedToArray(_minmax, 2),\n            min = _minmax2[0],\n            max = _minmax2[1];\n\n        this.mainRange = [computeLog(min + 1), computeLog(max + 1)];\n        var gradient = d3.scaleLinear() // .range([this.colors.start, this.colors.end])\n        // .domain(this.mainRange);\n        .range([this.colors.start, this.colors.org, this.colors.end]) // .domain([this.mainRange[0], (this.mainRange[1] + this.mainRange[0])/2\n        //             , this.mainRange[1]]);\n        .domain([0, this.mainRange[1] / 2, this.mainRange[1]]);\n        /* @debug\n        this.debug.scale1 = (x) => d3.scaleLinear().range([0, 200])\n                            .domain([-5, 2])(x);\n        this.debug.scale2 = (x) => d3.scaleLinear().range([0, 200])\n                .domain([min, max])(x);\n        const debug = this.mainHeatmap.flat().filter(x => x > 0).sort();\n        this.debug.data = [];\n        for (let i = 0; i < debug.length; i += 6) {\n        this.debug.data.push([computeLog(debug[i]), debug[i]]);\n        }*/\n\n        var div = (this.mainRange[1] - this.mainRange[0]) / 20;\n\n        for (var i = 0; i <= 20; i++) {\n          this.mainGradientFills.push(gradient(this.mainRange[0] + i * div));\n        }\n\n        this.mainColorGetter = function (d) {\n          if (d === 0) return _this2.colors.abd0;else {\n            return gradient(computeLog(d));\n          }\n        }; // this.mainColorGetter = (d) => gradient(computeLog(d + 1));\n\n\n        this.valueRange = [0, max];\n        var mainH = this.species.length * this.gridH;\n\n        if (mainH < this.mainHeight) {\n          this.mainHeight = this.sizeSettings.mainHeight = mainH;\n        } else {\n          this.gridH = this.mainHeight / this.species.length;\n        }\n\n        var mainW = this.filteredSamples.length * this.gridW;\n\n        if (mainW < this.mainWidth) {\n          this.mainWidth = this.sizeSettings.mainWidth = mainW;\n        } else {\n          this.gridW = this.mainWidth / this.filteredSamples.length;\n        }\n\n        this.histLegendPos.x = this.offsetX + this.mainWidth + this.sizeSettings.gapX;\n        this.mainLegendPos = {\n          x: this.offsetX + this.mainWidth + this.sizeSettings.gapX + 100,\n          y: this.sizeSettings.barHeight - 40\n        };\n        this.boxLegendPos = {\n          x: this.sizeSettings.offsetX + this.mainWidth + this.sizeSettings.boxHeight,\n          y: this.sizeSettings.barHeight + this.sizeSettings.padding\n        };\n      }\n\n      if (this._sizeUpdated) {\n        this._sizeUpdated = false;\n        this.gridW = this.gridSize[0];\n        this.gridH = this.gridSize[1];\n        this.mainWidth = this.filteredSamples.length * this.gridW;\n        this.$v.size.width = this.mainWidth + this.sizeSettings.boxHeight + this.offsetX + 2 * this.sizeSettings.gapX + 2 * this.sizeSettings.padding;\n        this.histLegendPos = {\n          x: this.sizeSettings.offsetX + this.mainWidth + this.sizeSettings.padding,\n          y: this.sizeSettings.padding\n        };\n        this.mainLegendPos = {\n          x: this.sizeSettings.offsetX + this.mainWidth + this.sizeSettings.boxHeight - 130,\n          y: this.sizeSettings.padding + this.sizeSettings.barHeight - 60\n        };\n        this.boxLegendPos = {\n          x: this.sizeSettings.offsetX + this.mainWidth + this.sizeSettings.boxHeight,\n          y: this.sizeSettings.barHeight + this.sizeSettings.padding\n        };\n      }\n    }\n  }, {\n    key: \"setActive\",\n    value: function setActive(x) {\n      var y = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;\n\n      if (typeof x === \"string\") {\n        var xPos = this.filteredSamples.indexOf(x) * this.gridW + this.offsetX;\n        this.setState({\n          activeX: xPos\n        });\n      } else this.setState({\n        activeX: x,\n        activeY: y\n      });\n    }\n  }, {\n    key: \"controlMain\",\n    value: function controlMain(ev) {\n      if (this.controllerMode === \"zoom\") {\n        this.updateRange(ev);\n      } else {\n        this.$v.forceRedraw = false;\n        this.updatePos(ev);\n      }\n    }\n  }, {\n    key: \"updateRange\",\n    value: function updateRange(ev) {\n      var newHeight = (1 - ev.deltaY / 1000) * this.mainHeight;\n      this.mainHeight = newHeight > this.species.length * this.gridH ? this.species.length * this.gridH : newHeight < 300 ? 300 : newHeight;\n      this.setState({\n        newHeight: this.mainHeight\n      });\n    }\n  }, {\n    key: \"updatePos\",\n    value: function updatePos(ev) {\n      this.yPos = this.yPos + ev.deltaY > 0 ? 0 : this.yPos + ev.deltaY < -this.mainHeight + 300 ? -this.mainHeight + 300 : this.yPos + ev.deltaY;\n      this.setState({\n        newX: this.yPos\n      });\n    }\n  }, {\n    key: \"swicthMode\",\n    value: function swicthMode() {\n      if (this.controllerMode === \"zoom\") {\n        this.$v.forceRedraw = false;\n        this.controllerMode = \"scroll\";\n      } else {\n        this.$v.forceRedraw = true;\n        this.controllerMode = \"zoom\";\n      }\n\n      this.setState({\n        mode: this.controllerMode\n      });\n    }\n  }, {\n    key: \"fitSize\",\n    value: function fitSize() {\n      this.fullDisplay = !this.fullDisplay;\n      this.yPos = 0;\n      this.$v.size.height = this.fullDisplay ? this.mainHeight + 450 : 750;\n      this.$v.run(); // this.setState({updated: true});\n    }\n  }, {\n    key: \"handleLegendPos\",\n    value: function handleLegendPos(_, el, deltaPos) {\n      switch (el.id) {\n        case \"histLegend\":\n          this.histLegendPos = {\n            x: this.histLegendPos.x + deltaPos[0],\n            y: this.histLegendPos.y + deltaPos[1]\n          };\n          break;\n\n        case \"mainLegend\":\n          this.mainLegendPos = {\n            x: this.mainLegendPos.x + deltaPos[0],\n            y: this.mainLegendPos.y + deltaPos[1]\n          };\n          break;\n\n        case \"boxLegend\":\n          this.boxLegendPos = {\n            x: this.boxLegendPos.x + deltaPos[0],\n            y: this.boxLegendPos.y + deltaPos[1]\n          };\n          break;\n      }\n\n      this.redraw();\n    }\n  }]);\n\n  return MetaOverview;\n}(Oviz.Component);","map":{"version":3,"sources":["/Users/wangzhenyu/Desktop/fyp_workspace/meta_platform/app/javascript/viz/meta-overview/meta-overview.ts"],"names":["Oviz","template","minmax","d3","computeLog","MetaOverview","colors","ovMain","ovTree","mainHeatmap","filteredSamples","species","mainColorGetter","mainDict","metaFeatures","metaDict","metaInfo","metaData","boxplot","sampleOrderChanged","gridSize","valueRange","fullDisplay","sizeSettings","offsetX","mainHeight","mainWidth","barHeight","boxHeight","padding","gapX","gapY","gridW","gridH","yPos","controllerMode","histLegendLabels","mainRange","mainGradientFills","histLegendPos","x","y","mainLegendPos","boxLegendPos","debug","_sizeUpdated","state","activeX","activeY","newX","newHeight","mode","updated","dragStartPos","legendPos","t","_firstRender","filter","s","map","labels","names","split","name","length","sort","indexOf","push","flat","min","max","gradient","scaleLinear","range","start","org","end","domain","div","i","d","abd0","mainH","mainW","$v","size","width","xPos","setState","ev","updateRange","forceRedraw","updatePos","deltaY","height","run","_","el","deltaPos","id","redraw","Component"],"mappings":"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","sourcesContent":["import Oviz from \"crux\";\nimport template from \"./template.bvt\";\n\nimport { minmax } from \"crux/dist/utils/math\";\nimport * as d3 from \"d3\";\nimport {computeLog} from \"utils/maths\";\n\nexport class MetaOverview extends Oviz.Component {\n    public colors: any;\n    public ovMain: any;\n    public ovTree: any;\n    public mainHeatmap: number[][];\n    public filteredSamples: string[];\n    public species: string[];\n    public mainColorGetter: any;\n\n    public mainDict;\n\n    public metaFeatures;\n    public metaDict;\n    public metaInfo;\n    public metaData;\n    public boxplot;\n\n    public sampleOrderChanged = true;\n    public gridSize;\n    private valueRange;\n    // private colors = [\"pink\", \"skyblue\"];\n    private fullDisplay = true;\n\n    private sizeSettings = {\n        offsetX: 150,\n        mainHeight: 300,\n        mainWidth: 1200,\n        barHeight: 180,\n        boxHeight: 220,\n        padding: 20,\n        gapX: 10,\n        gapY: 10,\n        gridW: 8,\n        gridH: 12,\n    };\n    private yPos = 0;\n    private gridW = 0;\n    private gridH = 0;\n    private mainHeight = 300;\n    private mainWidth = 1200;\n    private controllerMode = \"scroll\";\n    private offsetX = 150;\n\n    private histLegendLabels;\n    private mainRange = [];\n    private mainGradientFills = [];\n    private histLegendPos = {x: 1000, y: 20};\n    private mainLegendPos = {x: 1000, y: 210};\n    private boxLegendPos = {x: 1000, y: 210};\n\n    private debug = {};\n\n    private _sizeUpdated = true;\n    public render() {\n        return this.t`${template}`;\n    }\n\n    public willRender() {\n        if (this._firstRender) {\n            this.gridW = this.gridSize[0];\n            this.gridH = this.gridSize[1];\n            this.histLegendLabels = this.species.filter(s => s !== \"Other\")\n                    .map(s => {\n                        const labels = [null, s];\n                        const names = s.split(\"|\");\n                        const name = names[names.length - 1];\n                        labels[0] = name.split(\"_\")[2];\n                        return labels;\n                    }).sort();\n\n            if (this.species.indexOf(\"Other\") >= 0) this.histLegendLabels.push([\"Other\", \"Other\"]);\n\n            // const [min, max] = minmax(this.mainHeatmap.flat().filter(x => x > 0));\n            const [min, max] = minmax(this.mainHeatmap.flat());\n            this.mainRange = [computeLog(min + 1) , computeLog(max + 1)];\n            const gradient = d3.scaleLinear()\n                // .range([this.colors.start, this.colors.end])\n                // .domain(this.mainRange);\n                .range([this.colors.start,  this.colors.org, this.colors.end])\n                // .domain([this.mainRange[0], (this.mainRange[1] + this.mainRange[0])/2\n                //             , this.mainRange[1]]);\n                .domain([0, this.mainRange[1] / 2, this.mainRange[1]]);\n                /* @debug\n            this.debug.scale1 = (x) => d3.scaleLinear().range([0, 200])\n                                    .domain([-5, 2])(x);\n            this.debug.scale2 = (x) => d3.scaleLinear().range([0, 200])\n                        .domain([min, max])(x);\n            const debug = this.mainHeatmap.flat().filter(x => x > 0).sort();\n            this.debug.data = [];\n            for (let i = 0; i < debug.length; i += 6) {\n                this.debug.data.push([computeLog(debug[i]), debug[i]]);\n            }*/\n            const div = (this.mainRange[1] - this.mainRange[0]) / 20;\n            for (let i = 0; i <= 20; i ++) {\n                this.mainGradientFills.push(gradient(this.mainRange[0] + i * div));\n            }\n            this.mainColorGetter = (d) => {\n                if (d === 0)\n                    return this.colors.abd0;\n                else {\n                    return gradient(computeLog(d));\n                }\n            };\n            // this.mainColorGetter = (d) => gradient(computeLog(d + 1));\n            this.valueRange = [0, max];\n            const mainH = this.species.length * this.gridH;\n            if (mainH < this.mainHeight) {\n                this.mainHeight = this.sizeSettings.mainHeight = mainH;\n            } else {\n                this.gridH = this.mainHeight / this.species.length;\n            }\n            const mainW = this.filteredSamples.length * this.gridW;\n            if (mainW < this.mainWidth) {\n                this.mainWidth = this.sizeSettings.mainWidth = mainW;\n            } else {\n                this.gridW = this.mainWidth / this.filteredSamples.length;\n            }\n            this.histLegendPos.x = this.offsetX + this.mainWidth + this.sizeSettings.gapX;\n            this.mainLegendPos = {\n                x: this.offsetX + this.mainWidth + this.sizeSettings.gapX + 100,\n                y: this.sizeSettings.barHeight - 40,\n            };\n            this.boxLegendPos = {x: this.sizeSettings.offsetX + this.mainWidth\n                        + this.sizeSettings.boxHeight,\n                    y: this.sizeSettings.barHeight + this.sizeSettings.padding };\n        }\n        if (this._sizeUpdated) {\n            this._sizeUpdated = false;\n            this.gridW = this.gridSize[0];\n            this.gridH = this.gridSize[1];\n            this.mainWidth = this.filteredSamples.length * this.gridW;\n            this.$v.size.width = this.mainWidth + this.sizeSettings.boxHeight\n                + this.offsetX + 2 * this.sizeSettings.gapX + 2 * this.sizeSettings.padding;\n            this.histLegendPos = {x: this.sizeSettings.offsetX + this.mainWidth\n                + this.sizeSettings.padding,\n                y: this.sizeSettings.padding };\n            this.mainLegendPos = {x: this.sizeSettings.offsetX + this.mainWidth\n                + this.sizeSettings.boxHeight - 130,\n                y: this.sizeSettings.padding + this.sizeSettings.barHeight - 60};\n            this.boxLegendPos = {x: this.sizeSettings.offsetX + this.mainWidth\n                        + this.sizeSettings.boxHeight,\n                    y: this.sizeSettings.barHeight + this.sizeSettings.padding };\n\n        }\n    }\n\n    protected state = {\n        activeX: null,\n        activeY: null,\n        newX: null,\n        newHeight: null,\n        mode: null,\n        updated: null,\n        dragStartPos: null,\n        legendPos: null,\n    };\n\n    private setActive(x: number|string, y: number = null) {\n        if (typeof x === \"string\") {\n            const xPos = this.filteredSamples.indexOf(x) * this.gridW + this.offsetX;\n            this.setState({activeX: xPos});\n        } else\n            this.setState({ activeX: x, activeY: y });\n    }\n\n    private controlMain(ev) {\n        if (this.controllerMode === \"zoom\") {\n            this.updateRange(ev);\n        } else {\n            this.$v.forceRedraw = false;\n            this.updatePos(ev);\n        }\n    }\n    private updateRange(ev) {\n        const newHeight = (1 - ev.deltaY  / 1000) * this.mainHeight;\n        this.mainHeight = newHeight > this.species.length * this.gridH ? this.species.length * this.gridH\n                        : newHeight < 300 ? 300 : newHeight;\n        this.setState({newHeight: this.mainHeight});\n    }\n    private updatePos(ev) {\n\n        this.yPos = this.yPos + ev.deltaY > 0 ? 0\n                : this.yPos + ev.deltaY < -this.mainHeight + 300\n                    ? -this.mainHeight + 300 : this.yPos + ev.deltaY;\n        this.setState({newX: this.yPos});\n    }\n\n    private swicthMode() {\n        if (this.controllerMode === \"zoom\") {\n            this.$v.forceRedraw = false;\n            this.controllerMode = \"scroll\";\n        } else {\n            this.$v.forceRedraw = true;\n            this.controllerMode = \"zoom\";\n        }\n        this.setState({ mode: this.controllerMode });\n    }\n\n    private fitSize() {\n        this.fullDisplay = !this.fullDisplay;\n        this.yPos = 0;\n        this.$v.size.height = this.fullDisplay ? this.mainHeight + 450 : 750;\n        this.$v.run();\n        // this.setState({updated: true});\n    }\n\n    protected handleLegendPos(_, el, deltaPos: [number, number]) {\n        switch (el.id) {\n            case \"histLegend\":\n                this.histLegendPos = {x: this.histLegendPos.x + deltaPos[0],\n                    y: this.histLegendPos.y + deltaPos[1]};\n                break;\n            case \"mainLegend\":\n                this.mainLegendPos = {x: this.mainLegendPos.x + deltaPos[0],\n                    y: this.mainLegendPos.y + deltaPos[1]};\n                break;\n            case \"boxLegend\":\n                this.boxLegendPos = {x: this.boxLegendPos.x + deltaPos[0],\n                    y: this.boxLegendPos.y + deltaPos[1]};\n                break;\n        }\n\n        this.redraw();\n    }\n\n}\n"]},"metadata":{},"sourceType":"module"}