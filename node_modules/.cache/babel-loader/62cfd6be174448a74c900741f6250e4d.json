{"ast":null,"code":"function ownKeys(object, enumerableOnly) {\n  var keys = Object.keys(object);\n\n  if (Object.getOwnPropertySymbols) {\n    var symbols = Object.getOwnPropertySymbols(object);\n    if (enumerableOnly) symbols = symbols.filter(function (sym) {\n      return Object.getOwnPropertyDescriptor(object, sym).enumerable;\n    });\n    keys.push.apply(keys, symbols);\n  }\n\n  return keys;\n}\n\nfunction _objectSpread(target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = arguments[i] != null ? arguments[i] : {};\n\n    if (i % 2) {\n      ownKeys(Object(source), true).forEach(function (key) {\n        _defineProperty(target, key, source[key]);\n      });\n    } else if (Object.getOwnPropertyDescriptors) {\n      Object.defineProperties(target, Object.getOwnPropertyDescriptors(source));\n    } else {\n      ownKeys(Object(source)).forEach(function (key) {\n        Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));\n      });\n    }\n  }\n\n  return target;\n}\n\nfunction _defineProperty(obj, key, value) {\n  if (key in obj) {\n    Object.defineProperty(obj, key, {\n      value: value,\n      enumerable: true,\n      configurable: true,\n      writable: true\n    });\n  } else {\n    obj[key] = value;\n  }\n\n  return obj;\n}\n\nimport { hasOwnProperty } from './object';\nexport var makePropWatcher = function makePropWatcher(propName) {\n  return {\n    handler: function handler(newVal, oldVal) {\n      for (var key in oldVal) {\n        if (!hasOwnProperty(newVal, key)) {\n          this.$delete(this.$data[propName], key);\n        }\n      }\n\n      for (var _key in newVal) {\n        this.$set(this.$data[propName], _key, newVal[_key]);\n      }\n    }\n  };\n};\nexport var makePropCacheMixin = function makePropCacheMixin(propName, proxyPropName) {\n  return {\n    data: function data() {\n      return _defineProperty({}, proxyPropName, {});\n    },\n    watch: _defineProperty({}, propName, makePropWatcher(proxyPropName)),\n    created: function created() {\n      this[proxyPropName] = _objectSpread({}, this[propName]);\n    }\n  };\n};","map":null,"metadata":{},"sourceType":"module"}