{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\n\nfunction _slicedToArray(arr, i) { return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray(arr, i) || _nonIterableRest(); }\n\nfunction _nonIterableRest() { throw new TypeError(\"Invalid attempt to destructure non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\"); }\n\nfunction _iterableToArrayLimit(arr, i) { if (typeof Symbol === \"undefined\" || !(Symbol.iterator in Object(arr))) return; var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i[\"return\"] != null) _i[\"return\"](); } finally { if (_d) throw _e; } } return _arr; }\n\nfunction _arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }\n\nfunction _createForOfIteratorHelper(o, allowArrayLike) { var it; if (typeof Symbol === \"undefined\" || o[Symbol.iterator] == null) { if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === \"number\") { if (it) o = it; var i = 0; var F = function F() {}; return { s: F, n: function n() { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }, e: function e(_e2) { throw _e2; }, f: F }; } throw new TypeError(\"Invalid attempt to iterate non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\"); } var normalCompletion = true, didErr = false, err; return { s: function s() { it = o[Symbol.iterator](); }, n: function n() { var step = it.next(); normalCompletion = step.done; return step; }, e: function e(_e3) { didErr = true; err = _e3; }, f: function f() { try { if (!normalCompletion && it[\"return\"] != null) it[\"return\"](); } finally { if (didErr) throw err; } } }; }\n\nfunction _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === \"string\") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === \"Object\" && o.constructor) n = o.constructor.name; if (n === \"Map\" || n === \"Set\") return Array.from(o); if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }\n\nfunction _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }\n\nfunction _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }\n\nvar __awaiter = this && this.__awaiter || function (thisArg, _arguments, P, generator) {\n  function adopt(value) {\n    return value instanceof P ? value : new P(function (resolve) {\n      resolve(value);\n    });\n  }\n\n  return new (P || (P = Promise))(function (resolve, reject) {\n    function fulfilled(value) {\n      try {\n        step(generator.next(value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n\n    function rejected(value) {\n      try {\n        step(generator[\"throw\"](value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n\n    function step(result) {\n      result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);\n    }\n\n    step((generator = generator.apply(thisArg, _arguments || [])).next());\n  });\n};\n\nimport axios from \"axios\";\nimport * as d3 from \"d3\";\nimport * as lodash from \"lodash\";\nimport * as Mustache from \"mustache\";\nimport { event } from \"./\";\nimport { parseNewick } from \"./newick\";\nexport var DataSourceType;\n\n(function (DataSourceType) {\n  DataSourceType[\"CSV\"] = \"csv\";\n  DataSourceType[\"TSV\"] = \"tsv\";\n  DataSourceType[\"JSON\"] = \"json\";\n  DataSourceType[\"TEXT\"] = \"text\";\n  DataSourceType[\"NEWICK\"] = \"newick\";\n  DataSourceType[\"IMAGE\"] = \"image\";\n})(DataSourceType || (DataSourceType = {}));\n\nexport var DataLoader = /*#__PURE__*/function () {\n  function DataLoader(options) {\n    _classCallCheck(this, DataLoader);\n\n    this.fileMissing = false;\n    this.selectedFiles = {};\n    this.fileIsDemo = {};\n    this.data = {};\n    this.dataSources = options.sources;\n    this.dataTypes = Object.keys(this.dataSources).filter(function (x) {\n      return x[0] !== \"@\";\n    });\n    this.debugMode = options.debug || false;\n  }\n\n  _createClass(DataLoader, [{\n    key: \"load\",\n    value: function load() {\n      return __awaiter(this, void 0, void 0, /*#__PURE__*/_regeneratorRuntime.mark(function _callee() {\n        var _this = this;\n\n        var checkDependence, paths, _iterator2, _step2, dt, loadOrder, _iterator3, _step3, key, shouldLoad, rawData, def, data, result;\n\n        return _regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                checkDependence = function checkDependence(dt, orig) {\n                  var dp = _this.dataSources[dt].dependsOn;\n\n                  if (!dp) {\n                    return true;\n                  }\n\n                  var result = true;\n\n                  var _iterator = _createForOfIteratorHelper(dp),\n                      _step;\n\n                  try {\n                    for (_iterator.s(); !(_step = _iterator.n()).done;) {\n                      var p = _step.value;\n\n                      if (p === orig) {\n                        return false;\n                      }\n\n                      result = result && checkDependence(p, orig);\n                    }\n                  } catch (err) {\n                    _iterator.e(err);\n                  } finally {\n                    _iterator.f();\n                  }\n\n                  return result;\n                };\n\n                event.emit(event.DATA_LOADING_STARTED); // load data\n\n                if (!(window.gon && window.gon.urls)) {\n                  _context.next = 10;\n                  break;\n                }\n\n                _context.next = 5;\n                return axios.get(window.gon.urls.chosen_file_paths);\n\n              case 5:\n                paths = _context.sent;\n                this.selectedFiles = paths.data;\n                this.fileIsDemo = {};\n                Object.entries(this.selectedFiles).forEach(function (_ref) {\n                  var _ref2 = _slicedToArray(_ref, 2),\n                      k = _ref2[0],\n                      v = _ref2[1];\n\n                  if (v && !Array.isArray(v)) _this.fileIsDemo[k] = v.is_demo || false;\n                });\n                this.metadata = lodash.mapValues(this.selectedFiles, function (x) {\n                  if (!x) return null;\n\n                  if (x instanceof Array) {\n                    return x.map(function (z) {\n                      return z.metadata;\n                    });\n                  }\n\n                  return x.metadata;\n                });\n\n              case 10:\n                _iterator2 = _createForOfIteratorHelper(this.dataTypes);\n                _context.prev = 11;\n\n                _iterator2.s();\n\n              case 13:\n                if ((_step2 = _iterator2.n()).done) {\n                  _context.next = 20;\n                  break;\n                }\n\n                dt = _step2.value;\n\n                if (checkDependence(dt, dt)) {\n                  _context.next = 18;\n                  break;\n                }\n\n                console.error(\"Circular data dependency detected\");\n                return _context.abrupt(\"return\");\n\n              case 18:\n                _context.next = 13;\n                break;\n\n              case 20:\n                _context.next = 25;\n                break;\n\n              case 22:\n                _context.prev = 22;\n                _context.t0 = _context[\"catch\"](11);\n\n                _iterator2.e(_context.t0);\n\n              case 25:\n                _context.prev = 25;\n\n                _iterator2.f();\n\n                return _context.finish(25);\n\n              case 28:\n                loadOrder = this.dataTypes.sort(function (a, b) {\n                  var da = _this.dataSources[a];\n                  var db = _this.dataSources[b];\n\n                  if (lodash.includes(da.dependsOn, b)) {\n                    return 1;\n                  } else if (lodash.includes(db.dependsOn, a)) {\n                    return -1;\n                  }\n\n                  return 0;\n                });\n                _iterator3 = _createForOfIteratorHelper(loadOrder);\n                _context.prev = 30;\n\n                _iterator3.s();\n\n              case 32:\n                if ((_step3 = _iterator3.n()).done) {\n                  _context.next = 55;\n                  break;\n                }\n\n                key = _step3.value;\n                shouldLoad = this.dataSources[key].shouldLoad;\n\n                if (!(shouldLoad && !shouldLoad.call(this))) {\n                  _context.next = 37;\n                  break;\n                }\n\n                return _context.abrupt(\"continue\", 53);\n\n              case 37:\n                _context.prev = 37;\n                _context.next = 40;\n                return this.loadDataFor(key);\n\n              case 40:\n                rawData = _context.sent;\n                def = this.dataSources[key];\n                data = rawData;\n\n                if (typeof def.dataPath === \"string\") {\n                  data = lodash.get(rawData, def.dataPath);\n                } else if (typeof def.dataPath === \"function\") {\n                  data = def.dataPath.call(this, rawData);\n                }\n\n                this.data[key] = data;\n\n                if (typeof def.loaded === \"function\") {\n                  result = def.loaded.call(this, data, def);\n\n                  if (typeof result !== \"undefined\") {\n                    this.data[key] = result;\n                  }\n                }\n\n                _context.next = 52;\n                break;\n\n              case 48:\n                _context.prev = 48;\n                _context.t1 = _context[\"catch\"](37);\n                event.emit(event.DATA_LOADING_FAILED, _context.t1.message);\n                throw _context.t1;\n\n              case 52:\n                if (this.debugMode) {\n                  // tslint:disable-next-line\n                  console.log(key);\n                }\n\n              case 53:\n                _context.next = 32;\n                break;\n\n              case 55:\n                _context.next = 60;\n                break;\n\n              case 57:\n                _context.prev = 57;\n                _context.t2 = _context[\"catch\"](30);\n\n                _iterator3.e(_context.t2);\n\n              case 60:\n                _context.prev = 60;\n\n                _iterator3.f();\n\n                return _context.finish(60);\n\n              case 63:\n                if (this.debugMode) {\n                  // tslint:disable-next-line\n                  console.log(this.data);\n                }\n\n                event.emit(event.DATA_LOADING_FINISHED);\n                event.emit(\"bvd3.dataLoaded\", this.data);\n                return _context.abrupt(\"return\", Promise.resolve(this.data));\n\n              case 67:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee, this, [[11, 22, 25, 28], [30, 57, 60, 63], [37, 48]]);\n      }));\n    }\n  }, {\n    key: \"loadDataFor\",\n    value: function loadDataFor(key) {\n      return __awaiter(this, void 0, void 0, /*#__PURE__*/_regeneratorRuntime.mark(function _callee2() {\n        var _this2 = this;\n\n        var def, isRawData, createPromise, dataType, d3Loader, tasks, origLoader, apiPaths, apiPath;\n        return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n          while (1) {\n            switch (_context2.prev = _context2.next) {\n              case 0:\n                def = this.dataSources[key];\n                isRawData = typeof def.content === \"string\";\n\n                createPromise = function createPromise(path, loader) {\n                  return new Promise(function (fullfill, reject) {\n                    // If file key is optional\n                    if (path === null && !isRawData) {\n                      fullfill(null);\n                      return;\n                    }\n\n                    if (def.type === DataSourceType.IMAGE) {\n                      var image = new Image();\n                      if (def.corsImage) image.crossOrigin = \"anonymous\";\n                      if (path === null) throw Error(\"Image url for key \".concat(key, \" is null\"));\n                      image.src = path;\n\n                      image.onload = function () {\n                        fullfill(getImageDataURL(image, image.naturalWidth, image.naturalHeight));\n                      };\n\n                      image.onerror = function (err) {\n                        reject(err);\n                      };\n\n                      return;\n                    }\n\n                    var dsvHasHeader = def.dsvHasHeader !== false;\n                    var dsvRowParser = def.type === DataSourceType.CSV || def.type === DataSourceType.TSV ? def.dsvRowDef === undefined ? def.dsvRowParser : function (data) {\n                      var result = {};\n                      lodash.forOwn(data, function (value, key) {\n                        var rowDef = def.dsvRowDef[key] || [\"string\"];\n                        if (typeof rowDef === \"string\") rowDef = [rowDef];\n                        var t = rowDef[0];\n                        var k = rowDef[1] || key;\n\n                        switch (t) {\n                          case \"int\":\n                            result[k] = parseInt(value);\n                            break;\n\n                          case \"float\":\n                            result[k] = parseFloat(value);\n                            break;\n\n                          case \"string\":\n                            result[k] = value;\n                            break;\n\n                          default:\n                            break;\n                        }\n                      });\n                      return result;\n                    } : undefined;\n                    var load;\n\n                    if (isRawData) {\n                      load = Promise.resolve(def.content);\n                    } else {\n                      var init = {};\n\n                      if (def.includeCredentials) {\n                        init.credentials = \"include\";\n                      }\n\n                      load = loader.call(_this2, path, init);\n                    }\n\n                    load.then(function (rawData) {\n                      var data;\n\n                      if ((def.type === DataSourceType.CSV || def.type === DataSourceType.TSV) && rawData.charAt(0) === \"#\") {\n                        data = rawData.substr(1);\n                      } else {\n                        data = rawData;\n                      }\n\n                      switch (def.type) {\n                        // cast to any because the definition doesn't support passing undefined as the second arg\n                        case DataSourceType.CSV:\n                          data = dsvHasHeader ? d3.csvParse(data, dsvRowParser) : d3.csvParseRows(data, dsvRowParser);\n                          break;\n\n                        case DataSourceType.TSV:\n                          data = dsvHasHeader ? d3.tsvParse(data, dsvRowParser) : d3.tsvParseRows(data, dsvRowParser);\n                          break;\n\n                        case DataSourceType.JSON:\n                          if (isRawData) data = JSON.parse(data);\n                          break;\n\n                        case DataSourceType.NEWICK:\n                          data = parseNewick(data);\n                          break;\n                      }\n\n                      fullfill(data);\n                    })[\"catch\"](function (error) {\n                      console.error(\"Error loading \".concat(key, \": \").concat(error));\n                      reject(error);\n                    });\n                  });\n                };\n\n                dataType = def.type || DataSourceType.TEXT;\n                d3Loader = dataType === DataSourceType.JSON ? d3.json : d3.text;\n\n                if (!(typeof def.loader === \"function\")) {\n                  _context2.next = 12;\n                  break;\n                }\n\n                tasks = []; // Load data for a key manually, using given options.\n\n                origLoader = function origLoader(options) {\n                  tasks.push(createPromise(_this2.apiPath(key, options), d3Loader));\n                };\n\n                def.loader.call(this, origLoader);\n                return _context2.abrupt(\"return\", Promise.all(tasks));\n\n              case 12:\n                if (!def.multiple) {\n                  _context2.next = 21;\n                  break;\n                }\n\n                apiPaths = this.apiPathMultiple(key);\n\n                if (!apiPaths) {\n                  _context2.next = 18;\n                  break;\n                }\n\n                return _context2.abrupt(\"return\", Promise.all(apiPaths.map(function (x) {\n                  return createPromise(x, d3Loader);\n                })));\n\n              case 18:\n                return _context2.abrupt(\"return\", Promise.resolve(null));\n\n              case 19:\n                _context2.next = 31;\n                break;\n\n              case 21:\n                if (!isRawData) {\n                  _context2.next = 25;\n                  break;\n                }\n\n                return _context2.abrupt(\"return\", createPromise(null, null));\n\n              case 25:\n                apiPath = this.apiPath(key);\n\n                if (!apiPath) {\n                  _context2.next = 30;\n                  break;\n                }\n\n                return _context2.abrupt(\"return\", createPromise(apiPath, d3Loader));\n\n              case 30:\n                return _context2.abrupt(\"return\", Promise.resolve(null));\n\n              case 31:\n              case \"end\":\n                return _context2.stop();\n            }\n          }\n        }, _callee2, this);\n      }));\n    }\n  }, {\n    key: \"apiPathMultiple\",\n    value: function apiPathMultiple(type) {\n      return this._apiPath(type, null, true);\n    }\n  }, {\n    key: \"apiPath\",\n    value: function apiPath(type) {\n      var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;\n      return this._apiPath(type, options);\n    }\n  }, {\n    key: \"_apiPath\",\n    value: function _apiPath(type) {\n      var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;\n      var multiple = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;\n      var def = this.dataSources[type];\n\n      if (typeof def.url === \"string\") {\n        return Mustache.render(def.url, options ? options : this);\n      } else if (typeof def.url === \"function\") {\n        return def.url.call(this, this);\n      } else if (typeof def.fileKey === \"string\") {\n        if (def.fileKeyParams) {\n          var isDemo = this.fileIsDemo[def.fileKey];\n          var url = this.apiPathForFileKey(def.fileKey, multiple, !isDemo);\n          return \"\".concat(url, \"?\").concat(def.fileKeyParams);\n        }\n\n        return this.apiPathForFileKey(def.fileKey, multiple);\n      }\n\n      throw new Error(\"DataLoader: Data source is invalid for type \".concat(type, \".\"));\n    }\n  }, {\n    key: \"apiPathForFileKey\",\n    value: function apiPathForFileKey(key) {\n      var multiple = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;\n      var raw = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;\n\n      if (window.BVD_CUSTOM_DATA_PROVIDER) {\n        var dataList = window.BVD_CUSTOM_DATA_PROVIDER;\n        return dataList.find(function (d) {\n          return d.fileKey === key;\n        }).url;\n      }\n\n      if (!(key in this.selectedFiles)) {\n        throw new Error(\"DataLoader: File key misconfigured. The visualization module required a key \".concat(key, \" that is not available in this analysis.\"));\n      }\n\n      var info = this.selectedFiles[key];\n      if (!info) return null;\n\n      if (multiple) {\n        if (info instanceof Array) {\n          return info.map(function (x) {\n            return x.url;\n          });\n        } else {\n          throw new Error(\"DataLoader: multiple = true for file key \\\"\".concat(key, \"\\\", but this key doesn't accept multiple files.\"));\n        }\n      } else {\n        if (info instanceof Array) {\n          throw new Error(\"DataLoader: multiple = false for file key \\\"\".concat(key, \"\\\", but this key accepts multiple files.\"));\n        } else {\n          return raw ? \"\".concat(window.gon.urls.create_file, \"/\").concat(info.id) : info.url;\n        }\n      }\n    }\n  }]);\n\n  return DataLoader;\n}();\nvar canvas = null;\n\nfunction getImageDataURL(image, width, height) {\n  if (!canvas) {\n    canvas = document.createElement(\"canvas\");\n  }\n\n  canvas.width = width;\n  canvas.height = height;\n  canvas.getContext(\"2d\").drawImage(image, 0, 0);\n  return canvas.toDataURL(\"image/png\");\n}","map":null,"metadata":{},"sourceType":"module"}