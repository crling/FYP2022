{"ast":null,"code":"function _slicedToArray(arr, i) { return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray(arr, i) || _nonIterableRest(); }\n\nfunction _nonIterableRest() { throw new TypeError(\"Invalid attempt to destructure non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\"); }\n\nfunction _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === \"string\") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === \"Object\" && o.constructor) n = o.constructor.name; if (n === \"Map\" || n === \"Set\") return Array.from(o); if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }\n\nfunction _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }\n\nfunction _iterableToArrayLimit(arr, i) { if (typeof Symbol === \"undefined\" || !(Symbol.iterator in Object(arr))) return; var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i[\"return\"] != null) _i[\"return\"](); } finally { if (_d) throw _e; } } return _arr; }\n\nfunction _arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }\n\nimport Oviz from \"crux\";\nimport { editorConfig, editorRef } from \"./editor\";\nimport template from \"./template.bvt\";\nimport { groupedChartColors } from \"oviz-common/palette\";\nimport { ComplexBoxplot, processBoxData } from \"oviz-components/complex-boxplot\";\nimport { EditText } from \"oviz-components/edit-text\";\nimport { GridPlot } from \"oviz-components/grid-plot\";\nimport { register } from \"page/visualizers\";\nimport { rankDict, sortByRankKey } from \"utils/bio-info\";\nimport { registerEditorConfig } from \"utils/editor\";\nvar yLabel = \"Beta diversity\";\nvar MODULE_NAME = \"boxplot\";\n\nfunction init() {\n  if (!window.gon || window.gon.module_name !== MODULE_NAME) return;\n\n  var _Oviz$visualize = Oviz.visualize({\n    el: \"#canvas\",\n    template: template,\n    components: {\n      GridPlot: GridPlot,\n      ComplexBoxplot: ComplexBoxplot,\n      EditText: EditText\n    },\n    data: {\n      config: {\n        yLabel: yLabel,\n        plotSize: [300, 300],\n        showOutliers: true,\n        drawP: true,\n        drawViolin: false,\n        drawScatter: true,\n        hollowBox: false,\n        xAxisRotated: true,\n        labelFontSize: 12,\n        labelOffsetVer: 30,\n        tickFontSize: 12\n      },\n      colors: {\n        box: groupedChartColors[0],\n        scatter: \"pink\",\n        violin: \"LightSteelBlue\"\n      }\n    },\n    loadData: {\n      boxMain: {\n        fileKey: \"boxMain\",\n        type: \"tsv\",\n        multiple: true,\n        dsvHasHeader: false,\n        loaded: function loaded(data) {\n          var _this = this;\n\n          this.data.mainDict = {};\n          var raw = {};\n          this.data.ranks = [];\n          data.sort(function (a, b) {\n            return sortByRankKey(a, b);\n          }).forEach(function (d, i) {\n            var rankLabel = rankDict[d[0][0]];\n\n            _this.data.ranks.push(rankLabel);\n\n            var _processRawData = processRawData(d.slice(1, d.length)),\n                rawData = _processRawData.rawData,\n                boxData = _processRawData.boxData;\n\n            _this.data.mainDict[rankLabel] = boxData;\n\n            if (i === 0) {\n              _this.data.rank = rankLabel;\n              _this.data.data = boxData;\n            }\n\n            raw[rankLabel] = rawData;\n          });\n          this.data.ranks = this.data.ranks.map(function (x) {\n            return {\n              value: x,\n              text: x\n            };\n          });\n          return raw;\n        }\n      },\n      boxP: {\n        fileKey: \"boxP\",\n        type: \"tsv\",\n        optional: true,\n        multiple: true,\n        loaded: function loaded(data) {\n          var _this2 = this;\n\n          this.data.pDict = {};\n          data.forEach(function (d) {\n            var rankLabel = rankDict[d.columns[0]];\n            var categories = _this2.data.mainDict[rankLabel].categories;\n            _this2.data.pDict[rankLabel] = d.map(function (r) {\n              var pValue = parseFloat(r[d.columns[1]]);\n\n              var _r$d$columns$0$split = r[d.columns[0]].split(\":\"),\n                  _r$d$columns$0$split2 = _slicedToArray(_r$d$columns$0$split, 2),\n                  cat1 = _r$d$columns$0$split2[0],\n                  cat2 = _r$d$columns$0$split2[1];\n\n              var pos1 = categories.indexOf(cat1);\n              var pos2 = categories.indexOf(cat2);\n\n              if (pos1 < pos2) {\n                return {\n                  source: cat1,\n                  target: cat2,\n                  pValue: pValue,\n                  sourcePos: pos1,\n                  targetPos: pos2\n                };\n              } else {\n                return {\n                  source: cat2,\n                  target: cat1,\n                  pValue: pValue,\n                  sourcePos: pos2,\n                  targetPos: pos1\n                };\n              }\n            });\n          });\n          return null;\n        }\n      }\n    },\n    setup: function setup() {\n      console.log(this[\"_data\"]);\n      registerEditorConfig(editorConfig(this), editorRef);\n    }\n  }),\n      visualizer = _Oviz$visualize.visualizer;\n\n  return visualizer;\n}\n\nexport function registerBoxplot() {\n  register(MODULE_NAME, init);\n}\n\nfunction processRawData(data) {\n  var rawData = {};\n  var categories = [];\n  var values = [];\n  data.forEach(function (d) {\n    rawData[d[0]] = d.splice(1, d.length).map(function (x) {\n      return parseFloat(x);\n    });\n    categories.push(d[0]);\n    values.push(rawData[d[0]]);\n  });\n  var boxData = processBoxData(values, categories);\n  return {\n    rawData: rawData,\n    boxData: boxData\n  };\n}\n\nregister(MODULE_NAME, init);","map":{"version":3,"sources":["/Users/wangzhenyu/Desktop/fyp_workspace/meta_platform/app/javascript/viz/boxplot/index.ts"],"names":["Oviz","editorConfig","editorRef","template","groupedChartColors","ComplexBoxplot","processBoxData","EditText","GridPlot","register","rankDict","sortByRankKey","registerEditorConfig","yLabel","MODULE_NAME","init","window","gon","module_name","visualize","el","components","data","config","plotSize","showOutliers","drawP","drawViolin","drawScatter","hollowBox","xAxisRotated","labelFontSize","labelOffsetVer","tickFontSize","colors","box","scatter","violin","loadData","boxMain","fileKey","type","multiple","dsvHasHeader","loaded","mainDict","raw","ranks","sort","a","b","forEach","d","i","rankLabel","push","processRawData","slice","length","rawData","boxData","rank","map","x","value","text","boxP","optional","pDict","columns","categories","r","pValue","parseFloat","split","cat1","cat2","pos1","indexOf","pos2","source","target","sourcePos","targetPos","setup","console","log","visualizer","registerBoxplot","values","splice"],"mappings":";;;;;;;;;;;;AAAA,OAAOA,IAAP,MAAiB,MAAjB;AACA,SAASC,YAAT,EAAuBC,SAAvB,QAAwC,UAAxC;AACA,OAAOC,QAAP,MAAqB,gBAArB;AAEA,SAASC,kBAAT,QAAkC,qBAAlC;AACA,SAASC,cAAT,EAAyBC,cAAzB,QAA+C,iCAA/C;AACA,SAASC,QAAT,QAAyB,2BAAzB;AACA,SAASC,QAAT,QAAyB,2BAAzB;AACA,SAAQC,QAAR,QAAuB,kBAAvB;AACA,SAASC,QAAT,EAAmBC,aAAnB,QAAwC,gBAAxC;AACA,SAASC,oBAAT,QAAqC,cAArC;AAEA,IAAMC,MAAM,GAAG,gBAAf;AAEA,IAAMC,WAAW,GAAG,SAApB;;AAEA,SAASC,IAAT,GAAgB;AACZ,MAAI,CAACC,MAAM,CAACC,GAAR,IAAeD,MAAM,CAACC,GAAP,CAAWC,WAAX,KAA2BJ,WAA9C,EAA2D;;AAD/C,wBAGSd,IAAI,CAACmB,SAAL,CAAe;AAChCC,IAAAA,EAAE,EAAE,SAD4B;AAEhCjB,IAAAA,QAAQ,EAARA,QAFgC;AAGhCkB,IAAAA,UAAU,EAAE;AAAEb,MAAAA,QAAQ,EAARA,QAAF;AAAYH,MAAAA,cAAc,EAAdA,cAAZ;AAA4BE,MAAAA,QAAQ,EAARA;AAA5B,KAHoB;AAIhCe,IAAAA,IAAI,EAAE;AACFC,MAAAA,MAAM,EAAE;AACJV,QAAAA,MAAM,EAANA,MADI;AAEJW,QAAAA,QAAQ,EAAE,CAAC,GAAD,EAAM,GAAN,CAFN;AAGJC,QAAAA,YAAY,EAAE,IAHV;AAIJC,QAAAA,KAAK,EAAE,IAJH;AAKJC,QAAAA,UAAU,EAAE,KALR;AAMJC,QAAAA,WAAW,EAAE,IANT;AAOJC,QAAAA,SAAS,EAAE,KAPP;AAQJC,QAAAA,YAAY,EAAE,IARV;AASJC,QAAAA,aAAa,EAAE,EATX;AAUJC,QAAAA,cAAc,EAAE,EAVZ;AAWJC,QAAAA,YAAY,EAAE;AAXV,OADN;AAcFC,MAAAA,MAAM,EAAE;AAAEC,QAAAA,GAAG,EAAE/B,kBAAkB,CAAC,CAAD,CAAzB;AAA8BgC,QAAAA,OAAO,EAAE,MAAvC;AACJC,QAAAA,MAAM,EAAE;AADJ;AAdN,KAJ0B;AAqBhCC,IAAAA,QAAQ,EAAE;AACNC,MAAAA,OAAO,EAAE;AACLC,QAAAA,OAAO,EAAE,SADJ;AAELC,QAAAA,IAAI,EAAE,KAFD;AAGLC,QAAAA,QAAQ,EAAE,IAHL;AAILC,QAAAA,YAAY,EAAE,KAJT;AAKLC,QAAAA,MALK,kBAKEtB,IALF,EAKQ;AAAA;;AACT,eAAKA,IAAL,CAAUuB,QAAV,GAAqB,EAArB;AACA,cAAMC,GAAG,GAAG,EAAZ;AACA,eAAKxB,IAAL,CAAUyB,KAAV,GAAkB,EAAlB;AACAzB,UAAAA,IAAI,CAAC0B,IAAL,CAAU,UAACC,CAAD,EAAIC,CAAJ;AAAA,mBAAUvC,aAAa,CAACsC,CAAD,EAAIC,CAAJ,CAAvB;AAAA,WAAV,EACKC,OADL,CACa,UAACC,CAAD,EAAIC,CAAJ,EAAU;AACf,gBAAMC,SAAS,GAAG5C,QAAQ,CAAC0C,CAAC,CAAC,CAAD,CAAD,CAAK,CAAL,CAAD,CAA1B;;AACA,YAAA,KAAI,CAAC9B,IAAL,CAAUyB,KAAV,CAAgBQ,IAAhB,CAAqBD,SAArB;;AAFe,kCAGYE,cAAc,CAACJ,CAAC,CAACK,KAAF,CAAQ,CAAR,EAAWL,CAAC,CAACM,MAAb,CAAD,CAH1B;AAAA,gBAGRC,OAHQ,mBAGRA,OAHQ;AAAA,gBAGCC,OAHD,mBAGCA,OAHD;;AAIf,YAAA,KAAI,CAACtC,IAAL,CAAUuB,QAAV,CAAmBS,SAAnB,IAAgCM,OAAhC;;AACA,gBAAIP,CAAC,KAAK,CAAV,EAAa;AACT,cAAA,KAAI,CAAC/B,IAAL,CAAUuC,IAAV,GAAiBP,SAAjB;AACA,cAAA,KAAI,CAAChC,IAAL,CAAUA,IAAV,GAAiBsC,OAAjB;AACH;;AACDd,YAAAA,GAAG,CAACQ,SAAD,CAAH,GAAiBK,OAAjB;AACP,WAXD;AAYA,eAAKrC,IAAL,CAAUyB,KAAV,GAAkB,KAAKzB,IAAL,CAAUyB,KAAV,CAAgBe,GAAhB,CAAoB,UAACC,CAAD;AAAA,mBAAS;AAACC,cAAAA,KAAK,EAAED,CAAR;AAAWE,cAAAA,IAAI,EAAEF;AAAjB,aAAT;AAAA,WAApB,CAAlB;AACA,iBAAOjB,GAAP;AACH;AAvBI,OADH;AA0BNoB,MAAAA,IAAI,EAAE;AACF1B,QAAAA,OAAO,EAAE,MADP;AAEFC,QAAAA,IAAI,EAAE,KAFJ;AAGF0B,QAAAA,QAAQ,EAAE,IAHR;AAIFzB,QAAAA,QAAQ,EAAE,IAJR;AAKFE,QAAAA,MALE,kBAKKtB,IALL,EAKW;AAAA;;AACT,eAAKA,IAAL,CAAU8C,KAAV,GAAkB,EAAlB;AACA9C,UAAAA,IAAI,CAAC6B,OAAL,CAAa,UAAAC,CAAC,EAAI;AACd,gBAAME,SAAS,GAAG5C,QAAQ,CAAC0C,CAAC,CAACiB,OAAF,CAAU,CAAV,CAAD,CAA1B;AACA,gBAAMC,UAAU,GAAG,MAAI,CAAChD,IAAL,CAAUuB,QAAV,CAAmBS,SAAnB,EAA8BgB,UAAjD;AACA,YAAA,MAAI,CAAChD,IAAL,CAAU8C,KAAV,CAAgBd,SAAhB,IAA6BF,CAAC,CAACU,GAAF,CAAM,UAAAS,CAAC,EAAI;AACpC,kBAAMC,MAAM,GAAGC,UAAU,CAACF,CAAC,CAACnB,CAAC,CAACiB,OAAF,CAAU,CAAV,CAAD,CAAF,CAAzB;;AADoC,yCAEfE,CAAC,CAACnB,CAAC,CAACiB,OAAF,CAAU,CAAV,CAAD,CAAD,CAAgBK,KAAhB,CAAsB,GAAtB,CAFe;AAAA;AAAA,kBAE7BC,IAF6B;AAAA,kBAEvBC,IAFuB;;AAGpC,kBAAMC,IAAI,GAAGP,UAAU,CAACQ,OAAX,CAAmBH,IAAnB,CAAb;AACA,kBAAMI,IAAI,GAAGT,UAAU,CAACQ,OAAX,CAAmBF,IAAnB,CAAb;;AACA,kBAAIC,IAAI,GAAGE,IAAX,EAAiB;AACb,uBAAO;AAACC,kBAAAA,MAAM,EAAEL,IAAT;AAAeM,kBAAAA,MAAM,EAAEL,IAAvB;AAA6BJ,kBAAAA,MAAM,EAANA,MAA7B;AACHU,kBAAAA,SAAS,EAAEL,IADR;AACcM,kBAAAA,SAAS,EAAEJ;AADzB,iBAAP;AAGH,eAJD,MAIO;AACH,uBAAO;AAACC,kBAAAA,MAAM,EAAEJ,IAAT;AAAeK,kBAAAA,MAAM,EAAEN,IAAvB;AAA6BH,kBAAAA,MAAM,EAANA,MAA7B;AACHU,kBAAAA,SAAS,EAAEH,IADR;AACcI,kBAAAA,SAAS,EAAEN;AADzB,iBAAP;AAGH;AACJ,aAd4B,CAA7B;AAeH,WAlBD;AAmBA,iBAAO,IAAP;AACH;AA3BC;AA1BA,KArBsB;AA6EhCO,IAAAA,KA7EgC,mBA6ExB;AACJC,MAAAA,OAAO,CAACC,GAAR,CAAY,KAAK,OAAL,CAAZ;AACA1E,MAAAA,oBAAoB,CAACX,YAAY,CAAC,IAAD,CAAb,EAAqBC,SAArB,CAApB;AACH;AAhF+B,GAAf,CAHT;AAAA,MAGLqF,UAHK,mBAGLA,UAHK;;AAsFZ,SAAOA,UAAP;AACH;;AAED,OAAO,SAASC,eAAT,GAA2B;AAC9B/E,EAAAA,QAAQ,CAACK,WAAD,EAAcC,IAAd,CAAR;AACH;;AAED,SAASyC,cAAT,CAAwBlC,IAAxB,EAAqC;AACjC,MAAMqC,OAAO,GAAG,EAAhB;AACA,MAAMW,UAAU,GAAG,EAAnB;AACA,MAAMmB,MAAM,GAAG,EAAf;AACAnE,EAAAA,IAAI,CAAC6B,OAAL,CAAa,UAAAC,CAAC,EAAI;AACdO,IAAAA,OAAO,CAACP,CAAC,CAAC,CAAD,CAAF,CAAP,GAAgBA,CAAC,CAACsC,MAAF,CAAS,CAAT,EAAYtC,CAAC,CAACM,MAAd,EAAsBI,GAAtB,CAA0B,UAAAC,CAAC;AAAA,aAAIU,UAAU,CAACV,CAAD,CAAd;AAAA,KAA3B,CAAhB;AACAO,IAAAA,UAAU,CAACf,IAAX,CAAgBH,CAAC,CAAC,CAAD,CAAjB;AACAqC,IAAAA,MAAM,CAAClC,IAAP,CAAYI,OAAO,CAACP,CAAC,CAAC,CAAD,CAAF,CAAnB;AACH,GAJD;AAKA,MAAMQ,OAAO,GAAGtD,cAAc,CAACmF,MAAD,EAASnB,UAAT,CAA9B;AACA,SAAO;AAACX,IAAAA,OAAO,EAAPA,OAAD;AAAUC,IAAAA,OAAO,EAAPA;AAAV,GAAP;AACH;;AAEDnD,QAAQ,CAACK,WAAD,EAAcC,IAAd,CAAR","sourcesContent":["import Oviz from \"crux\";\nimport { editorConfig, editorRef } from \"./editor\";\nimport template from \"./template.bvt\";\n\nimport { groupedChartColors} from \"oviz-common/palette\";\nimport { ComplexBoxplot, processBoxData } from \"oviz-components/complex-boxplot\";\nimport { EditText } from \"oviz-components/edit-text\";\nimport { GridPlot } from \"oviz-components/grid-plot\";\nimport {register} from \"page/visualizers\";\nimport { rankDict, sortByRankKey } from \"utils/bio-info\";\nimport { registerEditorConfig } from \"utils/editor\";\n\nconst yLabel = \"Beta diversity\";\n\nconst MODULE_NAME = \"boxplot\";\n\nfunction init() {\n    if (!window.gon || window.gon.module_name !== MODULE_NAME) return;\n\n    const {visualizer} = Oviz.visualize({\n        el: \"#canvas\",\n        template,\n        components: { GridPlot, ComplexBoxplot, EditText},\n        data: {\n            config: {\n                yLabel,\n                plotSize: [300, 300],\n                showOutliers: true,\n                drawP: true,\n                drawViolin: false,\n                drawScatter: true,\n                hollowBox: false,\n                xAxisRotated: true,\n                labelFontSize: 12,\n                labelOffsetVer: 30,\n                tickFontSize: 12,\n            },\n            colors: { box: groupedChartColors[0], scatter: \"pink\",\n                violin: \"LightSteelBlue\"},\n        },\n        loadData: {\n            boxMain: {\n                fileKey: \"boxMain\",\n                type: \"tsv\",\n                multiple: true,\n                dsvHasHeader: false,\n                loaded(data) {\n                    this.data.mainDict = {};\n                    const raw = {};\n                    this.data.ranks = [];\n                    data.sort((a, b) => sortByRankKey(a, b))\n                        .forEach((d, i) => {\n                            const rankLabel = rankDict[d[0][0]];\n                            this.data.ranks.push(rankLabel);\n                            const {rawData, boxData} = processRawData(d.slice(1, d.length));\n                            this.data.mainDict[rankLabel] = boxData;\n                            if (i === 0) {\n                                this.data.rank = rankLabel;\n                                this.data.data = boxData;\n                            }\n                            raw[rankLabel] = rawData;\n                    });\n                    this.data.ranks = this.data.ranks.map((x) =>  ({value: x, text: x}));\n                    return raw;\n                },\n            },\n            boxP: {\n                fileKey: \"boxP\",\n                type: \"tsv\",\n                optional: true,\n                multiple: true,\n                loaded(data) {\n                    this.data.pDict = {};\n                    data.forEach(d => {\n                        const rankLabel = rankDict[d.columns[0]];\n                        const categories = this.data.mainDict[rankLabel].categories;\n                        this.data.pDict[rankLabel] = d.map(r => {\n                            const pValue = parseFloat(r[d.columns[1]]);\n                            const [cat1, cat2] = r[d.columns[0]].split(\":\");\n                            const pos1 = categories.indexOf(cat1);\n                            const pos2 = categories.indexOf(cat2);\n                            if (pos1 < pos2) {\n                                return {source: cat1, target: cat2, pValue,\n                                    sourcePos: pos1, targetPos: pos2,\n                                };\n                            } else {\n                                return {source: cat2, target: cat1, pValue,\n                                    sourcePos: pos2, targetPos: pos1,\n                                };\n                            }\n                        });\n                    });\n                    return null;\n                },\n            },\n        },\n        setup() {\n            console.log(this[\"_data\"]);\n            registerEditorConfig(editorConfig(this), editorRef);\n        },\n    });\n\n    return visualizer;\n}\n\nexport function registerBoxplot() {\n    register(MODULE_NAME, init);\n}\n\nfunction processRawData(data: any[]) {\n    const rawData = {};\n    const categories = [];\n    const values = [];\n    data.forEach(d => {\n        rawData[d[0]] = d.splice(1, d.length).map(x => parseFloat(x));\n        categories.push(d[0]);\n        values.push(rawData[d[0]]);\n    });\n    const boxData = processBoxData(values, categories);\n    return {rawData, boxData};\n}\n\nregister(MODULE_NAME, init);\n"]},"metadata":{},"sourceType":"module"}