{"ast":null,"code":"function _slicedToArray(arr, i) { return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray(arr, i) || _nonIterableRest(); }\n\nfunction _nonIterableRest() { throw new TypeError(\"Invalid attempt to destructure non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\"); }\n\nfunction _iterableToArrayLimit(arr, i) { if (typeof Symbol === \"undefined\" || !(Symbol.iterator in Object(arr))) return; var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i[\"return\"] != null) _i[\"return\"](); } finally { if (_d) throw _e; } } return _arr; }\n\nfunction _arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }\n\nfunction _createForOfIteratorHelper(o, allowArrayLike) { var it; if (typeof Symbol === \"undefined\" || o[Symbol.iterator] == null) { if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === \"number\") { if (it) o = it; var i = 0; var F = function F() {}; return { s: F, n: function n() { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }, e: function e(_e2) { throw _e2; }, f: F }; } throw new TypeError(\"Invalid attempt to iterate non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\"); } var normalCompletion = true, didErr = false, err; return { s: function s() { it = o[Symbol.iterator](); }, n: function n() { var step = it.next(); normalCompletion = step.done; return step; }, e: function e(_e3) { didErr = true; err = _e3; }, f: function f() { try { if (!normalCompletion && it[\"return\"] != null) it[\"return\"](); } finally { if (didErr) throw err; } } }; }\n\nfunction _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === \"string\") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === \"Object\" && o.constructor) n = o.constructor.name; if (n === \"Map\" || n === \"Set\") return Array.from(o); if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }\n\nfunction _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }\n\nexport function toDeg(d) {\n  return d * 180 / Math.PI;\n}\nexport function toRad(d) {\n  return d * Math.PI / 180;\n}\nexport function toCartesian(x, y) {\n  var isRad = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;\n  var a = isRad ? x - 0.5 * Math.PI : (x - 90) / 180 * Math.PI;\n  return [Math.cos(a) * y, Math.sin(a) * y];\n}\nexport function minmax(data, getter) {\n  var max = Number.MIN_VALUE;\n  var min = Number.MAX_VALUE;\n  var iter = typeof getter === \"string\" ? function (d) {\n    return d[getter];\n  } : getter;\n\n  var _iterator = _createForOfIteratorHelper(data),\n      _step;\n\n  try {\n    for (_iterator.s(); !(_step = _iterator.n()).done;) {\n      var d = _step.value;\n      var value = iter ? iter(d) : d;\n      var vmin = void 0,\n          vmax = void 0;\n\n      if (Array.isArray(value)) {\n        var _value = _slicedToArray(value, 2);\n\n        vmin = _value[0];\n        vmax = _value[1];\n      } else {\n        vmin = vmax = value;\n      }\n\n      if (vmin < min) min = vmin;\n      if (vmax > max) max = vmax;\n    }\n  } catch (err) {\n    _iterator.e(err);\n  } finally {\n    _iterator.f();\n  }\n\n  return [min, max];\n}\nexport function min(data, getter) {\n  var min = Number.MAX_VALUE;\n  var iter = typeof getter === \"string\" ? function (d) {\n    return d[getter];\n  } : getter;\n\n  var _iterator2 = _createForOfIteratorHelper(data),\n      _step2;\n\n  try {\n    for (_iterator2.s(); !(_step2 = _iterator2.n()).done;) {\n      var d = _step2.value;\n      var value = iter ? iter(d) : d;\n      if (value < min) min = value;\n    }\n  } catch (err) {\n    _iterator2.e(err);\n  } finally {\n    _iterator2.f();\n  }\n\n  return min;\n}\nexport function max(data, getter) {\n  var max = Number.MIN_VALUE;\n  var iter = typeof getter === \"string\" ? function (d) {\n    return d[getter];\n  } : getter;\n\n  var _iterator3 = _createForOfIteratorHelper(data),\n      _step3;\n\n  try {\n    for (_iterator3.s(); !(_step3 = _iterator3.n()).done;) {\n      var d = _step3.value;\n      var value = iter ? iter(d) : d;\n      if (value > max) max = value;\n    }\n  } catch (err) {\n    _iterator3.e(err);\n  } finally {\n    _iterator3.f();\n  }\n\n  return max;\n}","map":null,"metadata":{},"sourceType":"module"}