{"ast":null,"code":"import get from '../utils/get';\nimport { stripTags } from '../utils/html';\nimport { isArray, isPlainObject, isUndefined } from '../utils/inspect';\nimport { keys } from '../utils/object';\nimport { warn } from '../utils/warn';\nvar OPTIONS_OBJECT_DEPRECATED_MSG = 'Setting prop \"options\" to an object is deprecated. Use the array format instead.'; // @vue/component\n\nexport default {\n  props: {\n    options: {\n      type: [Array, Object],\n      \"default\": function _default() {\n        return [];\n      }\n    },\n    valueField: {\n      type: String,\n      \"default\": 'value'\n    },\n    textField: {\n      type: String,\n      \"default\": 'text'\n    },\n    htmlField: {\n      type: String,\n      \"default\": 'html'\n    },\n    disabledField: {\n      type: String,\n      \"default\": 'disabled'\n    }\n  },\n  computed: {\n    formOptions: function formOptions() {\n      return this.normalizeOptions(this.options);\n    }\n  },\n  methods: {\n    normalizeOption: function normalizeOption(option) {\n      var key = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null; // When the option is an object, normalize it\n\n      if (isPlainObject(option)) {\n        var value = get(option, this.valueField);\n        var text = get(option, this.textField);\n        return {\n          value: isUndefined(value) ? key || text : value,\n          text: stripTags(String(isUndefined(text) ? key : text)),\n          html: get(option, this.htmlField),\n          disabled: Boolean(get(option, this.disabledField))\n        };\n      } // Otherwise create an `<option>` object from the given value\n\n\n      return {\n        value: key || option,\n        text: stripTags(String(option)),\n        disabled: false\n      };\n    },\n    normalizeOptions: function normalizeOptions(options) {\n      var _this = this; // Normalize the given options array\n\n\n      if (isArray(options)) {\n        return options.map(function (option) {\n          return _this.normalizeOption(option);\n        });\n      } else if (isPlainObject(options)) {\n        // Deprecate the object options format\n        warn(OPTIONS_OBJECT_DEPRECATED_MSG, this.$options.name); // Normalize a `options` object to an array of options\n\n        return keys(options).map(function (key) {\n          return _this.normalizeOption(options[key] || {}, key);\n        });\n      } // If not an array or object, return an empty array\n\n      /* istanbul ignore next */\n\n\n      return [];\n    }\n  }\n};","map":null,"metadata":{},"sourceType":"module"}