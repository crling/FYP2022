{"ast":null,"code":"function _typeof(obj) { \"@babel/helpers - typeof\"; if (typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; }; } return _typeof(obj); }\n\nfunction _toConsumableArray(arr) { return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _unsupportedIterableToArray(arr) || _nonIterableSpread(); }\n\nfunction _nonIterableSpread() { throw new TypeError(\"Invalid attempt to spread non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\"); }\n\nfunction _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === \"string\") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === \"Object\" && o.constructor) n = o.constructor.name; if (n === \"Map\" || n === \"Set\") return Array.from(o); if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }\n\nfunction _iterableToArray(iter) { if (typeof Symbol !== \"undefined\" && Symbol.iterator in Object(iter)) return Array.from(iter); }\n\nfunction _arrayWithoutHoles(arr) { if (Array.isArray(arr)) return _arrayLikeToArray(arr); }\n\nfunction _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }\n\nfunction _templateObject() {\n  var data = _taggedTemplateLiteral([\"\\n    Component {\\n        @let prepData = prep()\\n        @for (arr, pos) in prepData {\\n            @for (d, i) in arr {\\n                Component {\\n                    key = pos * 10 + i\\n                    anchor = getAnchor()\\n                    @props containerOpts(pos)\\n                    @let pathData = d.path\\n                    Component {\\n                        anchor = getViolinAnchor()\\n                        // violin\\n                        Path {\\n                            @props prop.opt.violin\\n                            d = pathData\\n                            stroke = \\\"#aaa\\\"\\n                            fill = d.fill ? d.fill : \\\"none\\\"\\n                            @props prop.violinOptions\\n                        }\\n                        // extreme value line\\n                        @if prop.extremeLine && d.stat {\\n                            Line {\\n                                @props extremeValueLine(d.stat, d.centerPos, d.trans)\\n                                fill = \\\"grey\\\"\\n                                @props prop.extremeLineOptions\\n                            }\\n                        }\\n                        // quartile\\n                        @if prop.quartile && d.stat {\\n                            Line {\\n                                @props quartileOpts(d.stat, d.centerPos, d.trans)\\n                                strokeWidth = \\\"5px\\\"\\n                                @props prop.quartileLineOptions\\n                            }\\n                            Circle.centered {\\n                                @props medianCircleOpts(d.stat, d.centerPos, d.trans)\\n                                r = 3\\n                                fill = \\\"white\\\"\\n                                stroke = \\\"black\\\"\\n                                @props prop.meanPointOptions\\n                            }\\n                        }\\n                    }\\n                }\\n            }\\n        }\\n    }\\n    \"]);\n\n  _templateObject = function _templateObject() {\n    return data;\n  };\n\n  return data;\n}\n\nfunction _taggedTemplateLiteral(strings, raw) { if (!raw) { raw = strings.slice(0); } return Object.freeze(Object.defineProperties(strings, { raw: { value: Object.freeze(raw) } })); }\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }\n\nfunction _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }\n\nfunction _get(target, property, receiver) { if (typeof Reflect !== \"undefined\" && Reflect.get) { _get = Reflect.get; } else { _get = function _get(target, property, receiver) { var base = _superPropBase(target, property); if (!base) return; var desc = Object.getOwnPropertyDescriptor(base, property); if (desc.get) { return desc.get.call(receiver); } return desc.value; }; } return _get(target, property, receiver || target); }\n\nfunction _superPropBase(object, property) { while (!Object.prototype.hasOwnProperty.call(object, property)) { object = _getPrototypeOf(object); if (object === null) break; } return object; }\n\nfunction _inherits(subClass, superClass) { if (typeof superClass !== \"function\" && superClass !== null) { throw new TypeError(\"Super expression must either be null or a function\"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }\n\nfunction _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }\n\nfunction _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }\n\nfunction _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === \"object\" || typeof call === \"function\")) { return call; } return _assertThisInitialized(self); }\n\nfunction _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\"); } return self; }\n\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Date.prototype.toString.call(Reflect.construct(Date, [], function () {})); return true; } catch (e) { return false; } }\n\nfunction _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }\n\nimport * as d3 from \"d3-shape\";\nimport { GeometryValue } from \"../../defs/geometry\";\nimport { template } from \"../../template/tag\";\nimport { BaseChart } from \"./base-chart\";\nexport var Violins = /*#__PURE__*/function (_BaseChart) {\n  _inherits(Violins, _BaseChart);\n\n  var _super = _createSuper(Violins);\n\n  function Violins() {\n    var _this;\n\n    _classCallCheck(this, Violins);\n\n    _this = _super.apply(this, arguments);\n    _this.render = template(_templateObject());\n    return _this;\n  }\n\n  _createClass(Violins, [{\n    key: \"defaultProp\",\n    value: function defaultProp() {\n      return Object.assign(Object.assign({}, _get(_getPrototypeOf(Violins.prototype), \"defaultProp\", this).call(this)), {\n        dataLine: false,\n        quartile: true,\n        half: null,\n        equalMaxCount: \"all\",\n        position: null,\n        fill: null,\n        cut: false,\n        split: false,\n        extremeLine: true,\n        basisCurve: false\n      });\n    } // @ts-ignore\n\n  }, {\n    key: \"quartileOpts\",\n    value: function quartileOpts(stat, centerPos, trans) {\n      return this.flippedOpts({\n        y1: this.getScale(this.flipped)(stat.Q1()),\n        y2: this.getScale(this.flipped)(stat.Q3()),\n        x1: centerPos + trans * 3,\n        x2: centerPos + trans * 3\n      });\n    } // @ts-ignore\n\n  }, {\n    key: \"extremeValueLine\",\n    value: function extremeValueLine(stat, centerPos, trans) {\n      return this.flippedOpts({\n        y1: this.getScale(this.flipped)(stat.max()),\n        y2: this.getScale(this.flipped)(stat.min()),\n        x1: centerPos + trans,\n        x2: centerPos + trans\n      });\n    } // @ts-ignore\n\n  }, {\n    key: \"medianCircleOpts\",\n    value: function medianCircleOpts(stat, centerPos, trans) {\n      return this.flippedOpts({\n        x: centerPos + trans * 3,\n        y: this.getScale(this.flipped)(stat.median())\n      });\n    } // @ts-ignore\n\n  }, {\n    key: \"prep\",\n    value: function prep() {\n      var _this2 = this;\n\n      var useHue = Array.isArray(this.data.raw.violins[0]);\n      var max = this.getMax(useHue);\n      var toReturn;\n      this.updateScale(useHue);\n\n      if (useHue) {\n        this._halfWidth = this.columnWidth / 4;\n        toReturn = this.data.raw.violins.map(function (arr, i) {\n          return arr.map(function (d, j) {\n            if (d.bins.length === 0) {\n              return {\n                path: \"\",\n                stat: null\n              };\n            } else {\n              var height;\n\n              switch (_this2.prop.equalMaxCount) {\n                case \"one\":\n                  height = d.maxY;\n                  break;\n\n                case \"hue\":\n                  height = max[j];\n                  break;\n\n                case \"cat\":\n                  height = Math.max.apply(Math, _toConsumableArray(arr.map(function (d) {\n                    return d.maxY;\n                  })));\n                  break;\n\n                default:\n                  height = Math.max(max[0], max[1]);\n              }\n\n              var centerPos = _this2.prop.split ? _this2.columnWidth / 2 : j === 0 ? _this2.columnWidth / 4 : _this2.columnWidth * 3 / 4;\n\n              var cachedPoints = _this2.getCachedPoints(d.bins, centerPos, height, d.stat);\n\n              var path = _this2.prop.split ? _this2.getPath(cachedPoints[j]) : _this2.getPath(cachedPoints[0]).concat(_this2.getPath(cachedPoints[1])); // const path = this.getPath(cachedPoints[0])\n\n              return {\n                path: path,\n                centerPos: centerPos,\n                fill: _this2.prop.fill ? _this2.prop.fill[j] : \"none\",\n                stat: d.stat,\n                trans: _this2.prop.split ? j === 0 ? -1 : 1 : 0\n              };\n            }\n          });\n        });\n      } else {\n        this._halfWidth = this.columnWidth / 2;\n        toReturn = this.data.raw.violins.map(function (d, i) {\n          var height = _this2.prop.equalMaxCount === \"one\" ? d.maxY : max[0];\n          var centerPos = _this2.columnWidth / 2;\n\n          var cachedPoints = _this2.getCachedPoints(d.bins, centerPos, height, d.stat);\n\n          var path = !false ? _this2.getPath(cachedPoints[0]).concat(_this2.getPath(cachedPoints[1])) : _this2.getPath(cachedPoints[_this2.prop.half === \"left\" ? 0 : 1]);\n          return [{\n            path: path,\n            centerPos: centerPos,\n            fill: _this2.prop.fill ? Array.isArray(_this2.prop.fill) ? _this2.prop.fill[i] : _this2.prop.fill : \"none\",\n            stat: d.stat,\n            trans: _this2.prop.half ? _this2.prop.half === \"left\" ? -1 : 1 : 0\n          }];\n        });\n      }\n\n      return toReturn;\n    } // @ts-ignore\n\n  }, {\n    key: \"containerOpts\",\n    value: function containerOpts(pos) {\n      return this.flippedOpts({\n        x: this.getX(pos),\n        y: this.inverted ? 0 : GeometryValue.fullSize,\n        width: this.getWidth(),\n        height: GeometryValue.fullSize\n      });\n    }\n  }, {\n    key: \"getViolinAnchor\",\n    value: function getViolinAnchor() {\n      return this.flipped ? (this.inverted ? 16\n      /* Left */\n      : 64\n      /* Right */\n      ) | 2\n      /* Top */\n      : (this.inverted ? 2\n      /* Top */\n      : 8\n      /* Bottom */\n      ) | 16\n      /* Left */\n      ;\n    }\n  }, {\n    key: \"getCachedPoints\",\n    value: function getCachedPoints(histoBins, centerPos, height, stat) {\n      var _this3 = this;\n\n      // transform bins to points for line\n      var s;\n      var e;\n\n      if (this.prop.cut) {\n        s = [{\n          x1: stat.min(),\n          x2: stat.min(),\n          y: 0\n        }, {\n          x1: stat.min(),\n          x2: stat.min(),\n          y: histoBins[0].y\n        }];\n        e = [{\n          x1: stat.max(),\n          x2: stat.max(),\n          y: histoBins[histoBins.length - 1].y\n        }, {\n          x1: stat.max(),\n          x2: stat.max(),\n          y: 0\n        }];\n        if (histoBins[0][0] <= stat.min()) histoBins = histoBins.slice(1);\n        if (histoBins[histoBins.length - 1][0] >= stat.max()) histoBins.pop();\n      } else {\n        s = [{\n          x1: histoBins[0].x1 - (histoBins[0].x2 - histoBins[0].x1) / 2,\n          x2: histoBins[0].x1 - (histoBins[0].x2 - histoBins[0].x1) / 2,\n          y: 0\n        }];\n        e = [{\n          x1: histoBins[histoBins.length - 1].x2 + (histoBins[histoBins.length - 1].x2 - histoBins[histoBins.length - 1].x1) / 2,\n          x2: histoBins[histoBins.length - 1].x2 + (histoBins[histoBins.length - 1].x2 - histoBins[histoBins.length - 1].x1) / 2,\n          y: 0\n        }];\n      }\n\n      histoBins = s.concat(histoBins).concat(e);\n      var lPoints = [];\n      var rPoints = [];\n      histoBins.forEach(function (bin) {\n        var xl = centerPos + -bin.y / height * _this3._halfWidth;\n        var xr = centerPos + bin.y / height * _this3._halfWidth;\n\n        var y = _this3.getScale(_this3.flipped)((bin.x1 + bin.x2) / 2);\n\n        lPoints.push(_this3.flipped ? [y, xl] : [xl, y]);\n        rPoints.push(_this3.flipped ? [y, xr] : [xr, y]);\n      });\n      rPoints.reverse();\n      return [lPoints, rPoints];\n    }\n  }, {\n    key: \"getPath\",\n    value: function getPath(cachedPoints) {\n      var path;\n      var lineG = d3.line().curve(this.prop.basisCurve ? d3.curveBasis : d3.curveCatmullRom.alpha(0.5));\n\n      if (this.prop.cut) {\n        console.log(cachedPoints);\n        var curvePoints = cachedPoints.slice(1, cachedPoints.length - 1);\n        path = \"M\".concat(cachedPoints[0][0], \", \").concat(cachedPoints[0][1], \"\\n                    L\").concat(curvePoints[0][0], \", \").concat(curvePoints[0][1]).concat(lineG(curvePoints).replace(\"M\", \"L\")).concat(\"L\".concat(curvePoints[curvePoints.length - 1][0], \", \").concat(curvePoints[curvePoints.length - 1][1])).concat(\"L\".concat(cachedPoints[cachedPoints.length - 1][0], \", \").concat(cachedPoints[cachedPoints.length - 1][1]));\n      } else {\n        path = lineG(cachedPoints);\n      }\n\n      return path;\n    }\n  }, {\n    key: \"getMax\",\n    value: function getMax(useHue) {\n      var _this4 = this;\n\n      if (useHue) {\n        return [0, 1].map(function (_, i) {\n          return Math.max.apply(Math, _toConsumableArray(_this4.data.raw.violins.map(function (arr) {\n            return arr[i].maxY;\n          })));\n        });\n      } else {\n        return [Math.max.apply(Math, _toConsumableArray(this.data.raw.violins.map(function (d) {\n          return d.maxY;\n        })))];\n      }\n    }\n  }, {\n    key: \"updateScale\",\n    value: function updateScale(useHue) {\n      var orgMin = Math.min.apply(Math, _toConsumableArray(this.data.values.map(function (d) {\n        return d.minValue;\n      })));\n      var orgMax = Math.max.apply(Math, _toConsumableArray(this.data.values.map(function (d) {\n        return d.value;\n      })));\n      var scale = this.getScale(this.flipped);\n\n      if (scale.domain()[0] === orgMin && scale.domain()[1] === orgMax) {\n        if (useHue) {\n          var violinData = [];\n          this.data.raw.violins.forEach(function (arr) {\n            return arr.forEach(function (d) {\n              if (d.bins.length !== 0) violinData.push(d.bins);\n            });\n          });\n          var min = Math.min.apply(Math, _toConsumableArray(violinData.map(function (d) {\n            return d[0].x1 - (d[0].x2 - d[0].x1) / 2;\n          })));\n          var max = Math.max.apply(Math, _toConsumableArray(violinData.map(function (d) {\n            return d[d.length - 1].x2 + (d[d.length - 1].x2 - d[d.length - 1].x1) / 2;\n          })));\n          scale.domain([min, max]);\n        } else {\n          var _min = Math.min.apply(Math, _toConsumableArray(this.data.raw.violins.map(function (d) {\n            return d.bins[0].x1 - (d.bins[0].x2 - d.bins[0].x1) / 2;\n          })));\n\n          var _max = Math.max.apply(Math, _toConsumableArray(this.data.raw.violins.map(function (d) {\n            return d.bins[d.bins.length - 1].x2 + (d.bins[d.bins.length - 1].x2 - d.bins[d.bins.length - 1].x1) / 2;\n          })));\n\n          scale.domain([_min, _max]);\n        }\n      }\n    }\n  }]);\n\n  return Violins;\n}(BaseChart);","map":null,"metadata":{},"sourceType":"module"}